{"title":"JavaScript-axios","date":"2019-08-01T08:25:00.000Z","date_formatted":{"ll":"Aug 1, 2019","L":"08/01/2019","MM-DD":"08-01"},"link":"Learning/3802578f2aa7","tags":["JavaScript"],"categories":["Learning"],"updated":"2023-11-14T12:07:06.466Z","content":"<h2 id=\"一、特点\">一、特点<a title=\"#一、特点\" href=\"#一、特点\"></a></h2>\n<p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p>\n<ul>\n<li>从浏览器中创建 XMLHttpRequests</li>\n<li>支持 Promise API</li>\n<li>拦截请求和响应</li>\n<li>转换请求数据和响应数据</li>\n<li>取消请求</li>\n<li>自动转换 JSON 数据</li>\n<li>客户端支持防御 XSRF</li>\n</ul>\n<h2 id=\"二、安装\">二、安装<a title=\"#二、安装\" href=\"#二、安装\"></a></h2>\n<p>使用npm：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install axios --save</span><br></pre></td></tr></table></figure>\n<p>使用cdn：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、使用\">三、使用<a title=\"#三、使用\" href=\"#三、使用\"></a></h2>\n<h3 id=\"3.1-通用api\">3.1 通用API<a title=\"#3.1-通用api\" href=\"#3.1-通用api\"></a></h3>\n<p>axios(config)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送 POST 请求</span></span><br><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">key</span>: value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>( <span class=\"keyword\">function</span> (<span class=\"params\">res</span>)&#123;&#125; )</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>( <span class=\"keyword\">function</span> (<span class=\"params\">err</span>)&#123;&#125; );</span><br></pre></td></tr></table></figure>\n<p>成功返回：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">status</span>: <span class=\"number\">200</span>,       <span class=\"comment\">//HTTP 状态码</span></span><br><span class=\"line\">  <span class=\"attr\">statusText</span>: <span class=\"string\">&#x27;OK&#x27;</span>,  <span class=\"comment\">//HTTP 状态信息</span></span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;&#125;,       <span class=\"comment\">//响应头</span></span><br><span class=\"line\">  <span class=\"attr\">config</span>: &#123;&#125;         <span class=\"comment\">//为请求提供的配置信息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>错误处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span> (<span class=\"params\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error.<span class=\"property\">response</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 请求已发出，但服务器响应的状态码不在 2xx 范围内</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error.<span class=\"property\">response</span>.<span class=\"property\">data</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error.<span class=\"property\">response</span>.<span class=\"property\">status</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error.<span class=\"property\">response</span>.<span class=\"property\">headers</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 因axios配置而导致的错误</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error&#x27;</span>, error.<span class=\"property\">message</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error.<span class=\"property\">config</span>);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.2-axios.get()\">3.2 axios.get()<a title=\"#3.2-axios.get()\" href=\"#3.2-axios.get()\"></a></h3>\n<p>axios.get(url[, config])</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;url&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">key</span>: value   <span class=\"comment\">//会处理成：url?key=value&amp;...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span> (<span class=\"params\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.3-axios.post()\">3.3 axios.post()<a title=\"#3.3-axios.post()\" href=\"#3.3-axios.post()\"></a></h3>\n<p>axios.post(url[, data[, config]])</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;url&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">key</span>: value</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span> (<span class=\"params\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、并发请求\">四、并发请求<a title=\"#四、并发请求\" href=\"#四、并发请求\"></a></h2>\n<p>axios.all(iterable)<br>\naxios.spread(callback)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getUserAccount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;url1&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getUserPermissions</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;url2&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.<span class=\"title function_\">all</span>([<span class=\"title function_\">getUserAccount</span>(), <span class=\"title function_\">getUserPermissions</span>()])</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(axios.<span class=\"title function_\">spread</span>(<span class=\"keyword\">function</span> (<span class=\"params\">acct, perms</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 两个请求现在都执行完成</span></span><br><span class=\"line\">  &#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、其他别名请求\">五、其他别名请求<a title=\"#五、其他别名请求\" href=\"#五、其他别名请求\"></a></h2>\n<p>在使用别名方法时， url、method、data 这些属性都不必在配置中指定。</p>\n<p>axios.request(config)<br>\naxios.get(url[, config])<br>\naxios.delete(url[, config])<br>\naxios.head(url[, config])<br>\naxios.post(url[, data[, config]])<br>\naxios.put(url[, data[, config]])<br>\naxios.patch(url[, data[, config]])</p>\n<h2 id=\"六、config详细\">六、config详细<a title=\"#六、config详细\" href=\"#六、config详细\"></a></h2>\n<p>只有 url 是必需的，method默认使用 get 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// `url` 是用于请求的服务器 URL</span></span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&#x27;url&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `method` 是创建请求时使用的方法</span></span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span>, <span class=\"comment\">// 默认是 get</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class=\"line\">  <span class=\"comment\">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class=\"line\">  <span class=\"comment\">// 只能用在 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class=\"line\">  <span class=\"attr\">transformRequest</span>: [<span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class=\"line\">  <span class=\"attr\">transformResponse</span>: [<span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `headers` 是即将被发送的自定义请求头</span></span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;<span class=\"string\">&#x27;X-Requested-With&#x27;</span>: <span class=\"string\">&#x27;XMLHttpRequest&#x27;</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class=\"line\">  <span class=\"comment\">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class=\"line\">  <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">ID</span>: <span class=\"number\">12345</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class=\"line\">  <span class=\"comment\">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class=\"line\">  <span class=\"attr\">paramsSerializer</span>: <span class=\"keyword\">function</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Qs</span>.<span class=\"title function_\">stringify</span>(params, &#123;<span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;brackets&#x27;</span>&#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `data` 是作为请求主体被发送的数据</span></span><br><span class=\"line\">  <span class=\"comment\">// 只适用于这些请求方法 &#x27;PUT&#x27;, &#x27;POST&#x27;, 和 &#x27;PATCH&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class=\"line\">  <span class=\"comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class=\"line\">  <span class=\"comment\">// - 浏览器专属：FormData, File, Blob</span></span><br><span class=\"line\">  <span class=\"comment\">// - Node 专属： Stream</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;Fred&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class=\"line\">  <span class=\"attr\">withCredentials</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class=\"line\">  <span class=\"attr\">adapter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class=\"line\">  <span class=\"comment\">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span></span><br><span class=\"line\">  <span class=\"attr\">auth</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">&#x27;janedoe&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">&#x27;s00pers3cret&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `responseType` 表示服务器响应的数据类型，可以是 &#x27;arraybuffer&#x27;, &#x27;blob&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">responseType</span>: <span class=\"string\">&#x27;json&#x27;</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class=\"line\">  <span class=\"attr\">xsrfCookieName</span>: <span class=\"string\">&#x27;XSRF-TOKEN&#x27;</span>, <span class=\"comment\">// default</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span></span><br><span class=\"line\">  <span class=\"attr\">xsrfHeaderName</span>: <span class=\"string\">&#x27;X-XSRF-TOKEN&#x27;</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class=\"line\">  <span class=\"attr\">onUploadProgress</span>: <span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对原生进度事件的处理</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class=\"line\">  <span class=\"attr\">onDownloadProgress</span>: <span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对原生进度事件的处理</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class=\"line\">  <span class=\"attr\">maxContentLength</span>: <span class=\"number\">2000</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class=\"line\">  <span class=\"attr\">validateStatus</span>: <span class=\"keyword\">function</span> (<span class=\"params\">status</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>; <span class=\"comment\">// 默认的</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class=\"line\">  <span class=\"attr\">maxRedirects</span>: <span class=\"number\">5</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span></span><br><span class=\"line\">  <span class=\"comment\">// `keepAlive` 默认没有启用</span></span><br><span class=\"line\">  <span class=\"attr\">httpAgent</span>: <span class=\"keyword\">new</span> http.<span class=\"title class_\">Agent</span>(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\">  <span class=\"attr\">httpsAgent</span>: <span class=\"keyword\">new</span> https.<span class=\"title class_\">Agent</span>(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// &#x27;proxy&#x27; 定义代理服务器的主机名称和端口</span></span><br><span class=\"line\">  <span class=\"comment\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class=\"line\">  <span class=\"comment\">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class=\"line\">  <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9000</span>,</span><br><span class=\"line\">    <span class=\"attr\">auth</span>: : &#123;</span><br><span class=\"line\">      <span class=\"attr\">username</span>: <span class=\"string\">&#x27;mikeymike&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">&#x27;rapunz3l&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class=\"line\">  <span class=\"comment\">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class=\"line\">  <span class=\"attr\">cancelToken</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">CancelToken</span>(<span class=\"keyword\">function</span> (<span class=\"params\">cancel</span>) &#123;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"Ubuntu 16.04搭建lnmp环境","link":"Learning/1e8a589a019b"},"next":{"title":"Vue学习-组件","link":"Learning/ba1793c0983f"},"plink":"https://blog.jschef.com/Learning/3802578f2aa7/","toc":[{"id":"一、特点","title":"一、特点","index":"1"},{"id":"二、安装","title":"二、安装","index":"2"},{"id":"三、使用","title":"三、使用","index":"3","children":[{"id":"3.1-通用api","title":"3.1 通用API","index":"3.1"},{"id":"3.2-axios.get()","title":"3.2 axios.get()","index":"3.2"},{"id":"3.3-axios.post()","title":"3.3 axios.post()","index":"3.3"}]},{"id":"四、并发请求","title":"四、并发请求","index":"4"},{"id":"五、其他别名请求","title":"五、其他别名请求","index":"5"},{"id":"六、config详细","title":"六、config详细","index":"6"}],"reward":true,"copyright":{"author":"Chef Wu","link":"<a href=\"https://blog.jschef.com/Learning/3802578f2aa7/\" title=\"JavaScript-axios\">https://blog.jschef.com/Learning/3802578f2aa7/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"August 1, 2019"}}