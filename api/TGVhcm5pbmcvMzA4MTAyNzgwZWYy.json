{"title":"JavaScript-对象创建","date":"2019-07-17T03:33:00.000Z","date_formatted":{"ll":"Jul 17, 2019","L":"07/17/2019","MM-DD":"07-17"},"link":"Learning/308102780ef2","tags":["JavaScript"],"categories":["Learning"],"updated":"2023-11-14T12:07:06.466Z","content":"<h2 id=\"工厂模式\">工厂模式<a title=\"#工厂模式\" href=\"#工厂模式\"></a></h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createPerson</span>(<span class=\"params\">name, age</span>)&#123; </span><br><span class=\"line\">     <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>(); </span><br><span class=\"line\">     o.<span class=\"property\">name</span> = name; </span><br><span class=\"line\">     o.<span class=\"property\">age</span> = age; </span><br><span class=\"line\">     o.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">           <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); </span><br><span class=\"line\">     &#125;; </span><br><span class=\"line\">     <span class=\"keyword\">return</span> o; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过函数createPerson可以无限次的创建新的对象，工厂模式解决了创建多个相似对象的问题，但没有解决对象的标识问题（怎么知道对象的类型）。</p>\n<h2 id=\"构造函数模式\">构造函数模式<a title=\"#构造函数模式\" href=\"#构造函数模式\"></a></h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age</span>)&#123; </span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name; </span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age; </span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">           <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); </span><br><span class=\"line\">     &#125;; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"number\">27</span>);</span><br></pre></td></tr></table></figure>\n<p>构造函数模式没有显式地创建对象，而直接将方法和属性直接赋值给了this，且没有返回语句。在使用构造函数方法创建对象时，是用过new关键字使用的。构造函数模式解决了工厂模式无法标识对象的问题，但也存在一个问题就是每个方法都是实例上重新创建的，即没有实现方法的复用。其中一种解决方法是将对象方法在全局声明，在构造函数中引用。另一种解决方法是原型模式。</p>\n<h2 id=\"原型模式\">原型模式<a title=\"#原型模式\" href=\"#原型模式\"></a></h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>)&#123; &#125; </span><br><span class=\"line\">    <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;Tom&quot;</span>; </span><br><span class=\"line\">    <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">age</span> = <span class=\"number\">29</span>; </span><br><span class=\"line\">    <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">         <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br></pre></td></tr></table></figure>\n<p>每个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法，即可以让所有对象实例共享它所包含的属性和方法。</p>\n","prev":{"title":"JavaScript获取URL参数","link":"Learning/c23845560169"},"next":{"title":"JavaScript-数据操作","link":"Learning/dfc654fe685e"},"plink":"https://blog.jschef.com/Learning/308102780ef2/","toc":[{"id":"工厂模式","title":"工厂模式","index":"1"},{"id":"构造函数模式","title":"构造函数模式","index":"2"},{"id":"原型模式","title":"原型模式","index":"3"}],"reward":true,"copyright":{"author":"Chef Wu","link":"<a href=\"https://blog.jschef.com/Learning/308102780ef2/\" title=\"JavaScript-对象创建\">https://blog.jschef.com/Learning/308102780ef2/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"July 17, 2019"}}