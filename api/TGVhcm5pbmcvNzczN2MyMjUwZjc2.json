{"title":"JSHint的使用和配置","date":"2020-05-06T07:09:26.000Z","date_formatted":{"ll":"May 6, 2020","L":"05/06/2020","MM-DD":"05-06"},"link":"Learning/7737c2250f76","tags":["JSHint","JavaScript"],"categories":["Learning"],"updated":"2023-11-14T12:07:06.466Z","content":"<h2 id=\"一、前言\">一、前言<a title=\"#一、前言\" href=\"#一、前言\"></a></h2>\n<p>为什么要代码质量检测？<br>\n对于前端开发人员来说，使用最多的肯定就是JavaScript，起初JavaScript被开发出来的目的只是用于一些web的简单交互，但随着互联网的发展，网站内容变得丰富，交互变得更加复杂，再加上JavaScript本身设计上有很多缺陷，代码不够严谨就很可能导致一些莫名其妙的错误。有了代码检测工具，可以提示开发者检测代码中潜在的问题，帮助开发者开发出高稳健性的程序。<br>\n目前有很多代码质量检测工具，比如JSHint、JSLint、ESLint等等，其中大部分是以lint结尾的。<code>Lint</code>最初是贝尔实验室开发的一款C语言静态代码分析工具，主要作用是检测C程序中的潜在错误，这也就是大部分代码质量检测工具的命名由来。<code>Hint</code>的中文意思是<code>暗示</code>，也许这就是JSHint的命名由来。</p>\n<h2 id=\"二、-jshint简介\">二、 JSHint简介<a title=\"#二、-jshint简介\" href=\"#二、-jshint简介\"></a></h2>\n<p>JSHint是JavaScript语法和风格的检查工具，是基于JSLint开发的，它可检测到错误和潜在风险告知给开发者。</p>\n<h3 id=\"2.1-jslint、jshint、eslint区别\">2.1 JSLint、JSHint、ESLint区别<a title=\"#2.1-jslint、jshint、eslint区别\" href=\"#2.1-jslint、jshint、eslint区别\"></a></h3>\n<p>发展历程：</p>\n<ol>\n<li>JSLint是第一款JavaScript代码检测工具，但是它最大的问题是几乎不可配置，几乎所有的代码风格和规则都是内置的，很多会导致程序无法继续运行下去；</li>\n<li>JSHint是基于JSLint开发的，它最大的特点就是可配置，对开发者比较友好，团队编码风格可以很好的体现出来；</li>\n<li>ESLint的特点在于可扩展，它不仅可扩展规则，还能扩展解析器，其扩展特点让ESLint在ES5发布后得到蓬勃发展；</li>\n</ol>\n<p>优缺点：</p>\n<div class=\"φbt\"><div class=\"φbv\"><table><thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th style=\"text-align:right\">-</th>\n<th>-</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">JSLint</td>\n<td style=\"text-align:right\">优点：</td>\n<td>开箱即用，规则已经内置好了</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">缺点：</td>\n<td>有限配置选项，很多规则不能禁用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n<td>规范严格，凡是不符合JSLint认为的风格，皆会警告</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n<td>扩展性能差</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n<td>无法根据错误定位到对应规则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JSHint</td>\n<td style=\"text-align:right\">优点：</td>\n<td>有较多参数可配置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n<td>支持配置文件，易于在大型项目中使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n<td>支持一些常用框架和库</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n<td>支持基本的ES6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">缺点：</td>\n<td>不支持自定义规则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n<td>无法根据错误定位到对应规则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ESLint</td>\n<td style=\"text-align:right\">优点：</td>\n<td>默认规则包含了JSLint和JSHint的规则，易于从JSLint和JSHint迁移过来</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n<td>支持插件扩展</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n<td>可以自定义规则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n<td>可以根据错误定位到对应的规则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n<td>支持ES6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n<td>唯一一个支持JSX的工具</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">缺点：</td>\n<td>运行慢</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\"></td>\n<td>需要进行一些自定义配置</td>\n</tr>\n</tbody>\n</table></div></div><blockquote>\n<p>参考自：<a href=\"https://www.sitepoint.com/comparison-javascript-linting-tools/\">https://www.sitepoint.com/comparison-javascript-linting-tools/</a></p>\n</blockquote>\n<h2 id=\"三、安装及其使用方式\">三、安装及其使用方式<a title=\"#三、安装及其使用方式\" href=\"#三、安装及其使用方式\"></a></h2>\n<h3 id=\"3.1-工程上使用（推荐）\">3.1 工程上使用（推荐）<a title=\"#3.1-工程上使用（推荐）\" href=\"#3.1-工程上使用（推荐）\"></a></h3>\n<p>步骤：</p>\n<p><strong>（1）安装开发依赖：（如果package.json中已存在，npm install即可）</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jshint --save-dev</span><br></pre></td></tr></table></figure>\n<p><strong>（2）项目根目录新建文件，命名为 .jshintrc（如果项目中已存在该文件，此步骤略过）</strong></p>\n<p>以下是我给公司angularJS项目制定的规则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;globals&quot;</span>: &#123;  <span class=\"comment\">//全局变量声明：部分框架自带特殊关键词，jshint无法识别可能会报未定义等错误</span></span><br><span class=\"line\">        <span class=\"string\">&quot;$&quot;</span>: <span class=\"literal\">true</span>, </span><br><span class=\"line\">        <span class=\"string\">&quot;angular&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;UE&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;LazyLoad&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;asi&quot;</span>: <span class=\"literal\">true</span>,           <span class=\"comment\">//取消：无分号警告</span></span><br><span class=\"line\">    <span class=\"string\">&quot;bitwise&quot;</span>: <span class=\"literal\">true</span>,       <span class=\"comment\">//禁止使用位运算符&amp;，通常是&amp;&amp;错写成&amp;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;browser&quot;</span>: <span class=\"literal\">true</span>,       <span class=\"comment\">//暴露浏览器属性全局定义，如window,document</span></span><br><span class=\"line\">    <span class=\"string\">&quot;curly&quot;</span>: <span class=\"literal\">true</span>,         <span class=\"comment\">//循环或者条件语句必须使用花括号括起来</span></span><br><span class=\"line\">    <span class=\"string\">&quot;esversion&quot;</span>: <span class=\"number\">5</span>,        <span class=\"comment\">//代码必须撰写的ESCMScript版本</span></span><br><span class=\"line\">    <span class=\"string\">&quot;freeze&quot;</span>: <span class=\"literal\">true</span>,        <span class=\"comment\">//禁止重写对象原型</span></span><br><span class=\"line\">    <span class=\"string\">&quot;moz&quot;</span>: <span class=\"literal\">true</span>,           <span class=\"comment\">//告知JSHint代码是兼容Mozilla的，而非专门为其设计</span></span><br><span class=\"line\">    <span class=\"string\">&quot;nonbsp&quot;</span>: <span class=\"literal\">true</span>,        <span class=\"comment\">//不换行的空格警告</span></span><br><span class=\"line\">    <span class=\"string\">&quot;strict&quot;</span>: <span class=\"literal\">true</span>,        <span class=\"comment\">//必须使用use strict</span></span><br><span class=\"line\">    <span class=\"string\">&quot;undef&quot;</span>: <span class=\"literal\">true</span>,         <span class=\"comment\">//变量未定义警告</span></span><br><span class=\"line\">    <span class=\"string\">&quot;unused&quot;</span>: <span class=\"literal\">true</span>,        <span class=\"comment\">//变量定义未使用警告</span></span><br><span class=\"line\">    <span class=\"string\">&quot;jquery&quot;</span>: <span class=\"literal\">true</span>         <span class=\"comment\">//暴露jQuery库</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>\n<p>JSHint默认配置项有这些：<a href=\"https://github.com/jshint/jshint/blob/master/examples/.jshintrc\">https://github.com/jshint/jshint/blob/master/examples/.jshintrc</a></p>\n</li>\n<li>\n<p>jshint模块会自动读取.jshintrc文件，如果没有生效，可以通过命令：jshint -c /path/to/.jshintrc设置</p>\n</li>\n<li>\n<p>通常情况下，作用于当前目录文件及其所有子目录文件，不会作用于父级目录</p>\n</li>\n<li>\n<p>需要参考项目上使用的框架进行配置，部分框架有jshint相关配置说明，如angular.js</p>\n<p><img src=\"../images/1588748967-1.png\" alt=\"image\" class=\"φbs\"></p>\n</li>\n</ul>\n<p><strong>（3）使用方法：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jshint xxx/a/       #检测xxx目录下的a目录下所有js文件（注意检测目录必须以 / 结尾，否则会被当做文件处理）</span><br><span class=\"line\">jshint xxx/a.js     #检测xxx目录下的a.js</span><br></pre></td></tr></table></figure>\n<p><strong>（4）给本地编辑器安装jshint相应插件（开发人员可选）</strong></p>\n<p>完成前几步后，就可以使用jshint工具对项目代码进行检测了，为了更加方便，建议开发人员在本地编辑器安装jshint相应插件（编辑器自带就不用了），插件会帮助我们自动检测打开的文件，并在Problems生成报告</p>\n<ul>\n<li>VS Code插件：jshint</li>\n<li>Sublime插件：</li>\n<li>WebStorm：</li>\n</ul>\n<h3 id=\"3.2-本地自测\">3.2 本地自测<a title=\"#3.2-本地自测\" href=\"#3.2-本地自测\"></a></h3>\n<p>步骤：</p>\n<p><strong>（1）安装：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g jshint</span><br></pre></td></tr></table></figure>\n<p><strong>（2）使用：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jshint xxx/a/       #检测xxx目录下的a目录下所有js文件（注意检测目录必须以 / 结尾，否则会被当做文件处理）</span><br><span class=\"line\">jshint xxx/a.js     #检测xxx目录下的a.js</span><br></pre></td></tr></table></figure>\n<p><strong>（3）配置：</strong></p>\n<p>完成前面两步后，可以使用jshint的默认配置对项目进行检测了，如果需要自定义一些检测规则，可以在项目根目录下新建一个配置文件 .jshintrc，在里面写入自定义规则，自定义规则详细参见 <strong>3.1 (2)的推荐配置</strong> 和 <strong>第四章详细配置列表</strong></p>\n<p>通常jshint模块会自动寻找项目中的.jshintrc文件，若是没有自定义规则文件未生效，可通过以下命令将自定义规则添加到jshint里</p>\n<p>注意：如果项目上不需要.jshintrc，且仅是本地自测，请一定要将该文件添加至.gitignore里，避免污染项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jshint -c .jshintrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.3-编辑器方式（适用于本地）\">3.3 编辑器方式（适用于本地）<a title=\"#3.3-编辑器方式（适用于本地）\" href=\"#3.3-编辑器方式（适用于本地）\"></a></h3>\n<p>这里以VS code为例说明</p>\n<p><strong>（1）安装：</strong></p>\n<ul>\n<li>\n<p>插件市场搜索jshint并安装</p>\n</li>\n<li>\n<p>安装jshint模块：</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g jshint</span><br></pre></td></tr></table></figure>\n<p><strong>（2）使用：</strong></p>\n<p>安装完成后自动启用，会检测当前所有窗口打开的所有文件，在Problems里输出提示</p>\n<p><strong>（3）配置：</strong></p>\n<p>正常安装完成后检测规则为 <a href=\"https://github.com/jshint/jshint/blob/master/examples/.jshintrc\" target=\"_blank\">jshint默认项</a></p>\n<p>以下是jshint在vs code编辑器中配置：setting.json</p>\n<blockquote>\n<p>提示：插件安装后，在setting.json里输入 js 会有自动提示键入</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t* 以上是其他配置，以下为jshint配置</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">    &quot;jshint.enable&quot;: true,  //是否启用jshint插件</span><br><span class=\"line\">\t&quot;jshint.config&quot;: null,  //包含jshint配置选项的文件路径，如果存在就会覆盖jshint.options和所有.jshintrc文件</span><br><span class=\"line\">    &quot;jshint.options&quot;: &#123;     //jshint配置项</span><br><span class=\"line\">\t\t&quot;globals&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;$&quot;: true,</span><br><span class=\"line\">\t\t\t&quot;angular&quot;: true</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&quot;asi&quot;: true,</span><br><span class=\"line\">\t\t&quot;strict&quot;: true,</span><br><span class=\"line\">\t\t&quot;jquery&quot;: true</span><br><span class=\"line\">\t\t//此处省略一大堆</span><br><span class=\"line\">\t&#125;,   </span><br><span class=\"line\">\t&quot;jshint.exclude&quot;: &#123;&#125;,            //忽略匹配的文件和目录</span><br><span class=\"line\">    &quot;jshint.excludePath&quot;: null,      //指定exclude文件路径，如果存在将覆盖jshint.exclude和所有.jshintignore文件</span><br><span class=\"line\">\t&quot;jshint.html&quot;: false,            //是否检测嵌入html中的JavaScript脚本</span><br><span class=\"line\">    &quot;jshint.nodePath&quot;: &quot;&quot;,           //插件默认会在当前目录或者全局包中查找jshint模块，如果在其他位置，这里需要指定</span><br><span class=\"line\">    &quot;jshint.packageManager&quot;: &quot;npm&quot;,  //指定当前使用的包管理工具</span><br><span class=\"line\">    &quot;jshint.reportWarningsAsErrors&quot;: false,   //将警告类型Warning报告显示为Error错误形式 【该设置不会影响程序正常运行，grunt任务正常】</span><br><span class=\"line\">    &quot;jshint.trace.server&quot;: &quot;off&quot;     //检测VS code 和jshint linter服务之间的通信 【未了解】</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>配置注意</strong>：如果项目里存在.hshintrc文件，该插件会自动读取，并且默认是.jshintrc文件优先，setting.json里设置的options在存在.jshintrc文件时无效。这里建议，本地检测所有配置都写在编辑器配置里，不要写.jshintrc配置文件</p>\n<p><strong>（4）插件常见报错处理</strong></p>\n<ul>\n<li>\n<p>Request initialize failed with message: missing ) after argument list</p>\n<p>参见：<a href=\"https://github.com/Microsoft/vscode-jshint/issues/63\">https://github.com/Microsoft/vscode-jshint/issues/63</a></p>\n<p>解决办法：</p>\n<ul>\n<li>\n<p>先确认是否安装了jshint依赖模块，插件必须配合jshint模块才能正常使用，安装完成后，插件会自动查询jshint模块位置并配置；</p>\n</li>\n<li>\n<p>如果还有问题，请确认jshint模块的安装位置，并在setting.json中配置jshint.nodePath，手动指定jshint模块位置。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3.4-打包工具检测（跟随项目）\">3.4 打包工具检测（跟随项目）<a title=\"#3.4-打包工具检测（跟随项目）\" href=\"#3.4-打包工具检测（跟随项目）\"></a></h3>\n<h4 id=\"3.4.1-grunt\">3.4.1 Grunt<a title=\"#3.4.1-grunt\" href=\"#3.4.1-grunt\"></a></h4>\n<p><strong>安装：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install grunt-contrib-jshint --save-dev</span><br></pre></td></tr></table></figure>\n<p><strong>Gruntfile.js配置：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.<span class=\"title function_\">loadNpmTasks</span>(<span class=\"string\">&#x27;grunt-contrib-jshint&#x27;</span>);    <span class=\"comment\">//加载jshint</span></span><br><span class=\"line\">grunt.<span class=\"title function_\">initConfig</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//...前面省去一大段其他任务代码</span></span><br><span class=\"line\">        <span class=\"comment\">//初始化，定义任务</span></span><br><span class=\"line\">        <span class=\"attr\">jshint</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;            <span class=\"comment\">//配置项</span></span><br><span class=\"line\">                <span class=\"attr\">globals</span>: &#123;&#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">jshintrc</span>: <span class=\"literal\">false</span>,      <span class=\"comment\">//设置为true后，会自动在项目里搜索.jshintrc文件，并.jshintrc文件优先</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">taskA</span>: &#123;              <span class=\"comment\">//需要检测的子任务，例如taskA任务，检测xxx/a/目录</span></span><br><span class=\"line\">                <span class=\"attr\">src</span>: [<span class=\"string\">&#x27;xxx/a/&#x27;</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//示例任务</span></span><br><span class=\"line\">            <span class=\"attr\">editingCenter</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">src</span>: [<span class=\"string\">&#x27;app/editingCenter/editingCenterRouter.js&#x27;</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">websiteAll</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">src</span>: [<span class=\"string\">&#x27;app/editingCenter/website/all/&#x27;</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">//...后面省去一大段其他任务代码</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//加入默认任务</span></span><br><span class=\"line\"><span class=\"comment\">//注意：整体执行时，jshint任务最好排在最前面，避免不必要的等待，因为该任务失败会直接终止整个grunt任务</span></span><br><span class=\"line\">grunt.<span class=\"title function_\">registerTask</span>(<span class=\"string\">&#x27;default&#x27;</span>, [ </span><br><span class=\"line\">\t\t<span class=\"string\">&#x27;jshint&#x27;</span>, <span class=\"string\">&#x27;copy&#x27;</span>, <span class=\"string\">&#x27;bower&#x27;</span>, <span class=\"string\">&#x27;lessTask&#x27;</span>, <span class=\"string\">&#x27;concat:js&#x27;</span>, <span class=\"string\">&#x27;ngAnnotate&#x27;</span>, <span class=\"string\">&#x27;concat:libjs&#x27;</span>, <span class=\"string\">&#x27;concat:libcss&#x27;</span>, <span class=\"string\">&#x27;replace&#x27;</span>, <span class=\"string\">&#x27;uglify&#x27;</span>, <span class=\"string\">&#x27;cssmin&#x27;</span> <span class=\"comment\">/* &#x27;watch&#x27;*/</span></span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自定义任务组合    </span></span><br><span class=\"line\">grunt.<span class=\"title function_\">registerTask</span>(<span class=\"string\">&#x27;jshintTask&#x27;</span>, [</span><br><span class=\"line\">        <span class=\"string\">&#x27;jshint:editingCenter&#x27;</span>,  <span class=\"comment\">//示例：执行editingCenter子任务</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;jshint:websiteAll&#x27;</span>,     <span class=\"comment\">//示例：执行websiteAll子任务</span></span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<p><strong>执行：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt jshint                #执行jshint的所有任务</span><br><span class=\"line\">grunt jshintTask            #执行jshintTask中包含的任务</span><br><span class=\"line\">grunt jshint:editingCenter  #示例：单独执行jshint中的一个子任务</span><br></pre></td></tr></table></figure>\n<p>​\t示例执行结果：</p>\n<p>​\t<img src=\"../images/1588748967-2.png\" alt=\"image\"></p>\n<p>​\t<img src=\"../images/1588748967-3.png\" alt=\"image\"></p>\n<p><strong>备注：该方式如果检测出有潜在问题会直接终止grunt</strong></p>\n<h4 id=\"3.4.2-gulp【待补充】\">3.4.2 Gulp【待补充】<a title=\"#3.4.2-gulp【待补充】\" href=\"#3.4.2-gulp【待补充】\"></a></h4>\n<p>待补充</p>\n<h4 id=\"3.4.3-webpack【待补充】\">3.4.3 Webpack【待补充】<a title=\"#3.4.3-webpack【待补充】\" href=\"#3.4.3-webpack【待补充】\"></a></h4>\n<p>待补充</p>\n<h2 id=\"四、配置选项详细列表\">四、配置选项详细列表<a title=\"#四、配置选项详细列表\" href=\"#四、配置选项详细列表\"></a></h2>\n<p><strong>本节有些说明项中写的代码示例，因为在markdown表格里无法友好的显示，可以下载查看文末的我的doc原稿</strong></p>\n<p>内容参考自 <a href=\"https://jshint.com/docs/options/\" target=\"_blank\">JSHint Options</a> ，可能部分转述不准确，欢迎纠正。</p>\n<p>以下严格类、宽松类、环境变量仅为将规则分组区分，在写入规则时均为同级，无差别<br>\n其中部分即将被废弃的选项转移到了 <a href=\"https://github.com/jscs-dev/node-jscs\" target=\"_blank\">JSCS</a> 项目，该项目可以实现代码检测和自动规范成设定的风格。</p>\n<p>选项中 **加粗项 **表示常用项</p>\n<p>参数中 **加粗 **表示默认值  全部默认值：<a href=\"https://github.com/jshint/jshint/blob/master/examples/.jshintrc\">https://github.com/jshint/jshint/blob/master/examples/.jshintrc</a></p>\n<p>没有默认值的最好自行补充，官方文档不太同步，具体设置未知</p>\n<h3 id=\"4.1-严格类（加限制）\">4.1 严格类（加限制）<a title=\"#4.1-严格类（加限制）\" href=\"#4.1-严格类（加限制）\"></a></h3>\n<p>说明：以下选项通常设置true时表示启用，当false表示禁用，严格选项通俗讲就是添加更多更严苛的规则，给检测增加难度的，设置后会出现较多的警告</p>\n<div class=\"φbt\"><div class=\"φbv\"><table><thead>\n<tr>\n<th><strong>选项</strong></th>\n<th><strong>参数</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>bitwise</strong></td>\n<td>true/<strong>false</strong></td>\n<td>禁用位运算符（&amp;），在JS里不常使用&amp;，这里是防止把&amp;&amp;写成&amp;</td>\n</tr>\n<tr>\n<td>camelcase</td>\n<td>true/false</td>\n<td>该选项即将被JSHint废除：强制变量名称为驼峰写法或者大写字母下划线写法（UPPER_CASE）</td>\n</tr>\n<tr>\n<td><strong>curly</strong></td>\n<td>true/<strong>false</strong></td>\n<td>循环或条件语句必须使用花括号括起来。循环或者条件语句省略花括号时是执行之后的一句，某些情况下可能会被误认为而导致问题</td>\n</tr>\n<tr>\n<td><strong>eqeqeq</strong></td>\n<td>true/<strong>false</strong></td>\n<td>禁止使用 == 和 !=，强制使用 === 和 !==</td>\n</tr>\n<tr>\n<td><strong>esversion</strong></td>\n<td>3/4/<strong>5</strong>/6/7/8/9/10</td>\n<td>代码必须遵循指定的ESCMScript版本  技巧：如果设置3，可以检测项目代码在IE 6/7/8/9等老浏览器版本环境上执行情况</td>\n</tr>\n<tr>\n<td>forin</td>\n<td><strong>true</strong>/false</td>\n<td>要求for in循环必须过滤对象item属性，因为遍历一个对象所有属性名称会包含通过原型链继承过来的属性，通常如以下这么做  for (key in obj) {<code> if (obj.hasOwnProperty(key)) &#123;</code>  // 这样我们就能确定obj中key这个属性时属于obj的，而不是继承而来的<code> &#125;</code>}`</td>\n</tr>\n<tr>\n<td>freeze</td>\n<td><strong>true</strong>/false</td>\n<td>禁止重写原生对象的原型，比如重写了Array、Date等可能会在未来导致一些不可预料的问题  // jshint freeze:true<code>Array.prototype.count = function (value) &#123; return 4; &#125;;</code>// -&gt; Warning: Extending prototype of native object: ‘Array’.`</td>\n</tr>\n<tr>\n<td>futurehostile</td>\n<td>true/fasle</td>\n<td>当使用了在未来JavaScript版本中定义的标识符号，会警告。虽然在当前版本中不会对程序造成影响，但是之后升级版本可能会产生问题</td>\n</tr>\n<tr>\n<td><strong>globals</strong></td>\n<td>{}</td>\n<td>声明全局变量。这里主要是声明一些特有的全局变量，如angular这个词jshint是不会识别的，需要如下设置才不会警告andular is  undefined  “globals”: {  “angular”: true }  <a href=\"https://jshint.com/docs/#inline-configuration\">https://jshint.com/docs/#inline-configuration</a></td>\n</tr>\n<tr>\n<td>immed</td>\n<td>true/<strong>false</strong></td>\n<td>该选项即将被JSHint废除：需要直接调用的函数必须用括号包围 function(){}()</td>\n</tr>\n<tr>\n<td>indent</td>\n<td>数字</td>\n<td>该选项即将被JSHint废除：设置代码缩进长度</td>\n</tr>\n<tr>\n<td>latedef</td>\n<td>ture/<strong>false</strong>/“nofunc”</td>\n<td>禁止在定义之前使用变量。如果设置为&quot;nofunc&quot;，则表示在true时，可以允许函数可以在定义之前使用</td>\n</tr>\n<tr>\n<td>leanswitch</td>\n<td>true/false</td>\n<td>禁止在switch语句中使用不必要的判断</td>\n</tr>\n<tr>\n<td>maxcomplexity</td>\n<td>true/false</td>\n<td>设置代码文件独立直线路径最大复杂度检测</td>\n</tr>\n<tr>\n<td>maxdepth</td>\n<td>数字</td>\n<td>设置代码最大嵌套深度</td>\n</tr>\n<tr>\n<td>maxerr</td>\n<td>数字</td>\n<td>设置JSHint最大警告数，默认50</td>\n</tr>\n<tr>\n<td>maxlen</td>\n<td>数字</td>\n<td>该选项即将被JSHint废除：设置最大行数</td>\n</tr>\n<tr>\n<td>maxparams</td>\n<td>数字</td>\n<td>允许函数形参的最大数量</td>\n</tr>\n<tr>\n<td>maxstatements</td>\n<td>数字</td>\n<td>允许每个函数内最大的声明数，声明包括变量和函数声明</td>\n</tr>\n<tr>\n<td>newcap</td>\n<td>true/<strong>false</strong></td>\n<td>该选项即将被JSHint废除：要求所有的构造器使用 new F() 形式</td>\n</tr>\n<tr>\n<td><strong>noarg</strong></td>\n<td><strong>true</strong>/false</td>\n<td>禁止使用arguments.caller和arguments.callee，因为这两个方法将被弃用，在ES5严格模式下已经禁止了callee</td>\n</tr>\n<tr>\n<td>nocomma</td>\n<td>true/false</td>\n<td>禁止使用逗号操作符，因为如果使用不当，可能会模糊语句值而引起错误</td>\n</tr>\n<tr>\n<td><strong>noempty</strong></td>\n<td><strong>true</strong>/false</td>\n<td>该选项即将被JSHint废除：空代码块警告</td>\n</tr>\n<tr>\n<td>nonbsp</td>\n<td><strong>true</strong>/false</td>\n<td>不换行的空格警告。在mac电脑上开发容易产生一些不间断空格字符而破坏非utf-8的网页</td>\n</tr>\n<tr>\n<td>nonew</td>\n<td>true/<strong>false</strong></td>\n<td>禁止使用new构造器函数。有些人喜欢调用构造函数，但并没有赋值给任何边变量  new MyConstructor();``这是没有任何好处的去声明一个构造器函数而不使用`</td>\n</tr>\n<tr>\n<td>noreturnawait</td>\n<td>true/false</td>\n<td>禁止异步函数在try/catch块外返回await表达式。<a href=\"https://jakearchibald.com/2017/await-vs-return-vs-return-await/\">https://jakearchibald.com/2017/await-vs-return-vs-return-await/</a>  async function foo() {   try {   return await waitAndMaybeReject();   }   catch (e) {   return ‘caught’;   }   }</td>\n</tr>\n<tr>\n<td>predef</td>\n<td>true/false</td>\n<td>允许扩展隐式全局变量</td>\n</tr>\n<tr>\n<td>quotmark</td>\n<td>true/<strong>false</strong>/“single”/“double”</td>\n<td>该选项即将被JSHint废除：     ture：禁止单双引号混用（可用任何一种）   false：什么都不处理   “single”：只允许用单引号   “double”：只允许用双引号</td>\n</tr>\n<tr>\n<td>regexpu</td>\n<td>true/false</td>\n<td>对于不包含“u”标识的正则表达式进行警告，因为u标识扩展了对Unicode的支持，还启用了更加严格的解析规则。</td>\n</tr>\n<tr>\n<td>shadow</td>\n<td>true/false/“inner”/“outer”</td>\n<td>检查变量重复定义     true：允许变量覆盖   false/“inner”：只检查是否在相同的作用域重复定义   “outer”：检查外部作用域</td>\n</tr>\n<tr>\n<td>singleGroups</td>\n<td>true/false</td>\n<td>禁止使用非必要的分组操作符  // jshint singleGroups: true``delete(obj.attr); // Warning: Unnecessary grouping operator. 使用 delete obj.attr即可，分组操作是不必要的`</td>\n</tr>\n<tr>\n<td><strong>strict</strong></td>\n<td><strong>true</strong>/false/“global”/“implied”</td>\n<td>要求代码以ES5严格模式运行     true：必须使用“use strict”，检测到函数级别   false：关闭严格模式下的警告   “global”：在全局层面必须有一个“use strict”   “implied”：在文件里面使用“use strict”</td>\n</tr>\n<tr>\n<td>trailingcomma</td>\n<td>true/false</td>\n<td>在数组或者对象最后一项后没有逗号时警告。在ES5起，鼓励使用逗号结尾</td>\n</tr>\n<tr>\n<td><strong>undef</strong></td>\n<td><strong>true</strong>/false</td>\n<td>变量未定义</td>\n</tr>\n<tr>\n<td><strong>unused</strong></td>\n<td><strong>true</strong>/false</td>\n<td>变量定义了未使用</td>\n</tr>\n<tr>\n<td>varstmt</td>\n<td>true/<strong>false</strong></td>\n<td>禁止使用var声明变量，需使用let或者const代替</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"4.2-宽松类（取消限制）\">4.2 宽松类（取消限制）<a title=\"#4.2-宽松类（取消限制）\" href=\"#4.2-宽松类（取消限制）\"></a></h3>\n<p>说明：宽松选项设置（true）后会放松检测，取消某些检测，会减少警告量</p>\n<div class=\"φbt\"><div class=\"φbv\"><table><thead>\n<tr>\n<th><strong>选项</strong></th>\n<th><strong>参数</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>asi</strong></td>\n<td>true/<strong>false</strong></td>\n<td>禁止缺少分号警告</td>\n</tr>\n<tr>\n<td>boss</td>\n<td>true/<strong>false</strong></td>\n<td>禁止比较表达式没有达到预期的警告  通常情况下 if (a=10){} 这样使用时错误的，但也有部分情况需要这样使用，如  for ( var i=0,person; person=people[i]; i++ )  取消这样的警告，可以这样处理：  for ( var i=0,person; (person=people[i]); i++ )</td>\n</tr>\n<tr>\n<td>debug</td>\n<td>true/<strong>false</strong></td>\n<td>true忽略debugger代码</td>\n</tr>\n<tr>\n<td>elision</td>\n<td>true/false</td>\n<td>告知JSHint代码使用ES3数组省略元素或者空元素（[1,4,8]）</td>\n</tr>\n<tr>\n<td><strong>eqnull</strong></td>\n<td>true/<strong>false</strong></td>\n<td>取消 ==null 比较  警告，通常这样的比较可以检查变量是否null或者undefined</td>\n</tr>\n<tr>\n<td>evil</td>\n<td>true/<strong>false</strong></td>\n<td>取消 使用了eval的 警告。eval容易使代码受到各种注入攻击，并且是JS解析器很难进行某些优化</td>\n</tr>\n<tr>\n<td><strong>expr</strong></td>\n<td>true/<strong>false</strong></td>\n<td>取消 使用表达式 警告。一般函数调用，而非表达式，但是现在规范并没有明确禁止这样用。</td>\n</tr>\n<tr>\n<td>funcscope</td>\n<td>true/<strong>false</strong></td>\n<td>取消 结构内声明的变量在结构外使用的 警告。虽然var声明有变量提升，但是这样使用的不利于开发者调试程序的。  function test() {<code> if (true) &#123;</code>  var x = 0;<code> &#125;</code> x += 1; // Default: ‘x’ used out of scope.<code>     // 当funcscope:true时，JSHint不会发出警告</code>}`</td>\n</tr>\n<tr>\n<td>iterator</td>\n<td>true/<strong>false</strong></td>\n<td>取消 使用__iterator__属性的 警告。并不是所有浏览器都支持此属性，需要谨慎使用。</td>\n</tr>\n<tr>\n<td>lastsemic</td>\n<td>true/<strong>false</strong></td>\n<td>取消 一行代码最后声明后面的分号遗漏 警告。</td>\n</tr>\n<tr>\n<td>laxbreak</td>\n<td>true/<strong>false</strong></td>\n<td>该选项即将被JSHint废除：取消 不安全的折行 警告。</td>\n</tr>\n<tr>\n<td>laxcomma</td>\n<td>true/<strong>false</strong></td>\n<td>该选项即将被JSHint废除：取消 检测逗号在代码行最前面的编程风格  var obj = {<code>  name: 'Anton'</code> , handle: ‘valueof’<code> , role: 'SW Engineer'</code>};`</td>\n</tr>\n<tr>\n<td>loopfunc</td>\n<td>true/<strong>false</strong></td>\n<td>取消 内部循环 警告。  var nums = [];<code>for (var i = 0; i &lt; 10; i++) &#123;</code> nums[i] = function (j) {<code>  return i + j;</code> };<code>&#125;</code>nums<a href=\"2\">0</a>; // 会输出12而非2<code>这类问题使用立即函数进行定义就可以规避</code>var nums = [];<code>for (var i = 0; i &lt; 10; i++) &#123;</code> (function (i) {<code>  nums[i] = function (j) &#123;</code>    return i + j;<code>  &#125;;</code> }(i));``}`</td>\n</tr>\n<tr>\n<td>moz</td>\n<td>true/<strong>false</strong></td>\n<td>告知JSHint代码是兼容Mozilla。如果专门为Firefox web浏览器开发则不需要此项</td>\n</tr>\n<tr>\n<td>multistr</td>\n<td>true/<strong>false</strong></td>\n<td>该选项即将被JSHint废除：取消 多行字符串 警告。多行字符串在JS里是错误的，如果加\\说明时，在后面多了空格也是会导致整个字符串错误的  // jshint multistr:true<code> </code>var text = &quot;Hello`<code>World&quot;; // 这样没有问题`` ``text = &quot;Hello``World&quot;; // Warning, no escape character.`` ``text = &quot;Hello\\ ``World&quot;; // Warning, there is a space after \\</code></td>\n</tr>\n<tr>\n<td>notypeof</td>\n<td>true/<strong>false</strong></td>\n<td>取消 typeof比较不合理的typeof值 警告。  // typeof合理值应该是 ‘function’， if (typeof a == “fuction”) { // Invalid typeof value ‘fuction’<code> // ...</code>}</td>\n</tr>\n<tr>\n<td>noyield</td>\n<td>true/<strong>false</strong></td>\n<td>取消 函数生成器没有yield声明 警告。</td>\n</tr>\n<tr>\n<td>pulsplus</td>\n<td>true/<strong>false</strong></td>\n<td>禁止使用 一元递增或递减运算符。有些人认为这个会降低编码样式的质量</td>\n</tr>\n<tr>\n<td>proto</td>\n<td>true/<strong>false</strong></td>\n<td>取消 关于__proto__属性的 警告。</td>\n</tr>\n<tr>\n<td>scripturl</td>\n<td>true/<strong>false</strong></td>\n<td>取消 使用了脚本定向的url 警告。如 javascirpt: …</td>\n</tr>\n<tr>\n<td><strong>sub</strong></td>\n<td>true/<strong>false</strong></td>\n<td>该选项即将被JSHint废除：取消  检测属性使用 [] 的警告，可以用 . 替代。如 person[‘name’] = <a href=\"http://pserson.name\">pserson.name</a></td>\n</tr>\n<tr>\n<td>supernew</td>\n<td>true/<strong>false</strong></td>\n<td>取消 检测怪异结构的 警告。如 new function(){ … }和new Object</td>\n</tr>\n<tr>\n<td>validthis</td>\n<td>true/<strong>false</strong></td>\n<td>取消 在非构造函数中使用this的 警告。</td>\n</tr>\n<tr>\n<td>withstmt</td>\n<td>true/false</td>\n<td>取消 检查with使用的声明。with声明语句可以引起全局变量定义之间的混乱。</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"4.3-环境变量选项\">4.3 环境变量选项<a title=\"#4.3-环境变量选项\" href=\"#4.3-环境变量选项\"></a></h3>\n<p>说明：这些选项可以告知JSHint一些预先定义好的全局变量</p>\n<div class=\"φbt\"><div class=\"φbv\"><table><thead>\n<tr>\n<th><strong>选项</strong></th>\n<th><strong>参数</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>browser</strong></td>\n<td><strong>true</strong>/false</td>\n<td>暴露浏览器属性的全局定义，如window,document</td>\n</tr>\n<tr>\n<td>browserify</td>\n<td>true/<strong>false</strong></td>\n<td>全局定义，可用Browserify工具建立一个项目</td>\n</tr>\n<tr>\n<td>couch</td>\n<td>true/<strong>false</strong></td>\n<td>全局暴露CouchDb。CouchDB是一个面向文档的数据库，可以查询和索引MapReduce的方式使用JavaScript</td>\n</tr>\n<tr>\n<td>devel</td>\n<td><strong>true</strong>/false</td>\n<td>定义常用于日志调试的console,alert等变量</td>\n</tr>\n<tr>\n<td>dojo</td>\n<td>true/<strong>false</strong></td>\n<td>全局暴露的Dojo  Toolkit</td>\n</tr>\n<tr>\n<td>jasmine</td>\n<td>true/<strong>false</strong></td>\n<td>全局暴露jasmine的单元测试框架</td>\n</tr>\n<tr>\n<td><strong>jquery</strong></td>\n<td><strong>true</strong>/false</td>\n<td>全局暴露的jQuery库</td>\n</tr>\n<tr>\n<td>mocha</td>\n<td><strong>true</strong>/false</td>\n<td>全局暴露的“BDD”和“TDD”的ui mocha单元测试框架</td>\n</tr>\n<tr>\n<td>module</td>\n<td>true/false</td>\n<td>告诉JSHint,输入代码描述了一个ECMAScript 6模块。所有模块的代码解释为严格模式代码</td>\n</tr>\n<tr>\n<td>mootools</td>\n<td>true/<strong>false</strong></td>\n<td>全局暴露的MooToolsJavaScript框架</td>\n</tr>\n<tr>\n<td>node</td>\n<td>true/<strong>false</strong></td>\n<td>告知你的代码运行在node环境</td>\n</tr>\n<tr>\n<td>nonstandard</td>\n<td>true/<strong>false</strong></td>\n<td>告知非标准但广泛采用全局定义等 escape和 unescape</td>\n</tr>\n<tr>\n<td>phantom</td>\n<td>true/<strong>false</strong></td>\n<td>告知你的代码运行在PhantomJS环境</td>\n</tr>\n<tr>\n<td>prototypejs</td>\n<td>true/<strong>false</strong></td>\n<td>全局暴露的prototypejs框架</td>\n</tr>\n<tr>\n<td>qunit</td>\n<td>true/<strong>false</strong></td>\n<td>全局暴露QUnit单元测试框架</td>\n</tr>\n<tr>\n<td>rhino</td>\n<td>true/<strong>false</strong></td>\n<td>告知你的代码运行在rhino环境</td>\n</tr>\n<tr>\n<td>shelljs</td>\n<td>true/<strong>false</strong></td>\n<td>全局暴露ShellJS库</td>\n</tr>\n<tr>\n<td>typed</td>\n<td>true/<strong>false</strong></td>\n<td>全局定义数组类型构造函数</td>\n</tr>\n<tr>\n<td>worker</td>\n<td>true/<strong>false</strong></td>\n<td>全局可以当你的代码运行在web worker。web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能  注：除IE外，所有主流浏览器均支持web worker</td>\n</tr>\n<tr>\n<td>wsh</td>\n<td>true/<strong>false</strong></td>\n<td>告知你的代码运行在Windows  Script Host环境</td>\n</tr>\n<tr>\n<td>yui</td>\n<td>true/<strong>false</strong></td>\n<td>全局暴露的yui框架</td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"五、常见问题及处理方法\">五、常见问题及处理方法<a title=\"#五、常见问题及处理方法\" href=\"#五、常见问题及处理方法\"></a></h2>\n<p>我整理了一些常见的E和W的错误和警告编号，示例、以及处理建议，但是图片太多了，我就不搬进这篇文章了，可以直接下载doc原稿查看。</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/1k9wKJEUKrJe_R9aNQUfcSQ\">https://pan.baidu.com/s/1k9wKJEUKrJe_R9aNQUfcSQ</a><br>\n提取码：vq3k</p>\n","prev":{"title":"毕业设计-“跑鸭”微信小程序","link":"Learning/3029bde5b8fc"},"next":{"title":"TypeScript学习-数据类型","link":"Learning/d4c7cbf3ff66"},"plink":"https://blog.jschef.com/Learning/7737c2250f76/","toc":[{"id":"一、前言","title":"一、前言","index":"1"},{"id":"二、-jshint简介","title":"二、 JSHint简介","index":"2","children":[{"id":"2.1-jslint、jshint、eslint区别","title":"2.1 JSLint、JSHint、ESLint区别","index":"2.1"}]},{"id":"三、安装及其使用方式","title":"三、安装及其使用方式","index":"3","children":[{"id":"3.1-工程上使用（推荐）","title":"3.1 工程上使用（推荐）","index":"3.1"},{"id":"3.2-本地自测","title":"3.2 本地自测","index":"3.2"},{"id":"3.3-编辑器方式（适用于本地）","title":"3.3 编辑器方式（适用于本地）","index":"3.3"},{"id":"3.4-打包工具检测（跟随项目）","title":"3.4 打包工具检测（跟随项目）","index":"3.4"}]},{"id":"四、配置选项详细列表","title":"四、配置选项详细列表","index":"4","children":[{"id":"4.1-严格类（加限制）","title":"4.1 严格类（加限制）","index":"4.1"},{"id":"4.2-宽松类（取消限制）","title":"4.2 宽松类（取消限制）","index":"4.2"},{"id":"4.3-环境变量选项","title":"4.3 环境变量选项","index":"4.3"}]},{"id":"五、常见问题及处理方法","title":"五、常见问题及处理方法","index":"5"}],"reward":true,"copyright":{"author":"Chef Wu","link":"<a href=\"https://blog.jschef.com/Learning/7737c2250f76/\" title=\"JSHint的使用和配置\">https://blog.jschef.com/Learning/7737c2250f76/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"May 6, 2020"}}