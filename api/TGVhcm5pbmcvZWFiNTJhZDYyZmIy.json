{"title":"WebRTC实践","date":"2021-07-28T08:59:20.000Z","date_formatted":{"ll":"Jul 28, 2021","L":"07/28/2021","MM-DD":"07-28"},"thumbnail":"images/20210728/cover.jpg","link":"Learning/eab52ad62fb2","tags":["JavaScript","WebRTC"],"categories":["Learning"],"updated":"2023-11-14T12:07:06.466Z","content":"<p>【长文警告⚠️】本文内容涉及到了WebRTC涉及的协议讲解、相关服务器的搭建、WebRTC核心API学习，最后包含一个WenRTC音视频通话的小实例开发教程实践（含完整代码）。</p>\n<span id=\"more\"></span>\n<p>PPT讲解：<a href=\"https://pan.baidu.com/s/1TXrCi7lubkUGyhcIVz_Lhg\">https://pan.baidu.com/s/1TXrCi7lubkUGyhcIVz_Lhg</a> 提取码: fm6h</p>\n<h1 id=\"一、协议\">一、协议<a title=\"#一、协议\" href=\"#一、协议\"></a></h1>\n<h2 id=\"1.1-p2p通信原理与实现\">1.1 P2P通信原理与实现<a title=\"#1.1-p2p通信原理与实现\" href=\"#1.1-p2p通信原理与实现\"></a></h2>\n<h3 id=\"1.1.1-基本术语\">1.1.1 基本术语<a title=\"#1.1.1-基本术语\" href=\"#1.1.1-基本术语\"></a></h3>\n<p><strong>防火墙（Firewall）</strong>： 防火墙主要限制内网和公网的通讯，通常丢弃未经许可的数据包。防火墙会检测(但是不修改)试图进入内网数据包的IP地址和TCP/UDP端口信息。</p>\n<p><strong>网络地址转换协议</strong><a href=\"http://en.wikipedia.org/wiki/NAT\" target=\"_blank\">（NAT）</a>： 用来给你的（私网）设备映射一个公网的IP地址的协议。一般情况下，路由器的WAN口有一个公网IP，所有连接这个路由器LAN口的设备会分配一个私有网段的IP地址（例如192.168.1.3）。私网设备的IP被映射成路由器的公网IP和唯一的端口，通过这种方式不需要为每一个私网设备分配不同的公网IP，但是依然能被外网设备发现。NAT不止检查进入数据包的头部，而且对其进行修改，从而实现同一内网中不同主机共用更少的公网IP（通常是一个）。</p>\n<p><strong>基本NAT（Basic NAT）</strong>： 基本NAT会将内网主机的IP地址映射为一个公网IP，不改变其TCP/UDP端口号。基本NAT通常只有在当NAT有公网IP池的时候才有用。</p>\n<p><strong>网络地址-端口转换器（NAPT）</strong>： 到目前为止最常见的即为NAPT，其检测并修改出入数据包的IP地址和端口号，从而允许多个内网主机同时共享一个公网IP地址。</p>\n<p><strong>锥形NAT（Cone NAT）</strong>： 在建立了一对（公网IP，公网端口）和（内网IP，内网端口）二元组的绑定之后，Cone NAT会重用这组绑定用于接下来该应用程序的所有会话（同一内网IP和端口），只要还有一个会话还是激活的。 例如，假设客户端A建立了两个连续的对外会话，从相同的内部端点（10.0.0.1:1234）到两个不同的外部服务端S1和S2。Cone NAT只为两个会话映射了一个公网端点（155.99.25.11:62000）， 确保客户端端口的“身份”在地址转换的时候保持不变。由于基本NAT和防火墙都不改变数据包的端口号，因此这些类型的中间件也可以看作是退化的Cone NAT。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    Server S1                                     Server S2</span><br><span class=\"line\">18.181.0.31:1235                              138.76.29.7:1235</span><br><span class=\"line\">       |                                             |</span><br><span class=\"line\">       |                                             |</span><br><span class=\"line\">       +----------------------+----------------------+</span><br><span class=\"line\">                              |</span><br><span class=\"line\">  ^  Session 1 (A-S1)  ^      |      ^  Session 2 (A-S2)  ^</span><br><span class=\"line\">  |  18.181.0.31:1235  |      |      |  138.76.29.7:1235  |</span><br><span class=\"line\">  v 155.99.25.11:62000 v      |      v 155.99.25.11:62000 v</span><br><span class=\"line\">                              |</span><br><span class=\"line\">                           Cone NAT</span><br><span class=\"line\">                         155.99.25.11</span><br><span class=\"line\">                              |</span><br><span class=\"line\">  ^  Session 1 (A-S1)  ^      |      ^  Session 2 (A-S2)  ^</span><br><span class=\"line\">  |  18.181.0.31:1235  |      |      |  138.76.29.7:1235  |</span><br><span class=\"line\">  v   10.0.0.1:1234    v      |      v   10.0.0.1:1234    v</span><br><span class=\"line\">                              |</span><br><span class=\"line\">                           Client A</span><br><span class=\"line\">                        10.0.0.1:1234</span><br></pre></td></tr></table></figure>\n<h3 id=\"1.1.2-udp打洞(udp-hole-punching)\">1.1.2 UDP打洞(UDP hole punching)<a title=\"#1.1.2-udp打洞(udp-hole-punching)\" href=\"#1.1.2-udp打洞(udp-hole-punching)\"></a></h3>\n<p>P2P通信技术中被广泛采用的技术“UDP打洞”。UDP打洞技术依赖于通常防火墙和cone NAT允许正当的P2P应用程序在中间件中打洞且与对方建立直接链接的特性。</p>\n<p>在学习UDP打洞之前，我们先了解一下另外两种P2P通信技术。</p>\n<p>（1）中继（Relaying）</p>\n<p>中继是最可靠但效率最低的一种P2P通信技术，它的原理是通过一台服务器来中继转发不同客户端的数据。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                       Server S</span><br><span class=\"line\">                          |</span><br><span class=\"line\">                          |</span><br><span class=\"line\">   +----------------------+----------------------+</span><br><span class=\"line\">   |                                             |</span><br><span class=\"line\"> NAT A                                         NAT B</span><br><span class=\"line\">   |                                             |</span><br><span class=\"line\">   |                                             |</span><br><span class=\"line\">Client A                                      Client B</span><br></pre></td></tr></table></figure>\n<p>什么意思呢？就是我和你开视频，我和你的视频数据会直接被我们共同连接上的一台服务器接收，这台服务器会将你我的视频数据分别转发响应给我和你的客户端。这样服务器压力就很大，带宽需求也非常大，当仅仅只有两个客户端连接服务器开视频的话，服务器的带宽就至少是客户端带宽的两倍，CPU消耗同样也是。那么当同时视频通话的人很多了，那么服务器的压力难以想象。</p>\n<p>所以中继是一种效率很低的P2P通信技术。</p>\n<p>（2）逆向连接（Connection reversal）</p>\n<p>这种连接只有在两个通信端点中有一个不存在中间件的时候有效。</p>\n<p>例如，客户端A在NAT之后而客户端B拥有全局IP地址，如下图：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                            Server S</span><br><span class=\"line\">                        18.181.0.31:1235</span><br><span class=\"line\">                               |</span><br><span class=\"line\">                               |</span><br><span class=\"line\">        +----------------------+----------------------+</span><br><span class=\"line\">        |                                             |</span><br><span class=\"line\">      NAT A                                           |</span><br><span class=\"line\">155.99.25.11:62000                                    |</span><br><span class=\"line\">        |                                             |</span><br><span class=\"line\">        |                                             |</span><br><span class=\"line\">     Client A                                      Client B</span><br><span class=\"line\">  10.0.0.1:1234                               138.76.29.7:1234　</span><br></pre></td></tr></table></figure>\n<p>客户端A内网地址为10.0.0.1，且应用程序正在使用TCP端口1234。A和服务器S建立了一个连接，服务器的IP地址为18.181.0.31，监听1235端口。NAT A给客户端A分配了TCP端口62000，地址为NAT的公网IP地址155.99.25.11， 作为客户端A对外当前会话的临时IP和端口。因此S认为客户端A就是155.99.25.11:62000。而B由于有公网地址，所以对S来说B就是138.76.29.7:1234。</p>\n<p>当客户端B想要发起一个对客户端A的P2P链接时，要么链接A的外网地址155.99.25.11:62000，要么链接A的内网地址10.0.0.1:1234，然而两种方式链接都会失败。 链接10.0.0.1:1234失败自不用说，为什么链接155.99.25.11:62000也会失败呢？来自B的TCP SYN握手请求到达NAT A的时候会被拒绝，因为对NAT A来说只有外出的链接才是允许的。</p>\n<p>在直接链接A失败之后，B可以通过S向A中继一个链接请求，从而从A方向“逆向“地建立起A-B之间的点对点链接。</p>\n<p>现在很多P2P系统都实现了这种技术，但是这种技术有局限性，只有当其中一放客户端有公网IP的时候才能建立起连接。为什么现在很多P2P系统都实现了逆向连接技术，因为我们接下来要讲的UDP打洞技术，主要是依赖这种技术。</p>\n<p><strong>UDP打洞正文开始</strong>：</p>\n<p>现在最多的网路连接情况是双方都是在内网下，都需要通过NAT进行地址转换，所以上面的逆向连接不适用，但是可以利用逆向连接技术进行改造。</p>\n<p>假设客户端A和客户端B的地址都是内网地址，且在不同的NAT后面。A、B上运行的P2P应用程序和服务器S都使用了UDP端口1234，A和B分别初始化了 与Server的UDP通信，地址映射如图所示:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                            Server S</span><br><span class=\"line\">                        18.181.0.31:1234</span><br><span class=\"line\">                               |</span><br><span class=\"line\">                               |</span><br><span class=\"line\">        +----------------------+----------------------+</span><br><span class=\"line\">        |                                             |</span><br><span class=\"line\">      NAT A                                         NAT B</span><br><span class=\"line\">155.99.25.11:62000                            138.76.29.7:31000</span><br><span class=\"line\">        |                                             |</span><br><span class=\"line\">        |                                             |</span><br><span class=\"line\">     Client A                                      Client B</span><br><span class=\"line\">  10.0.0.1:1234                                 10.1.1.3:1234</span><br></pre></td></tr></table></figure>\n<p>现在假设客户端A打算与客户端B直接建立一个UDP通信会话。如果A直接给B的公网地址138.76.29.7:31000发送UDP数据，NAT B将很可能会无视进入的 数据（除非是Full Cone NAT），因为源地址和端口与S不匹配，而最初只与S建立过会话。B往A直接发信息也类似。</p>\n<p>假设A开始给B的公网地址发送UDP数据的同时，给服务器S发送一个中继请求，要求B开始给A的公网地址发送UDP信息。</p>\n<p>A往B的输出信息会导致NAT A打开 一个A的内网地址与与B的外网地址之间的新通讯会话，B往A亦然。一旦新的UDP会话在两个方向都打开之后，客户端A和客户端B就能直接通讯， 而无须再通过引导服务器S了。</p>\n<p>UDP打洞技术有许多有用的性质。一旦一个的P2P链接建立，链接的双方都能反过来作为“引导服务器”来帮助其他中间件后的客户端进行打洞， 极大减少了服务器的负载。应用程序不需要知道中间件具体是什么（如果有的话），因为以上的过程在没有中间件或者有多个中间件的情况下 也一样能建立通信链路。</p>\n<p><strong>还有一些特殊情况</strong>：当通信双方都在同一局域网，也就是两个客户端都在一个内网下呢？是不是可以降低NAT转换，直接在内网上连接呢？此外还有，当一些大型企业，内网中有多级NAT转换呢？这里已不再本文的讨论中了，详细可以看以下参考文章详细了解：</p>\n<blockquote>\n<p>参考文章：<a href=\"https://zhuanlan.zhihu.com/p/26796476\" target=\"_blank\">https://zhuanlan.zhihu.com/p/26796476</a></p>\n</blockquote>\n<p>学到这里，根据上面的原理是可以实现自己的一套程序和通信规则，但很多时候是需要对接第三方的协议，往往这个适配是比较麻烦的。因此就产生了标准化的通用规则（STUN、TURN、ICE），下面的几个章节将逐个介绍这些协议。</p>\n<h2 id=\"1.2-stun协议\">1.2 STUN协议<a title=\"#1.2-stun协议\" href=\"#1.2-stun协议\"></a></h2>\n<p>STUN（<a href=\"http://www.rfc-editor.org/info/rfc3489\" target=\"_blank\">STUN/RFC3489(废弃)</a>，<a href=\"http://www.rfc-editor.org/info/rfc5389\" target=\"_blank\">STUN/RFC5389</a>）是P2P标准化通信规则（协议）之一。</p>\n<h3 id=\"1.2.1-简介\">1.2.1 简介<a title=\"#1.2.1-简介\" href=\"#1.2.1-简介\"></a></h3>\n<p>NAT的会话穿越功能<a href=\"http://en.wikipedia.org/wiki/STUN\" target=\"_blank\">Session Traversal Utilities for NAT (STUN)</a> (缩略语的最后一个字母是NAT的首字母)是一个允许位于NAT后的客户端找出自己的公网地址，判断出路由器阻止直连的限制方法的协议。</p>\n<p>STUN是一个C/S架构的协议，支持两种传输类型。一种是请求/响应（request/respond）类型，由客户端给服务器发送请求，并等待服务器返回响应；另一种是指示类型（indication transaction），由服务器或者客户端 发送指示，另一方不产生响应。对于请求/响应类型，允许客户端将响应和产生响应的请求连接起来； 对于指示类型，通常在debug时使用。我们主要了解请求/响应类型。</p>\n<h3 id=\"1.2.2-通信过程\">1.2.2 通信过程<a title=\"#1.2.2-通信过程\" href=\"#1.2.2-通信过程\"></a></h3>\n<p>客户端通过给公网的STUN服务器发送请求获得自己的公网地址信息，以及是否能够被（穿过路由器）访问。</p>\n<ol>\n<li>客户端A向服务器产生一个Request（STUN叔叔，你能告诉我我的ip是多少吗）</li>\n<li>服务器接收Request，检查报文是否合法，并生成Success响应或Error响应（A小朋友，你的ip是208.141.55.130:3255）</li>\n</ol>\n<p><img src=\"https://mdn.mozillademos.org/files/6115/webrtc-stun.png\" alt=\"客户端A和STUN服务器之间的通信\" class=\"φbs\"></p>\n<h2 id=\"1.3-turn协议\">1.3 TURN协议<a title=\"#1.3-turn协议\" href=\"#1.3-turn协议\"></a></h2>\n<p>TURN（<a href=\"http://www.rfc-editor.org/info/rfc5766\" target=\"_blank\">TURN/RFC5766</a>）是P2P标准化通信规则（协议）之一，是对STUN的补充。</p>\n<h3 id=\"1.3.1-简介\">1.3.1 简介<a title=\"#1.3.1-简介\" href=\"#1.3.1-简介\"></a></h3>\n<p>TURN的全称为<a href=\"http://en.wikipedia.org/wiki/TURN\" target=\"_blank\">Traversal Using Relays around NAT (TURN)</a> ，是STUN/RFC5389的一个拓展，主要添加了Relay功能。前面介绍的STUN协议处理的是市面上大多数的Cone NAT，但还有少量的设备使用的Symmetric NAT。因此传统的打洞方法不适用，为了保证这一部分设备能够建立通信，我们不得不通过中继（Relaying）的方法进行连接，这时就需要公网的服务器作为一个中继， 对来往的数据进行转发。这个转发的协议就被定义为TURN。这种情况会增加服务器负担，所以这是最坏的情况的通信解决方案。</p>\n<p>TURN服务器与客户端之间的连接都是基于UDP的，但是服务器和客户端之间可以通过其他各种连接来传输STUN报文, 比如TCP/UDP/TLS-over-TCP。客户端之间通过中继传输数据时候，如果用了TCP，也会在服务端转换为UDP，因此建议客户端使用 UDP来进行传输。至于为什么要支持TCP，那是因为一部分防火墙会完全阻挡UDP数据，而对于三次握手的TCP数据则不做隔离。</p>\n<h3 id=\"1.3.2-通信过程\">1.3.2 通信过程<a title=\"#1.3.2-通信过程\" href=\"#1.3.2-通信过程\"></a></h3>\n<p>客户端A向STUN服务器发送请求获取自己的公网地址，STUN服务器可以获取到客户端A的地址，但发现客户端A的使用的Symmetric NAT，因此STUN服务器告诉客户端A，我不能帮助你和客户端B建立连接，你们之间可以通过TURN进行连接。因此客户端A和客户端B同时去连接TURN服务器，通过TURN服务器进行中继连接。</p>\n<ol>\n<li>客户端A向STUN服务器产生一个Request（STUN叔叔，你能告诉我我的ip是多少吗）</li>\n<li>STUN服务器响应（A小朋友，你的ip是208.141.55.130:3255，可是你的ip别人不能和你连接哦，你需要去找你TURN大伯，他是专门负责帮你连接）</li>\n<li>客户端A向TURN服务器发起请求（TURN大伯，STUN叔叔叫我来找你）</li>\n<li>TURN服务器响应（A小侄儿，我知道了，但是现在还没有其他小朋友找你哦，你可以在这附近逛一逛，每10分钟要给我报告一下你还在这附近哦，一有其他小朋友来找你我就通知你。）</li>\n</ol>\n<p><img src=\"https://mdn.mozillademos.org/files/6117/webrtc-turn.png\" alt=\"客户端A、B与STUN服务器，TURN之间的通信\" class=\"φbs\"></p>\n<h2 id=\"1.4-ice协议\">1.4 ICE协议<a title=\"#1.4-ice协议\" href=\"#1.4-ice协议\"></a></h2>\n<p>TURN（<a href=\"http://www.rfc-editor.org/info/rfc5245\" target=\"_blank\">ICE/RFC5245</a>）是P2P标准化通信规则（协议）之一，提供了完整的NAT传输解决方案。</p>\n<blockquote>\n<p>STUN、TURN都是工具类协议，只提供穿透NAT的功能。且TURN本身就是被设计为ICE/RFC5245的一部分</p>\n</blockquote>\n<h3 id=\"1.4.1-简介\">1.4.1 简介<a title=\"#1.4.1-简介\" href=\"#1.4.1-简介\"></a></h3>\n<p>ICE的全称为<a href=\"http://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment\" target=\"_blank\">Interactive Connectivity Establishment (ICE)</a>，即交互式连接建立。在实际的网络当中，有很多原因能导致简单的从A端到B端直连不能如愿完成。这需要绕过阻止建立连接的防火墙，给你的设备分配一个唯一可见的地址（通常情况下我们的大部分设备没有一个固定的公网地址），如果路由器不允许主机直连，还得通过一台服务器转发数据。ICE通过使用STUN、TURN、NAT、SDP技术完成上述工作。(引用自：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols\">https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols</a>)</p>\n<p>ICE是一个用于在<a href=\"http://www.rfc-editor.org/info/rfc3264\" target=\"_blank\">Offer/Answer</a>模式下的NAT传输协议，主要用于UDP下多媒体会话的建立，其使用了STUN协议以及TURN 协议，同时也能被其他实现了Offer/Answer模型的的其他程序所使用，比如<a href=\"http://www.rfc-editor.org/info/rfc3261\" target=\"_blank\">SIP</a>(Session Initiation Protocol)。</p>\n<blockquote>\n<p>网络编程的ICE（Internate Communications Engine）：是一种用于分布式程序设计的网络通信中间件，本文指并非此ICE</p>\n</blockquote>\n<blockquote>\n<p>交互式连接ICE（Interactive Connectivity Establishment）：是一个允许你的浏览器和对端浏览器建立连接的协议框架。</p>\n</blockquote>\n<h3 id=\"1.4.2-sdp会话描述\">1.4.2 SDP会话描述<a title=\"#1.4.2-sdp会话描述\" href=\"#1.4.2-sdp会话描述\"></a></h3>\n<p>ICE信息的描述格式通常采用标准的<a href=\"http://www.rfc-editor.org/info/rfc4566\" target=\"_blank\">SDP</a>，其全称为<a href=\"http://en.wikipedia.org/wiki/Session_Description_Protocol\" target=\"_blank\">Session Description Protocol (SDP)</a> ，即会话描述协议。SDP不是一个真正的协议，而是一种数据格式，用于描述在设备之间共享媒体的连接。可以被其他传输协议用来交换必要的信息，如SIP和RTSP等。</p>\n<p><strong>SDP格式</strong>：</p>\n<p>SDP由一行或多行UTF-8文本组成，每行以一个字符的类型开头，后跟等号（“ =”），然后是包含值或描述的结构化文本，其格式取决于类型。</p>\n<p>SDP会话描述包含了多行如下类型的文本:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;=&lt;value&gt;</span><br></pre></td></tr></table></figure>\n<p>以给定字母开头的文本行通常称为“字母行”。例如，提供媒体描述的行的类型为“ m”，因此这些行称为“ m行”。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m=audio 49170 RTP/AVP 0</span><br></pre></td></tr></table></figure>\n<p>&lt;type&gt;是大小写敏感的，其中一些行是必须要有的，有些是可选的，所有元素都必须以固定顺序给出。如下所示，其中可选的元素标记为* ：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">会话描述:</span><br><span class=\"line\">     v=  (protocol version)</span><br><span class=\"line\">     o=  (originator and session identifier)</span><br><span class=\"line\">     s=  (session name)</span><br><span class=\"line\">     i=* (session information)</span><br><span class=\"line\">     u=* (URI of description)</span><br><span class=\"line\">     e=* (email address)</span><br><span class=\"line\">     p=* (phone number)</span><br><span class=\"line\">     c=* (connection information -- not required if included in</span><br><span class=\"line\">          all media)</span><br><span class=\"line\">     b=* (zero or more bandwidth information lines)</span><br><span class=\"line\">     One or more time descriptions (&quot;t=&quot; and &quot;r=&quot; lines; see below)</span><br><span class=\"line\">     z=* (time zone adjustments)</span><br><span class=\"line\">     k=* (encryption key)</span><br><span class=\"line\">     a=* (zero or more session attribute lines)</span><br><span class=\"line\">     Zero or more media descriptions</span><br><span class=\"line\"></span><br><span class=\"line\">时间信息描述:</span><br><span class=\"line\">     t=  (time the session is active)</span><br><span class=\"line\">     r=* (zero or more repeat times)</span><br><span class=\"line\"></span><br><span class=\"line\">多媒体信息描述(如果有的话):</span><br><span class=\"line\">     m=  (media name and transport address)</span><br><span class=\"line\">     i=* (media title)</span><br><span class=\"line\">     c=* (connection information -- optional if included at</span><br><span class=\"line\">          session level)</span><br><span class=\"line\">     b=* (zero or more bandwidth information lines)</span><br><span class=\"line\">     k=* (encryption key)</span><br><span class=\"line\">     a=* (zero or more media attribute lines)</span><br></pre></td></tr></table></figure>\n<p>所有元素的type都为小写，并且不提供拓展.但是我们可以用a(attribute)字段来提供额外的信息。一个SDP描述的例子如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v=0</span><br><span class=\"line\">o=jdoe 2890844526 2890842807 IN IP4 10.47.16.5</span><br><span class=\"line\">s=SDP Seminar</span><br><span class=\"line\">i=A Seminar on the session description protocol</span><br><span class=\"line\">u=http://www.example.com/seminars/sdp.pdf</span><br><span class=\"line\">e=j.doe@example.com (Jane Doe)</span><br><span class=\"line\">c=IN IP4 224.2.17.12/127</span><br><span class=\"line\">t=2873397496 2873404696</span><br><span class=\"line\">a=recvonly</span><br><span class=\"line\">m=audio 49170 RTP/AVP 0</span><br><span class=\"line\">m=video 51372 RTP/AVP 99</span><br><span class=\"line\">a=rtpmap:99 h263-1998/90000</span><br></pre></td></tr></table></figure>\n<p>具体字段的type/value描述和格式可以参考<a href=\"http://www.rfc-editor.org/info/rfc4566\" target=\"_blank\">RFC4566</a>。</p>\n<h3 id=\"1.4.3-offer/answer模型\">1.4.3 Offer/Answer模型<a title=\"#1.4.3-offer/answer模型\" href=\"#1.4.3-offer/answer模型\"></a></h3>\n<p>SDP用来描述多播主干网络的会话信息，但是并没有具体的交互操作细节是如何实现的，因此<a href=\"https://link.zhihu.com/?target=http%3A//www.rfc-editor.org/info/rfc3264\" target=\"_blank\">RFC3264</a> 定义了一种基于SDP的Offer/Answer模型。</p>\n<p>在该模型中，会话参与者的其中一方生成一个SDP报文构成offer， 其中包含了一组offer希望使用的多媒体流和编解码方法，以及offer用来接收改数据的IP地址和端口信息。</p>\n<p>offer传输到会话的另一端(称为answer)，由这一端生成一个answer，即用来响应对应offer的SDP报文。</p>\n<p>answer中包含不同offer对应的多媒体流，并指明该流是否可以接受。</p>\n<p><img src=\"images/20210728/2017-signaling-state-diagram.png\" alt=\"image\" class=\"φbs\"></p>\n<h3 id=\"1.4.4-ice工作流程\">1.4.4 ICE工作流程<a title=\"#1.4.4-ice工作流程\" href=\"#1.4.4-ice工作流程\"></a></h3>\n<p>一个典型的ICE工作环境如下，有两个端点A和B，都运行在各自的NAT之后(他们自己也许并不知道)，NAT的类型和性质也是未知的。L和R通过交换SDP信息在彼此之间建立多媒体会话，通常交换通过一个SIP服务器完成：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                 +-----------+</span><br><span class=\"line\">                 |    SIP    |</span><br><span class=\"line\">+-------+        |    Srvr   |         +-------+</span><br><span class=\"line\">| STUN  |        |           |         | STUN  |</span><br><span class=\"line\">| Srvr  |        +-----------+         | Srvr  |</span><br><span class=\"line\">|       |        /           \\         |       |</span><br><span class=\"line\">+-------+       /             \\        +-------+</span><br><span class=\"line\">               /&lt;- Signaling -&gt;\\</span><br><span class=\"line\">              /                 \\</span><br><span class=\"line\">         +--------+          +--------+</span><br><span class=\"line\">         |  NAT   |          |  NAT   |</span><br><span class=\"line\">         +--------+          +--------+</span><br><span class=\"line\">           /                       \\</span><br><span class=\"line\">          /                         \\</span><br><span class=\"line\">         /                           \\</span><br><span class=\"line\">     +-------+                    +-------+</span><br><span class=\"line\">     | Agent |                    | Agent |</span><br><span class=\"line\">     |   A   |                    |   B   |</span><br><span class=\"line\">     |       |                    |       |</span><br><span class=\"line\">     +-------+                    +-------+</span><br></pre></td></tr></table></figure>\n<p>ICE的基本思路是，每个终端都有一系列传输地址(包括传输协议，IP地址和端口)的候选，可以用来和其他端点进行通信。其中可能包括：</p>\n<ul>\n<li>直接和网络接口联系的传输地址(host address)</li>\n<li>经过NAT转换的传输地址,即反射地址(server reflective address)</li>\n<li>TURN服务器分配的中继地址(relay address)</li>\n</ul>\n<blockquote>\n<p>通过之前的学习，我们可以了解到每个终端的情况是比较复杂的（有的终端可能同时连着wifi和网线，有多个内网地址），所有每个终端有多种可以连接的方案。</p>\n</blockquote>\n<p>获取到这一系列传输地址后，会以一定优先级将地址排序。按照优先级和其他终端的传输地址进行组合检测连接可用性（连接性检查：Connectivity Checks）。</p>\n<p>两端连接性检查，是一个4次握手过程:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A                        B</span><br><span class=\"line\">-                        -</span><br><span class=\"line\">STUN request -&gt;                  \\  A&#x27;s</span><br><span class=\"line\">          &lt;- STUN response       /  check</span><br><span class=\"line\"></span><br><span class=\"line\">           &lt;- STUN request       \\  B&#x27;s</span><br><span class=\"line\">STUN response -&gt;                 /  check</span><br></pre></td></tr></table></figure>\n<p><strong>连接性检查详细过程</strong>：</p>\n<ol>\n<li>\n<p>为中继候选地址生成许可(Permissions)；</p>\n</li>\n<li>\n<p>从本地候选往远端候选发送Binding Request：</p>\n<p>在Binding请求中通常需要包含一些特殊的属性，以在ICE进行连接性检查的时候提供必要信息：</p>\n<ul>\n<li>PRIORITY 和 USE-CANDIDATE：优先级和候选</li>\n<li>ICE-CONTROLLED和ICE-CONTROLLING：标识本端是受控方还是主控方（offer生成方）。</li>\n<li>生成Credential：STUN短期身份验证</li>\n</ul>\n</li>\n<li>\n<p>处理Response：</p>\n<p>当收到Binding Response时，终端会将其与Binding Request相联系，通常生成事务ID。随后将会将此事务ID与候选地址对进行绑定。</p>\n<ul>\n<li>成功响应：要同时满足三个条件（STUN传输产生一个Success Response；response的源IP和端口等于Binding Request的目的IP和端口；response的目的IP和端口等于Binding Request的源IP和端口）</li>\n<li>失败响应：487错误，并将检测地址状态设置为Waiting</li>\n</ul>\n</li>\n</ol>\n<p>以上仅对协议作了简单的介绍，具体服务器程序实现可参考：<a href=\"https://github.com/evilpan/TurnServer\">https://github.com/evilpan/TurnServer</a></p>\n<h2 id=\"1.5-经典webrtc连接建立流程\">1.5 经典WebRTC连接建立流程<a title=\"#1.5-经典webrtc连接建立流程\" href=\"#1.5-经典webrtc连接建立流程\"></a></h2>\n<p>通过前面的协议了解学习，相信大家已经对WebRTC的底层连接流程有了一个模糊的意思，这里有张图展现了具体的连接流程。</p>\n<p><img src=\"images/20210728/20200618134458727.png\" alt=\"image\" class=\"φbs\"></p>\n<blockquote>\n<p>引用自：<a href=\"https://aggresss.blog.csdn.net/article/details/106832965\">https://aggresss.blog.csdn.net/article/details/106832965</a></p>\n</blockquote>\n<h1 id=\"二、服务器搭建\">二、服务器搭建<a title=\"#二、服务器搭建\" href=\"#二、服务器搭建\"></a></h1>\n<h2 id=\"2.1-stun/turn服务器【可跳过】\">2.1 STUN/TURN服务器【可跳过】<a title=\"#2.1-stun/turn服务器【可跳过】\" href=\"#2.1-stun/turn服务器【可跳过】\"></a></h2>\n<blockquote>\n<p>网上有公用的stun服务器，本节可直接跳过。</p>\n</blockquote>\n<p>STUN服务器已有现成项目：<a href=\"https://github.com/coturn/coturn\">https://github.com/coturn/coturn</a></p>\n<p>以下是在ubuntu上的安装和配置：</p>\n<h3 id=\"2.1.1-安装coturn\">2.1.1 安装coturn<a title=\"#2.1.1-安装coturn\" href=\"#2.1.1-安装coturn\"></a></h3>\n<p>可以克隆github上的源码编译安装，在ubuntu里有直接的安装包</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get -y update</span><br><span class=\"line\">apt-get -y install coturn</span><br></pre></td></tr></table></figure>\n<p>安装完毕后，先关闭coturn服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop coturn</span><br></pre></td></tr></table></figure>\n<h3 id=\"2.1.2-配置coturn\">2.1.2 配置coturn<a title=\"#2.1.2-配置coturn\" href=\"#2.1.2-配置coturn\"></a></h3>\n<p><strong>(1) 允许turnserver</strong></p>\n<p>首先需要允许turnserver，打开<code>/etc/default/coturn</code>文件，将注释去掉：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/default/coturn</span><br></pre></td></tr></table></figure>\n<p>取消注释后如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TURNSERVER_ENABLED=1</span><br></pre></td></tr></table></figure>\n<p><strong>(2) 获取ip和SSL</strong></p>\n<p>首选需要获取一下自己的内网ip以及网卡:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n<p>生成SSL证书:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install openssl</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -x509 -newkey rsa:2048 -keyout /etc/turn_server_pkey.pem -out /etc/turn_server_cert.pem -days 99999 -nodes </span><br></pre></td></tr></table></figure>\n<p><strong>(3) 配置</strong></p>\n<p>接下来正式改配置文件<code>/etc/turnserver.conf</code>，改之前先将原文件备份一个：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> /etc/turnserver.conf /etc/turnserver.conf.bat</span><br></pre></td></tr></table></figure>\n<p>然后新建配置文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/turnserver.conf</span><br></pre></td></tr></table></figure>\n<p>然后复制以下配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server-name=turn.webrtc.zzboy.cn</span><br><span class=\"line\">realm=turn.webrtc.zzboy.cn</span><br><span class=\"line\"></span><br><span class=\"line\">fingerprint</span><br><span class=\"line\"></span><br><span class=\"line\">relay-device=eth0   <span class=\"comment\">#与前ifconfig查到的网卡名称一致</span></span><br><span class=\"line\"></span><br><span class=\"line\">listening-ip=192.168.0.186    <span class=\"comment\">#内网IP</span></span><br><span class=\"line\">listening-port=3478</span><br><span class=\"line\">tls-listening-port=5349</span><br><span class=\"line\">relay-ip=192.168.0.186</span><br><span class=\"line\">external-ip=121.36.105.109    <span class=\"comment\">#公网IP</span></span><br><span class=\"line\"></span><br><span class=\"line\">relay-threads=50</span><br><span class=\"line\">lt-cred-mech</span><br><span class=\"line\">no-cli</span><br><span class=\"line\">verbose</span><br><span class=\"line\"></span><br><span class=\"line\">cert=/etc/turn_server_cert.pem</span><br><span class=\"line\">pkey=/etc/turn_server_pkey.pem</span><br><span class=\"line\"><span class=\"comment\">#pidfile=/var/run/turnserver.pid</span></span><br><span class=\"line\">min-port=49152</span><br><span class=\"line\">max-port=65535</span><br><span class=\"line\">user=jun:123456    <span class=\"comment\">#用户名密码，创建IceServer时用</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2.1.3-测试\">2.1.3 测试<a title=\"#2.1.3-测试\" href=\"#2.1.3-测试\"></a></h3>\n<p>工具：<a href=\"https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/\" target=\"_blank\">Trickle ICE</a></p>\n<p>点击打开上面的工具</p>\n<h2 id=\"2.2-nodejs构建信令服务器(signal-server)\">2.2 Nodejs构建信令服务器(Signal Server)<a title=\"#2.2-nodejs构建信令服务器(signal-server)\" href=\"#2.2-nodejs构建信令服务器(signal-server)\"></a></h2>\n<p>信令服务器我直接使用的一个开源项目：<a href=\"https://github.com/qdgx/WebRtcRoomServer\">https://github.com/qdgx/WebRtcRoomServer</a></p>\n<p>其实信令服务器已经涉及到实战了，这里就不讲具体实现，这里只先部署。</p>\n<p>单纯地看，信令服务器其实可以算作是一个后端项目，我们这里部署也只是对该项目进行服务器部署。这里我使用的这个开源项目是使用node.js开发的，因此部署步骤和node.js部署步骤相差无异。</p>\n<p>以下是我在ubuntu上的安装和配置：</p>\n<h3 id=\"2.2.1-安装node环境\">2.2.1 安装node环境<a title=\"#2.2.1-安装node环境\" href=\"#2.2.1-安装node环境\"></a></h3>\n<p><strong>(1) 更新环境，安装curl、git</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y curl git</span><br></pre></td></tr></table></figure>\n<p><strong>(2) 安装node.js</strong></p>\n<p>先去官网https://nodejs.org/，查看最新稳定长期支持版，发现最新稳定版是14.15.3 LTS，node.js的每个大版本号都有相对应的源，比如这里的14.15.3版本的源是 <a href=\"https://deb.nodesource.com/setup_14.x\">https://deb.nodesource.com/setup_14.x</a></p>\n<p>所以在终端执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br></pre></td></tr></table></figure>\n<p>然后安装node.js</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install nodejs</span><br></pre></td></tr></table></figure>\n<p><code>node -v</code>  和 <code>npm -v</code> 查看node和npm是否安装成功</p>\n<h3 id=\"2.2.2-克隆项目，安装依赖\">2.2.2 克隆项目，安装依赖<a title=\"#2.2.2-克隆项目，安装依赖\" href=\"#2.2.2-克隆项目，安装依赖\"></a></h3>\n<p>进入用户目录，克隆项目：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/ &amp;&amp; git clone https://github.com/qdgx/WebRtcRoomServer.git</span><br></pre></td></tr></table></figure>\n<p>安装依赖：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/WebRtcRoomServer</span><br><span class=\"line\">npm i</span><br></pre></td></tr></table></figure>\n<p>启动服务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node app.js</span><br></pre></td></tr></table></figure>\n<p>在浏览器打开以下地址，测试一下是否访问：</p>\n<p><strong><a href=\"https://xn--6qq22f55d4wakcs4l640b8l8b:8443\">https://你服务器外网地址:8443</a></strong></p>\n<p>只要浏览器提示该页面存在风险，即表示项目已生效，点击高级，选择接受风险继续访问即可。（为什么提示风险：因为这个项目的证书是自签名证书）</p>\n<p><img src=\"images/20210728/signal-server-success.png\" alt=\"image\" class=\"φbs\"></p>\n<p>如果无法访问，请检查服务器安全组是否打开了TCP和UDP协议的8443端口，有些服务器开端口需要在服务器上那配置安全组，比如阿里云ECS和华为云。</p>\n<h3 id=\"2.2.3-pm2管理node服务\">2.2.3 pm2管理node服务<a title=\"#2.2.3-pm2管理node服务\" href=\"#2.2.3-pm2管理node服务\"></a></h3>\n<p>直接用<code>node app.js</code>运行项目，在关闭终端后，node项目也会随之被关闭，因此需要使用额外的工具来保持node服务一直开启。</p>\n<p>安装pm2：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pm2@latest -g</span><br></pre></td></tr></table></figure>\n<p>启动服务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.js --name signal-server --watch</span><br></pre></td></tr></table></figure>\n<ul>\n<li>name：给应用命名，可以不管</li>\n<li>watch：相当于热更新，应用文件更新后会重启应用</li>\n</ul>\n<p>有关pm2的使用，可以百度查询一下，也可以参考本人之前写的一篇文章：<a href=\"https://www.jschef.com/Learning/f360ef90efef\">https://www.jschef.com/Learning/f360ef90efef</a></p>\n<h1 id=\"三、api学习\">三、API学习<a title=\"#三、api学习\" href=\"#三、api学习\"></a></h1>\n<p>以下主要介绍下一章节实战开中需要到的常用接口，完整的接口学习可查看对应官方文档。</p>\n<h2 id=\"3.1-socket.io\">3.1 <a href=\"http://socket.io\">socket.io</a><a title=\"#3.1-socket.io\" href=\"#3.1-socket.io\"></a></h2>\n<blockquote>\n<p>官方文档：<a href=\"https://socket.io/docs/v3/\">https://socket.io/docs/v3/</a></p>\n</blockquote>\n<blockquote>\n<p>中文w3chool：<a href=\"https://www.w3cschool.cn/socket/\">https://www.w3cschool.cn/socket/</a></p>\n</blockquote>\n<p><code>Socket</code>是一种<strong>全双工通信</strong>,当客户端和服务端建立起连接后，如果不主动断开，双方可以一直互相发送消息，适合于双方频繁通信的场景，也是支持服务端主动推送的一种通信方式。<code>WebSocket</code>是<code>Html5</code>推出的前端可以直接使用的API，不过目前项目中用的还是socket.io比较多。socket.io在浏览器环境下封装了WebSocket, 可以给开发者带来更好的体验，在功能上也更完善。</p>\n<p>socket.io主要使用两个方法：</p>\n<ul>\n<li>\n<p><code>emit(description: string, data: any</code>：监听事件；<code>description</code>是标识；<code>data</code>是需要发送的数据。</p>\n</li>\n<li>\n<p><code>on(description: string, callback: function</code>：监听事件；<code>description</code>表示监听的标识；<code>callback</code>是监到事件后处理方法，参数是<code>emit</code>发送的数据。</p>\n</li>\n</ul>\n<p>通俗说，一个就是发送，一个是接收。发送方法需要指定谁(<code>description</code>)来接收；接收方法找到对应<code>description</code>接收。</p>\n<h3 id=\"3.1.1-服务器端\">3.1.1 服务器端<a title=\"#3.1.1-服务器端\" href=\"#3.1.1-服务器端\"></a></h3>\n<p><strong>(1) 安装</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install socket.io</span><br></pre></td></tr></table></figure>\n<p><strong>(2) 初始化</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> httpServer = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>).<span class=\"title function_\">createServer</span>(); <span class=\"comment\">// 创建http服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用socket.io监听http服务</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> socketIO = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;socket.io&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> io = socketIO.<span class=\"title function_\">listen</span>(httpServer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以使用如下方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;socket.io&quot;</span>)(httpServer, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// options配置项</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>配置项：是初始配置socket.io的一些参数，我们使用默认的接口，如需要配置，可以看文档了解具体配置项：<a href=\"https://socket.io/docs/v3/server-api/#new-Server-httpServer-options\">https://socket.io/docs/v3/server-api/#new-Server-httpServer-options</a></p>\n<p>根据WebRTC安全策略，我们需要使用https，因此，比较<strong>完整的初始化代码</strong>为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;https&#x27;</span>).<span class=\"title function_\">createServer</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">key</span>: fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&#x27;/tmp/key.pem&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">cert</span>: fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&#x27;/tmp/cert.pem&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123; <span class=\"comment\">/* ... */</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;socket.io&#x27;</span>)(server, options);</span><br><span class=\"line\"></span><br><span class=\"line\">io.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;connection&#x27;</span>, <span class=\"function\"><span class=\"params\">socket</span> =&gt;</span> &#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>(3) 方法</strong></p>\n<p><strong>io.on(‘connection’, fn)</strong> ：监听客户端连接</p>\n<p>从上面初始化代码不难看出，socket.io第一个方法应该<code>io.on('connection', fn)</code>。</p>\n<p>connection是保留<code>description</code>，当有客户端连接上当前服务器时，就会触发。</p>\n<p>我们需要在其回调中处理相关业务：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">io.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;connection&#x27;</span>, <span class=\"function\"><span class=\"params\">socket</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 监听断开连接</span></span><br><span class=\"line\">  socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;disconnect&#x27;</span>, <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason)) <span class=\"comment\">// socket断开监听，disconnect也是保留字段</span></span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"comment\">// 其他业务监听</span></span><br><span class=\"line\">  socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;join&#x27;</span>, <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`欢迎<span class=\"subst\">$&#123;data.name&#125;</span>进入直播间`</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>socket.on(‘disconnect’, fn)</strong> ：监听客户端断开连接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;disconnect&#x27;</span>, <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason); <span class=\"comment\">// 断开原因有很多，可能是用户主动断开，也可能是浏览器直接关闭等</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>socket.emit() : 发送信息</p>\n<h3 id=\"3.1.2-客户端\">3.1.2 客户端<a title=\"#3.1.2-客户端\" href=\"#3.1.2-客户端\"></a></h3>\n<h2 id=\"3.2-音视频相关api\">3.2 音视频相关API<a title=\"#3.2-音视频相关api\" href=\"#3.2-音视频相关api\"></a></h2>\n<h3 id=\"3.2.1-navigator.mediadevices\">3.2.1 navigator.mediaDevices<a title=\"#3.2.1-navigator.mediadevices\" href=\"#3.2.1-navigator.mediadevices\"></a></h3>\n<p>浏览器API，可以通过该浏览器API获取用户媒体设备，通常只会用到一个方法：<code>getUserMedia(options)</code>，调用该方法时，浏览器会弹出请求音频或视频的权限，用户同意授权过后，即可获取到音视频流。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.<span class=\"property\">mediaDevices</span>.<span class=\"title function_\">getUserMedia</span>(options)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">stream</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* use the stream */</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* handle the error */</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>需要注意：<code>navigator</code>的<code>mediaDevices</code>属性需要在https环境下才会有，这是浏览器的限制。</p>\n<p><strong>options: 配置项</strong></p>\n<p>一般可直接设置为：<code>&#123; audio: true, video: true &#125;</code>，表示为获取音频和视频。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.<span class=\"property\">mediaDevices</span>.<span class=\"title function_\">getUserMedia</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">audio</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">video</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">stream</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* use the stream */</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* handle the error */</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>视频方面，也可以准确定义视频画面的宽高：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.<span class=\"property\">mediaDevices</span>.<span class=\"title function_\">getUserMedia</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">audio</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">video</span>: &#123; <span class=\"attr\">width</span>: <span class=\"number\">1280</span>, <span class=\"attr\">height</span>: <span class=\"number\">720</span> &#125; <span class=\"comment\">// 当定义宽高是，视频算是true，请求视频权限</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">stream</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* use the stream */</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* handle the error */</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>其他更多配置可参考：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\">https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia</a></p>\n<h3 id=\"3.2.2-video\">3.2.2 video<a title=\"#3.2.2-video\" href=\"#3.2.2-video\"></a></h3>\n<p><strong>(1) video标签</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;path/to/movie.mp4&quot;</span> <span class=\"attr\">controls</span>=<span class=\"string\">&quot;controls&quot;</span>&gt;</span></span><br><span class=\"line\">您的浏览器不支持 video 标签。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>属性：</p>\n<ul>\n<li>autoplay: 如果出现该属性，则视频在就绪后马上播放</li>\n<li>controls：如果出现该属性，则向用户显示控件，比如播放按钮</li>\n<li>loop：如果出现该属性，则当媒介文件完成播放后再次开始播放</li>\n<li>muted：规定视频的音频输出应该被静音</li>\n<li>poster：规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像</li>\n<li>preload：如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性</li>\n<li>src：要播放的视频的 URL</li>\n<li>width：设置视频播放器的宽度，单位px</li>\n<li>height：设置视频播放器的高度，单位px</li>\n</ul>\n<p>我们在进行音视频通话时，通常</p>\n<p>**本地视频（我方视频）**应如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;local&quot;</span> <span class=\"attr\">muted</span> <span class=\"attr\">autoplay</span>&gt;</span></span><br><span class=\"line\">您的浏览器不支持 video 标签。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>本地视频静音播放，因为我们无需我们自己发出的声音，因为我们到时候视频资源是从设备直接实时获取视频流，因此无需设置src，并且设置<code>autoplay</code>，可以让我们获取到视频流直接播放。</p>\n<p>**远程视频（对方视频）**应如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;remote&quot;</span> <span class=\"attr\">poster</span>=<span class=\"string\">&quot;xxx&quot;</span> <span class=\"attr\">autoplay</span>&gt;</span></span><br><span class=\"line\">您的浏览器不支持 video 标签。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>远程视频同样设置<code>autoplay</code>属性，让接收到的视频流直接播放。另外可设置一个<code>poster</code>属性，可以在呼叫过程中或者被呼叫时，让页面显示呼叫中或者是显示对方头像肖像等，不然页面全黑会显得很尴尬。</p>\n<p><strong>(2) video对象</strong></p>\n<p>使用音视频通话，我们控制音视频的播放基本通过<code>js</code>实现的，就连前面介绍的<code>video标签</code>一般都是通过<code>js</code>创建。<code>video</code>对象有很多属性，我这里只简单介绍部分属性，能基本满足WebRTC音视频通话。</p>\n<p>我们要实现音视频实时通讯，传递的数据是音视频流，音视频流怎么让<code>video</code>播放出来呢？看看下面代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 视频流绑定到video节点展示</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">dom</span>&#125; video video节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">obj</span>&#125; stream 视频流</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">pushStreamToVideo</span> = (<span class=\"params\">video, stream</span>) =&gt; &#123;</span><br><span class=\"line\">  video.<span class=\"property\">srcObject</span> = stream;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取video节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> domLocalVideo = $(<span class=\"string\">&#x27;#local&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用摄像头</span></span><br><span class=\"line\">navigator.<span class=\"property\">mediaDevices</span>.<span class=\"title function_\">getUserMedia</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">audio</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">video</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">stream</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">pushStreamToVideo</span>(domLocalVideo[<span class=\"number\">0</span>], stream); <span class=\"comment\">// 实时显示</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">`getUserMedia() error: <span class=\"subst\">$&#123;err.name&#125;</span>`</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>不难看出，<code>video</code>对象有个<code>srcObject</code>的属性，初始时该属性值是<code>null</code>，将我们获取到音视频流直接赋值给该属性，我们的<code>video</code>标签就可以实时播放了。上面这个例子是调用本地摄像头并展示到一个id=local的<code>video</code>标签上，需要在https上就可以正常运行了。</p>\n<p><strong>我们如何关闭视频呢？</strong></p>\n<p>方法一：简单粗暴，关闭页面或者关闭浏览器。（你会让用户这么干么？）</p>\n<p>方法二：使用<code>MediaStream.getTracks()</code>，获取到所有媒体流轨道，每条轨道调用一个方法<code>stop()</code>，就可以关闭当前流，摄像头也会停止录制。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 关闭摄像头</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">dom</span>&#125; video video节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">closeCamera</span> = video =&gt; &#123;</span><br><span class=\"line\">  video.<span class=\"property\">srcObject</span>.<span class=\"title function_\">getTracks</span>()[<span class=\"number\">0</span>].<span class=\"title function_\">stop</span>(); <span class=\"comment\">// audio</span></span><br><span class=\"line\">  video.<span class=\"property\">srcObject</span>.<span class=\"title function_\">getTracks</span>()[<span class=\"number\">1</span>].<span class=\"title function_\">stop</span>(); <span class=\"comment\">// video</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>音频是第一条轨道，视频是第二条轨道，两个同时关闭即可。</p>\n<h2 id=\"3.3-webrtc\">3.3 WebRTC<a title=\"#3.3-webrtc\" href=\"#3.3-webrtc\"></a></h2>\n<blockquote>\n<p>官方文档（不推荐）：<a href=\"https://www.w3.org/TR/webrtc/#peer-to-peer-connections\">https://www.w3.org/TR/webrtc/#peer-to-peer-connections</a></p>\n</blockquote>\n<blockquote>\n<p>官方文档中文翻译（不推荐）：<a href=\"https://github.com/RTC-Developer/WebRTC-Documentation-in-Chinese/tree/master/resource\">https://github.com/RTC-Developer/WebRTC-Documentation-in-Chinese/tree/master/resource</a></p>\n</blockquote>\n<blockquote>\n<p>MDN Web Docs（推荐）：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API\">https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API</a></p>\n</blockquote>\n<h3 id=\"3.3.1-rtcpeerconnection\">3.3.1 RTCPeerConnection<a title=\"#3.3.1-rtcpeerconnection\" href=\"#3.3.1-rtcpeerconnection\"></a></h3>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/\">https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/</a></p>\n</blockquote>\n<p><code>RTCPeerConnection</code>是浏览器之间点对点连接的核心API，用于处理对等体之间流数据的稳定和有效通信，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pc = <span class=\"keyword\">new</span> <span class=\"title class_\">RTCPeerConnection</span>(serverConfig);</span><br></pre></td></tr></table></figure>\n<p>serverConfig包含iceServers参数，它包含有关STUN和TURN服务器相关信息数组，在查找ICE的时候候选使用。可以在网上找一些公共的STUN服务器，也可以使用前面章节我们自己通过coturn搭建的STUN服务器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> serverConfig = &#123;</span><br><span class=\"line\">  <span class=\"attr\">iceServers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">urls</span>: <span class=\"string\">&#x27;stun:stun.xten.com&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">urls</span>: <span class=\"string\">&#x27;stun:你的服务器ip:3478&#x27;</span>, <span class=\"comment\">// 见2.1服务器搭建</span></span><br><span class=\"line\">      <span class=\"attr\">username</span>: <span class=\"string\">&#x27;用户名&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">credential</span>: <span class=\"string\">&#x27;密码&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>(1) onicecandidate = eventHandler</strong></p>\n<p>作用：监听RTCPeerConnection实例上发生icecandidate事件，该函数会返回ICE协商结果，我们需要将结果发送给信令服务器，交由信令服务器转发给对方。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pc.<span class=\"property\">onicecandidate</span> = <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">candidate</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">sendCandidateToRemotePeer</span>(event.<span class=\"property\">candidate</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* there are no more candidates coming during this negotiation */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>**(2) ontrack = eventHandler **</p>\n<p>作用：监听RTCPeerConnection实例上接收到远程的数据流，该函数可获取到对端的媒体流。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pc.<span class=\"property\">ontrack</span> = <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;received_video&quot;</span>).<span class=\"property\">srcObject</span> = event.<span class=\"property\">streams</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>(3) addTrack(track, stream…)</strong></p>\n<p>作用：设置轨道，该轨道将会在连同后传输到对端。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">openCall</span>(<span class=\"params\">pc</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> gumStream = <span class=\"keyword\">await</span> navigator.<span class=\"property\">mediaDevices</span>.<span class=\"title function_\">getUserMedia</span>(&#123;<span class=\"attr\">video</span>: <span class=\"literal\">true</span>, <span class=\"attr\">audio</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> track <span class=\"keyword\">of</span> gumStream.<span class=\"title function_\">getTracks</span>()) &#123;</span><br><span class=\"line\">    pc.<span class=\"title function_\">addTrack</span>(track);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MDN不建议使用addStream()</p>\n<p><strong>(3) removeTrack(sender)</strong></p>\n<p>作用：删除轨道，删除已添加的轨道，用于挂断的时候</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pc, sender;</span><br><span class=\"line\">navigator.<span class=\"title function_\">getUserMedia</span>(&#123;<span class=\"attr\">video</span>: <span class=\"literal\">true</span>&#125;, <span class=\"keyword\">function</span>(<span class=\"params\">stream</span>) &#123;</span><br><span class=\"line\">  pc = <span class=\"keyword\">new</span> <span class=\"title class_\">RTCPeerConnection</span>();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> track = stream.<span class=\"title function_\">getVideoTracks</span>()[<span class=\"number\">0</span>];</span><br><span class=\"line\">  sender = pc.<span class=\"title function_\">addTrack</span>(track, stream);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;closeButton&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  pc.<span class=\"title function_\">removeTrack</span>(sender);</span><br><span class=\"line\">  pc.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>不建议的：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onremovestream\" target=\"_blank\">onremovestream</a></p>\n<p><strong>(5) setLocalDescription()/setRemoteDescription()</strong></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription\" target=\"_blank\">setLocalDescription(sessionDescription)</a>：</p>\n<p>设置本地offer，将自己的描述信息加入到<code>PeerConnection</code>中，参数类型：<code>RTCSessionDescription</code>（见下一小节 3.2.2 RTCSessionDescription）</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription\" target=\"_blank\">setRemoteDescription(sessionDescription)</a>：</p>\n<p>设置远端的<code>answer</code>，将对方的描述信息加入到<code>PeerConnection</code>中，参数类型：<code>RTCSessionDescription</code>（见下一小节 3.2.2 RTCSessionDescription）</p>\n<p><img src=\"images/20210728/2017-signaling-state-diagram.png\" alt=\"image\" class=\"φbs\"></p>\n<p>通俗说：<code>Alice</code>为了和<code>Bob</code>建立合作关系(连接)，<code>Alice</code>我把拟好了一份合同，并签字了，我这里先保留扫描版，纸质合同通过快递(SDP)给你了，你通过快递(SDP)拿到合同后，先签字确认，这时候纸质合同上都有我们双方的签名了，但我这边还没有你的签名。你保存一下扫描版，然后通过快递把纸质再给我发回来，我拿到快递后，我也保存一下扫描版。这样，你我双放都有双方签名的扫描版合同。合同开始生效！</p>\n<p><strong>(6) createOffer()/createAnswer()</strong></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\" target=\"_blank\">createOffer([options])</a>：</p>\n<p>创建一个<code>offer</code>，表示我方的请求。通常在WebRTC通信中，我们会请求对方接收我们的<code>音频</code>和<code>视频</code>数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> offerOptions = &#123;</span><br><span class=\"line\">  <span class=\"attr\">offerToReceiveAudio</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 请求接收音频</span></span><br><span class=\"line\">  <span class=\"attr\">offerToReceiveVideo</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 请求接收视频</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">pc.<span class=\"title function_\">createOffer</span>(offerOptions)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">offer</span> =&gt;</span> <span class=\"title function_\">onCreateOfferSuccess</span>(offer.<span class=\"property\">sdp</span>))</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"title function_\">onCreateOfferError</span>());</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\" target=\"_blank\">createAnswer([options])</a>：</p>\n<p>创建一个<code>answer</code>，回应对方<code>offer</code>。<code>answer</code>也是有<code>offer</code>作用的，在回应的时候，表示<code>答应</code>你，并向你<code>请求</code>。</p>\n<p>打个比方：A向B表白，请求B做A的女朋友。如果B接受了，表示B成了A女朋友。同时，这也有另外一层含义，表示B有请求：请A做我的男朋友。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> answerOptions = &#123;</span><br><span class=\"line\">  <span class=\"attr\">offerToReceiveAudio</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 请求接收音频</span></span><br><span class=\"line\">  <span class=\"attr\">offerToReceiveVideo</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 请求接收视频</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">pc.<span class=\"title function_\">createAnswer</span>(answerOptions)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">answer</span> =&gt;</span> <span class=\"title function_\">onCreateAnswerSuccess</span>(answer.<span class=\"property\">sdp</span>))</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"title function_\">onCreateAnswerError</span>());</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.3.2-rtcsessiondescription\">3.3.2 RTCSessionDescription<a title=\"#3.3.2-rtcsessiondescription\" href=\"#3.3.2-rtcsessiondescription\"></a></h3>\n<p>用于生成Offer/Answer协商过程中SDP协议的相关描述。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">RTCSessionDescription</span>(rtcDescription)</span><br></pre></td></tr></table></figure>\n<p>rtcDescription只有两个属性：<code>type</code>，<code>sdp</code></p>\n<ul>\n<li><code>type</code>只能设置：‘answer’，‘offer’，‘pranswer’，‘rollback’；</li>\n<li><code>sdp</code>是标准的SDP会话描述（可由createOffer/createAnswer生成）</li>\n</ul>\n<h3 id=\"3.3.3-rtcicecandidate\">3.3.3 RTCIceCandidate<a title=\"#3.3.3-rtcicecandidate\" href=\"#3.3.3-rtcicecandidate\"></a></h3>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate\">https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate</a></p>\n<p><a href=\"https://blog.51cto.com/zhangjunhd/25481\">https://blog.51cto.com/zhangjunhd/25481</a></p>\n</blockquote>\n<p>用于建立ICE连接。通常我们不会手动去实例化一个<code>RTCIceCandidate</code>对象，在前面<code>3.3.1 RTCPeerConnection</code>中的<code>onicecandidate</code>事件回调就是一个<code>RTCIceCandidate</code>对象，我们只需要了解其中几个属性即可。</p>\n<ul>\n<li><strong>candidate</strong>: 用于连接性检测的对象</li>\n<li><strong>sdpMid</strong>: candidate的媒体流的识别标签</li>\n<li><strong>sdpMLineIndex</strong>: candidate的媒体流的相关联的SDP描述索引号</li>\n<li>address: 本机IP地址</li>\n<li>relatedAddress: 中继IP</li>\n<li>port: 本机端口</li>\n<li>relatedPort: 中继端口</li>\n<li>component: 候选协议，只有两种情况：<code>RTP</code>(Real-Time Transport Protocol)， <code>RTCP</code>(Real-Time Transport Control Protocol)</li>\n<li>foundation: 来自于STUN服务器的唯一标识符</li>\n<li>priority: 优先级</li>\n<li>tcpType: 如果使用的TCP协议，这个属性及表示TCP的状态</li>\n<li>type: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidateType\" target=\"_blank\">RTCIceCandidateType类型</a></li>\n<li>usernameFragment: <code>ice-ufrag</code>片段，用于生成<code>ice-pwd</code>，同一ICE进程的连接都将使用的是同一个片段。</li>\n</ul>\n<h1 id=\"四、实战开发\">四、实战开发<a title=\"#四、实战开发\" href=\"#四、实战开发\"></a></h1>\n<p>前面基本上已经列举了大部分基础知识，现在开始运用起来。</p>\n<p>本章实战开发，是开发一个 <strong>web实时音视频聊天室</strong> ：输入相同房间号，即可加入聊天室，进行视频聊天。</p>\n<p>主要有两个项目，前端界面(<a href=\"http://xn--+WebRTC+socket-9768by1h.io\">页面+WebRTC+socket.io</a>)，后端信令服务器控制转发(<a href=\"http://Express+socket.io\">Express+socket.io</a>)。</p>\n<p>整个项目完整代码：<a href=\"https://github.com/Chef5/WebRTC-demo\">https://github.com/Chef5/WebRTC-demo</a></p>\n<h2 id=\"4.1-环境准备\">4.1 环境准备<a title=\"#4.1-环境准备\" href=\"#4.1-环境准备\"></a></h2>\n<ul>\n<li>anywhere:  <code>npm i -g anywhere</code></li>\n</ul>\n<h2 id=\"4.2-信令服务器\">4.2 信令服务器<a title=\"#4.2-信令服务器\" href=\"#4.2-信令服务器\"></a></h2>\n<p>因为信令服务器代码结构比较简单，咱们先开发信令服务器。观察<code>1.5 经典WebRTC连接建立流程</code>，不难发现，信令服务器主要需要实现：转发<code>offer</code>、转发<code>answer</code>、转发<code>candidate</code>的三大核心功能。此外，我们开发聊天室，还需要：创建聊天室、退出聊天室的功能。</p>\n<p><img src=\"images/20210728/20200618134458727.png\" alt=\"image\" class=\"φbs\"></p>\n<h3 id=\"4.2.1-搭建项目\">4.2.1 搭建项目<a title=\"#4.2.1-搭建项目\" href=\"#4.2.1-搭建项目\"></a></h3>\n<p>（1）创建一个文件夹<code>signal-server</code>，在目录下创建两个文件：</p>\n<p>package.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;signal-server&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Patrick Jun&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;A webRTC signal server&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node app.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;dependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;express&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^4.17.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;express-session&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^1.17.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;socket.io&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.3.0&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>app.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;https&#x27;</span>);  <span class=\"comment\">// https服务</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);        <span class=\"comment\">// fs</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> socketIO = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;socket.io&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读取密钥和签名证书</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  <span class=\"attr\">key</span>: fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&#x27;keys/server_key.pem&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">cert</span>: fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&#x27;keys/server_crt.pem&#x27;</span>),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构建https服务器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> apps = https.<span class=\"title function_\">createServer</span>(options);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SSL_PORT</span> = <span class=\"number\">8443</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">apps.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">SSL_PORT</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构建signal server</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> io = socketIO.<span class=\"title function_\">listen</span>(apps);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// socket监听连接</span></span><br><span class=\"line\">io.<span class=\"property\">sockets</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;connection&#x27;</span>, <span class=\"function\">(<span class=\"params\">socket</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;连接建立&#x27;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 之后所有业务处理，写在这里面</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>（2）创建证书</p>\n<p>在项目文件夹下，创建一个文件夹<code>keys</code>，然后开始生成自签名证书：</p>\n<p>linux环境下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -x509 -newkey rsa:2048 -keyout ./keys/server_key.pem -out ./keys/server_crt.pem -days 99999 -nodes </span><br></pre></td></tr></table></figure>\n<p>windows下：参考 <a href=\"https://letsencrypt.org/zh-cn/docs/certificates-for-localhost/\">https://letsencrypt.org/zh-cn/docs/certificates-for-localhost/</a></p>\n<p>修改<code>app.js</code>，将秘钥和签名证书的路径改为你电脑中的绝对路径，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//读取密钥和签名证书</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  <span class=\"attr\">key</span>: fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&#x27;D://signal-server/keys/server_key.pem&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">cert</span>: fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&#x27;D://signal-server/keys/server_crt.pem&#x27;</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）运行</p>\n<p>在项目根目录下，安装依赖：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i</span><br></pre></td></tr></table></figure>\n<p>然后，启动：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node app.js</span><br></pre></td></tr></table></figure>\n<p>打开浏览器，访问：<code>https://localhost:8443</code></p>\n<p>访问时，浏览器会提示不安全的访问，这个时候，直接敲键盘：<code>thisisunsafe</code> 即可继续访问。当看到浏览器地址栏继续一直在请求中，那么就表示项目成功运行。</p>\n<h3 id=\"4.2.2-房间功能\">4.2.2 房间功能<a title=\"#4.2.2-房间功能\" href=\"#4.2.2-房间功能\"></a></h3>\n<p>房间功能主要包括：创建/加入房间、退出房间。</p>\n<p>业务处理，都放在连接成功后的回调函数里。</p>\n<p>（1）创建房间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// socket监听连接</span></span><br><span class=\"line\">io.<span class=\"property\">sockets</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;connection&#x27;</span>, <span class=\"function\">(<span class=\"params\">socket</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;连接建立&#x27;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 创建/加入房间</span></span><br><span class=\"line\">  socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;createAndJoinRoom&#x27;</span>, <span class=\"function\">(<span class=\"params\">message</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; room &#125; = message;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Received createAndJoinRoom：&#x27;</span> + room);</span><br><span class=\"line\">    <span class=\"comment\">// 判断room是否存在</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> clientsInRoom = io.<span class=\"property\">sockets</span>.<span class=\"property\">adapter</span>.<span class=\"property\">rooms</span>[room];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> numClients = clientsInRoom ? <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(clientsInRoom.<span class=\"property\">sockets</span>).<span class=\"property\">length</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Room &#x27;</span> + room + <span class=\"string\">&#x27; now has &#x27;</span> + numClients + <span class=\"string\">&#x27; client(s)&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numClients === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// room 不存在 不存在则创建（socket.join）</span></span><br><span class=\"line\">      <span class=\"comment\">// 加入并创建房间</span></span><br><span class=\"line\">      socket.<span class=\"title function_\">join</span>(room);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Client ID &#x27;</span> + socket.<span class=\"property\">id</span> + <span class=\"string\">&#x27; created room &#x27;</span> + room);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 发送消息至客户端 [id,room,peers]</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: socket.<span class=\"property\">id</span>, <span class=\"comment\">//socket id</span></span><br><span class=\"line\">        <span class=\"attr\">room</span>: room, <span class=\"comment\">// 房间号</span></span><br><span class=\"line\">        <span class=\"attr\">peers</span>: [], <span class=\"comment\">// 其他连接</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      socket.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;created&#x27;</span>, data);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// room 存在</span></span><br><span class=\"line\">      <span class=\"comment\">// 加入房间中</span></span><br><span class=\"line\">      socket.<span class=\"title function_\">join</span>(room);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Client ID &#x27;</span> + socket.<span class=\"property\">id</span> + <span class=\"string\">&#x27; joined room &#x27;</span> + room);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// joined告知房间里的其他客户端 [id,room]</span></span><br><span class=\"line\">      io.<span class=\"property\">sockets</span>.<span class=\"title function_\">in</span>(room).<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;joined&#x27;</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: socket.<span class=\"property\">id</span>, <span class=\"comment\">//socket id</span></span><br><span class=\"line\">        <span class=\"attr\">room</span>: room, <span class=\"comment\">// 房间号</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 发送消息至客户端 [id,room,peers]</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: socket.<span class=\"property\">id</span>, <span class=\"comment\">//socket id</span></span><br><span class=\"line\">        <span class=\"attr\">room</span>: room, <span class=\"comment\">// 房间号</span></span><br><span class=\"line\">        <span class=\"attr\">peers</span>: [], <span class=\"comment\">// 其他连接</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 查询其他连接</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> otherSocketIds = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(clientsInRoom.<span class=\"property\">sockets</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; otherSocketIds.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (otherSocketIds[i] !== socket.<span class=\"property\">id</span>) &#123;</span><br><span class=\"line\">          data.<span class=\"property\">peers</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: otherSocketIds[i],</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      socket.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;created&#x27;</span>, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>（2）退出房间</p>\n<p>在加入房间监听后面，继续添加：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 退出房间，转发exit消息至room其他客户端 [from,room]</span></span><br><span class=\"line\">socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;exit&#x27;</span>, <span class=\"function\">(<span class=\"params\">message</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Received exit: &#x27;</span> + message.<span class=\"property\">from</span> + <span class=\"string\">&#x27; message: &#x27;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(message));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; room &#125; = message;</span><br><span class=\"line\">  <span class=\"comment\">// 关闭该连接</span></span><br><span class=\"line\">  socket.<span class=\"title function_\">leave</span>(room);</span><br><span class=\"line\">  <span class=\"comment\">// 转发exit消息至room其他客户端</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> clientsInRoom = io.<span class=\"property\">sockets</span>.<span class=\"property\">adapter</span>.<span class=\"property\">rooms</span>[room];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (clientsInRoom) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> otherSocketIds = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(clientsInRoom.<span class=\"property\">sockets</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; otherSocketIds.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> otherSocket = io.<span class=\"property\">sockets</span>.<span class=\"property\">connected</span>[otherSocketIds[i]];</span><br><span class=\"line\">      otherSocket.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;exit&#x27;</span>, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>还有一种情况，当socket连接异常断开时，也需要退出房间：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// socket关闭</span></span><br><span class=\"line\">socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;disconnect&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> socketId = socket.<span class=\"property\">id</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;disconnect: &#x27;</span> + socketId + <span class=\"string\">&#x27; reason:&#x27;</span> + reason );</span><br><span class=\"line\">  <span class=\"keyword\">const</span> message = &#123;</span><br><span class=\"line\">    <span class=\"attr\">from</span>: socketId,</span><br><span class=\"line\">    <span class=\"attr\">room</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  socket.<span class=\"property\">broadcast</span>.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;exit&#x27;</span>, message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4.2.3-转发功能\">4.2.3 转发功能<a title=\"#4.2.3-转发功能\" href=\"#4.2.3-转发功能\"></a></h3>\n<p>转发功能有：转发<code>offer</code>、转发<code>answer</code>、转发<code>candidate</code></p>\n<p>（1）转发offer</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转发offer消息至room其他客户端 [from,to,room,sdp]</span></span><br><span class=\"line\">socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;offer&#x27;</span>, <span class=\"function\">(<span class=\"params\">message</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// const room = Object.keys(socket.rooms)[1];</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;收到offer: from &#x27;</span> + message.<span class=\"property\">from</span> + <span class=\"string\">&#x27; room:&#x27;</span> + message.<span class=\"property\">room</span> + <span class=\"string\">&#x27; to &#x27;</span> + message.<span class=\"property\">to</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 根据id找到对应连接</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> otherClient = io.<span class=\"property\">sockets</span>.<span class=\"property\">connected</span>[message.<span class=\"property\">to</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!otherClient) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 转发offer消息至其他客户端</span></span><br><span class=\"line\">  otherClient.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;offer&#x27;</span>, message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>（2）转发answer</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转发answer消息至room其他客户端 [from,to,room,sdp]</span></span><br><span class=\"line\">socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;answer&#x27;</span>, <span class=\"function\">(<span class=\"params\">message</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// const room = Object.keys(socket.rooms)[1];</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;收到answer: from &#x27;</span> + message.<span class=\"property\">from</span> + <span class=\"string\">&#x27; room:&#x27;</span> + message.<span class=\"property\">room</span> + <span class=\"string\">&#x27; to &#x27;</span> + message.<span class=\"property\">to</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 根据id找到对应连接</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> otherClient = io.<span class=\"property\">sockets</span>.<span class=\"property\">connected</span>[message.<span class=\"property\">to</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!otherClient) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 转发answer消息至其他客户端</span></span><br><span class=\"line\">  otherClient.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;answer&#x27;</span>, message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>（3）转发candidate</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转发candidate消息至room其他客户端 [from,to,room,candidate[sdpMid,sdpMLineIndex,sdp]]</span></span><br><span class=\"line\">socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;candidate&#x27;</span>, <span class=\"function\">(<span class=\"params\">message</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;收到candidate: from &#x27;</span> + message.<span class=\"property\">from</span> + <span class=\"string\">&#x27; room:&#x27;</span> + room + <span class=\"string\">&#x27; to &#x27;</span> + message.<span class=\"property\">to</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 根据id找到对应连接</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> otherClient = io.<span class=\"property\">sockets</span>.<span class=\"property\">connected</span>[message.<span class=\"property\">to</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!otherClient) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 转发candidate消息至其他客户端</span></span><br><span class=\"line\">  otherClient.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;candidate&#x27;</span>, message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4.2.4-完整代码\">4.2.4 完整代码<a title=\"#4.2.4-完整代码\" href=\"#4.2.4-完整代码\"></a></h3>\n<p><a href=\"https://github.com/Chef5/WebRTC-demo/tree/main/signal-server\">https://github.com/Chef5/WebRTC-demo/tree/main/signal-server</a></p>\n<h2 id=\"4.3-前端\">4.3 前端<a title=\"#4.3-前端\" href=\"#4.3-前端\"></a></h2>\n<p>前端可以分为三大功能：音视频设备控制和音视频显示控制、Offer/Answer沟通、ICE连接。</p>\n<p><img src=\"images/20210728/20200618134458727.png\" alt=\"image\" class=\"φbs\"></p>\n<h3 id=\"4.3.1-搭建项目\">4.3.1 搭建项目<a title=\"#4.3.1-搭建项目\" href=\"#4.3.1-搭建项目\"></a></h3>\n<p>（1）创建一个文件夹<code>webrtc-client</code>，在目录下创建一个<code>index.html</code>文件，创建一个目录`js</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|- webrtc-client/</span><br><span class=\"line\">   |- js/</span><br><span class=\"line\">   |- index.html</span><br></pre></td></tr></table></figure>\n<p>（2）在<code>js</code>目录下创建几个文件，并在从网上下载<code>socket.io.js</code>和<code>jquery.min.js</code>文件</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|- webrtc-client/</span><br><span class=\"line\">   |- js/</span><br><span class=\"line\">      |- config.js</span><br><span class=\"line\">      |- sdk.js</span><br><span class=\"line\">      |- main.js</span><br><span class=\"line\">      |- socket.io.js  // 自行从网上下载</span><br><span class=\"line\">      |- jquery.min.js // 自行从网上下载</span><br><span class=\"line\">   |- index.html</span><br></pre></td></tr></table></figure>\n<p>（3）代码</p>\n<p>index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>WebRtc视频通话demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"selector-tag\">video</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">background-color</span>: bisque;</span></span><br><span class=\"line\"><span class=\"language-css\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/jquery.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/socket.io.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/config.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/sdk.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;room&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;输入房间号&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;connect&quot;</span>&gt;</span>连接<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;logout&quot;</span>&gt;</span>挂断<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>本地视频<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;localVideo&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#x27;width:200px;height:200px;&#x27;</span> <span class=\"attr\">autoplay</span> <span class=\"attr\">muted</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>远程视频<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;remoteDiv&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// WebRTC配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">THSConfig</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 信令服务器</span></span><br><span class=\"line\">  <span class=\"attr\">signalServer</span>: <span class=\"string\">&#x27;wss://localhost:8443&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// Offer/Answer模型请求配置</span></span><br><span class=\"line\">  <span class=\"attr\">offerOptions</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">offerToReceiveAudio</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 请求接收音频</span></span><br><span class=\"line\">    <span class=\"attr\">offerToReceiveVideo</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 请求接收视频</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ICE服务器</span></span><br><span class=\"line\">  <span class=\"attr\">iceServers</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">iceServers</span>: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">urls</span>: <span class=\"string\">&#x27;stun:stun.xten.com&#x27;</span> &#125;, <span class=\"comment\">// Safri兼容：url -&gt; urls</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4.3.2-兼容预处理\">4.3.2 兼容预处理<a title=\"#4.3.2-兼容预处理\" href=\"#4.3.2-兼容预处理\"></a></h3>\n<p>因为部分<code>web API</code>在不同浏览器有不同的名称或者属性，因此需要处理兼容，以下是兼容代码，预先定义一下。</p>\n<p>编辑<code>sdk.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 兼容处理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">PeerConnection</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">RTCPeerConnection</span> || <span class=\"variable language_\">window</span>.<span class=\"property\">mozRTCPeerConnection</span> || <span class=\"variable language_\">window</span>.<span class=\"property\">webkitRTCPeerConnection</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SessionDescription</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">RTCSessionDescription</span> || <span class=\"variable language_\">window</span>.<span class=\"property\">mozRTCSessionDescription</span> || <span class=\"variable language_\">window</span>.<span class=\"property\">webkitRTCSessionDescription</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">GET_USER_MEDIA</span> = navigator.<span class=\"property\">getUserMedia</span> ? <span class=\"string\">&quot;getUserMedia&quot;</span> :</span><br><span class=\"line\">                     navigator.<span class=\"property\">mozGetUserMedia</span> ? <span class=\"string\">&quot;mozGetUserMedia&quot;</span> :</span><br><span class=\"line\">                     navigator.<span class=\"property\">webkitGetUserMedia</span> ? <span class=\"string\">&quot;webkitGetUserMedia&quot;</span> : <span class=\"string\">&quot;getUserMedia&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> v = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;video&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SRC_OBJECT</span> = <span class=\"string\">&#x27;srcObject&#x27;</span> <span class=\"keyword\">in</span> v ? <span class=\"string\">&quot;srcObject&quot;</span> :</span><br><span class=\"line\">                 <span class=\"string\">&#x27;mozSrcObject&#x27;</span> <span class=\"keyword\">in</span> v ? <span class=\"string\">&quot;mozSrcObject&quot;</span> :</span><br><span class=\"line\">                 <span class=\"string\">&#x27;webkitSrcObject&#x27;</span> <span class=\"keyword\">in</span> v ? <span class=\"string\">&quot;webkitSrcObject&quot;</span> : <span class=\"string\">&quot;srcObject&quot;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4.3.3-音视频控制\">4.3.3 音视频控制<a title=\"#4.3.3-音视频控制\" href=\"#4.3.3-音视频控制\"></a></h3>\n<p>音视频控制主要分打开关闭摄像头，视频流绑定到<code>video</code>标签，其实这一节前面<code>3.2 音视频相关API</code>已经学习过了，这里直接给出代码。</p>\n<p>接着编辑<code>sdk.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动摄像头</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">openCamera</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> navigator.<span class=\"property\">mediaDevices</span>[<span class=\"variable constant_\">GET_USER_MEDIA</span>](&#123;</span><br><span class=\"line\">    <span class=\"attr\">audio</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">video</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 关闭摄像头</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">dom</span>&#125; video video节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">closeCamera</span> = video =&gt; &#123;</span><br><span class=\"line\">  video[<span class=\"variable constant_\">SRC_OBJECT</span>].<span class=\"title function_\">getTracks</span>()[<span class=\"number\">0</span>].<span class=\"title function_\">stop</span>(); <span class=\"comment\">// audio</span></span><br><span class=\"line\">  video[<span class=\"variable constant_\">SRC_OBJECT</span>].<span class=\"title function_\">getTracks</span>()[<span class=\"number\">1</span>].<span class=\"title function_\">stop</span>(); <span class=\"comment\">// video</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 视频流绑定到video节点展示</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">dom</span>&#125; video video节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">obj</span>&#125; stream 视频流</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">pushStreamToVideo</span> = (<span class=\"params\">video, stream</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;视频流绑定到video节点展示&#x27;</span>, video, stream)</span><br><span class=\"line\">  video[<span class=\"variable constant_\">SRC_OBJECT</span>] = stream;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编辑<code>main.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * dom获取</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> btnConnect = $(<span class=\"string\">&#x27;#connect&#x27;</span>); <span class=\"comment\">// 连接dom</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> btnLogout = $(<span class=\"string\">&#x27;#logout&#x27;</span>); <span class=\"comment\">// 挂断dom</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> domLocalVideo = $(<span class=\"string\">&#x27;#localVideo&#x27;</span>); <span class=\"comment\">// 本地视频dom</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 连接</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">btnConnect.<span class=\"title function_\">click</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//启动摄像头</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (localStream == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">openCamera</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">stream</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">pushStreamToVideo</span>(domLocalVideo[<span class=\"number\">0</span>], stream);</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"title function_\">alert</span>(<span class=\"string\">`getUserMedia() error: <span class=\"subst\">$&#123;e.name&#125;</span>`</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 挂断</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">btnLogout.<span class=\"title function_\">click</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">closeCamera</span>(domLocalVideo[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>测试一下摄像头功能，因为开启摄像头需要使用https服务，因此在前端项目根目录打开控制台命令，运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anywhere 5000</span><br></pre></td></tr></table></figure>\n<p>然后浏览器打开命令行提示里的端口号为<code>5001</code>的那个https协议的地址，例如：<code>https://192.168.1.4:5001/</code></p>\n<p>这时候，可能也会提示您的连接不是私密连接，点击<code>高级</code>，最下面<code>继续前往</code>。</p>\n<p>点击<code>连接</code>按钮，允许访问摄像头，看摄像头是否正常打开，页面视频是否出现，然后点击<code>断开</code>，看摄像头是否关闭、画面是否消失。</p>\n<h3 id=\"4.3.4-offer/answer模型\">4.3.4 Offer/Answer模型<a title=\"#4.3.4-offer/answer模型\" href=\"#4.3.4-offer/answer模型\"></a></h3>\n<p>从这节开始，就正式涉及到<code>WebRTC</code>相关API了，下面先写几个全局变量，用于保存一些公用数据：</p>\n<p>编辑<code>sdk.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// socket连接</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> socket = <span class=\"title function_\">io</span>(<span class=\"title class_\">THSConfig</span>.<span class=\"property\">signalServer</span>);</span><br><span class=\"line\"><span class=\"comment\">// 本地socket id</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> socketId;</span><br><span class=\"line\"><span class=\"comment\">// 房间 id</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> roomId;</span><br><span class=\"line\"><span class=\"comment\">// 对RTCPeerConnection连接进行缓存</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> rtcPeerConnects = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 本地stream</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> localStream = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>（1）加入房间</p>\n<p>在开始Offer/Answer模型前，我们必须得至少有两个客户端才行。因此，我们先写一下，怎么控制房间。</p>\n<p>咱们先整理一下思路，我们先让<code>甲</code>创建一个房间，然后，这个房间里只有<code>甲</code>一个人，无法进行Offer/Answer。这时候<code>乙</code>在进入房间时，可以获取一下房间的人数，如果房间有人，那么<code>乙</code>就给房间里的每一个人发送<code>Offer</code>请求。房间里的<code>甲</code>监听到了刚进来<code>乙</code>的Offer后，给<code>乙</code>回复Answer。这样就建立起了<code>Offer/Answer</code>模型。</p>\n<p>编辑<code>sdk.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 连接（给signal server 发送创建或者加入房间的消息）</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; roomid 房间号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">connect</span> = roomid =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;创建或者加入房间&#x27;</span>, roomid)</span><br><span class=\"line\">  socket.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;createAndJoinRoom&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">room</span>: roomid</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 监听signal server创建房间或者加入房间成功的消息，signal server会判断房间里是否有人</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;created&#x27;</span>, <span class=\"keyword\">async</span> data =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// data: [id,room,peers]</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;created: &#x27;</span>, data);</span><br><span class=\"line\">  <span class=\"comment\">// 保存signal server给我分配的socketId</span></span><br><span class=\"line\">  socketId = data.<span class=\"property\">id</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 保存创建房间或者加入房间的room id</span></span><br><span class=\"line\">  roomId = data.<span class=\"property\">room</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 如果data.peers = []，说明房间里没有人，是创建房间，以下步骤则不会执行</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果data.peers != []，说明房间里有人，是加入房间，给返回的每一个peers，创建WebRtcPeerConnection并发送offer消息</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; data.<span class=\"property\">peers</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> otherSocketId = data.<span class=\"property\">peers</span>[i].<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 创建WebRtcPeerConnection // 注意：这个函数是下一个步骤写的。</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pc = <span class=\"title function_\">getWebRTCConnect</span>(otherSocketId);</span><br><span class=\"line\">    <span class=\"comment\">// 创建offer</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> offer = <span class=\"keyword\">await</span> pc.<span class=\"title function_\">createOffer</span>(<span class=\"title class_\">THSConfig</span>.<span class=\"property\">offerOptions</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 发送offer</span></span><br><span class=\"line\">    <span class=\"title function_\">onCreateOfferSuccess</span>(pc, otherSocketId, offer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * offer创建成功回调</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; pc </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; otherSocketId </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; offer </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onCreateOfferSuccess</span>(<span class=\"params\">pc, otherSocketId, offer</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;createOffer: success &#x27;</span> + <span class=\"string\">&#x27; id:&#x27;</span> + otherSocketId + <span class=\"string\">&#x27; offer: &#x27;</span>, offer);</span><br><span class=\"line\">  <span class=\"comment\">// 设置本地setLocalDescription 将自己的描述信息加入到PeerConnection中</span></span><br><span class=\"line\">  pc.<span class=\"title function_\">setLocalDescription</span>(offer);</span><br><span class=\"line\">  <span class=\"comment\">// 构建offer</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> message = &#123;</span><br><span class=\"line\">    <span class=\"attr\">from</span>: socketId,</span><br><span class=\"line\">    <span class=\"attr\">to</span>: otherSocketId,</span><br><span class=\"line\">    <span class=\"attr\">room</span>: roomId,</span><br><span class=\"line\">    <span class=\"attr\">sdp</span>: offer.<span class=\"property\">sdp</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;发送offer消息&#x27;</span>, message)</span><br><span class=\"line\">  <span class=\"comment\">// 发送offer消息</span></span><br><span class=\"line\">  socket.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;offer&#x27;</span>, message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前面，可以算是把<code>Offer</code>发出去了，可以回顾<code>4.2.3 转发功能</code>，信令服务器收到<code>Offer</code>后，会将其转发给房间里的每一个用户，然后，我们就需要写一个监听，当信令服务器转发过来<code>Offer</code>后，我们应该进行<code>Answer</code>：</p>\n<p>继续编辑<code>sdk.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 监听signal server转发过来的offer消息，将对方的描述信息加入到PeerConnection中，然后构建answer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;offer&#x27;</span>, <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// data:  [from,to,room,sdp]</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;收到offer: &#x27;</span>, data);</span><br><span class=\"line\">  <span class=\"comment\">// 获取RTCPeerConnection</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> pc = <span class=\"title function_\">getWebRTCConnect</span>(data.<span class=\"property\">from</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;getWebRTCConnect: &#x27;</span>, pc);</span><br><span class=\"line\">  <span class=\"comment\">// 构建RTCSessionDescription参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rtcDescription = &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;offer&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sdp</span>: data.<span class=\"property\">sdp</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;offer设置远端setRemoteDescription&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 设置远端setRemoteDescription</span></span><br><span class=\"line\">  pc.<span class=\"title function_\">setRemoteDescription</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">SessionDescription</span>(rtcDescription));</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setRemoteDescription: &#x27;</span>, rtcDescription);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// createAnswer</span></span><br><span class=\"line\">  pc.<span class=\"title function_\">createAnswer</span>(<span class=\"title class_\">THSConfig</span>.<span class=\"property\">offerOptions</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">offer</span> =&gt;</span> <span class=\"title function_\">onCreateAnswerSuccess</span>(pc, data.<span class=\"property\">from</span>, offer))</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"title function_\">onCreateAnswerError</span>(error));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * answer创建成功回调</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; pc </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; otherSocketId </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; offer </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onCreateAnswerSuccess</span>(<span class=\"params\">pc, otherSocketId, offer</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;createAnswer: success &#x27;</span> + <span class=\"string\">&#x27; id:&#x27;</span> + otherSocketId + <span class=\"string\">&#x27; offer: &#x27;</span>, offer);</span><br><span class=\"line\">  <span class=\"comment\">// 设置本地setLocalDescription，将对方的描述信息加入到PeerConnection中</span></span><br><span class=\"line\">  pc.<span class=\"title function_\">setLocalDescription</span>(offer);</span><br><span class=\"line\">  <span class=\"comment\">// 构建answer信息</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> message = &#123;</span><br><span class=\"line\">    <span class=\"attr\">from</span>: socketId,</span><br><span class=\"line\">    <span class=\"attr\">to</span>: otherSocketId,</span><br><span class=\"line\">    <span class=\"attr\">room</span>: roomId,</span><br><span class=\"line\">    <span class=\"attr\">sdp</span>: offer.<span class=\"property\">sdp</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;发送answer消息&#x27;</span>, message)</span><br><span class=\"line\">  <span class=\"comment\">// 发送answer消息</span></span><br><span class=\"line\">  socket.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;answer&#x27;</span>, message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * answer创建失败回调</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; error </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onCreateAnswerError</span>(<span class=\"params\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;createAnswer: fail error &#x27;</span> + error);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，我们把<code>Answer</code>信息回复出去了，通过信令服务器会转发指定的用户（刚刚发来offer的用户），然后我们还要添加一个监听<code>Answer</code>的信息：</p>\n<p>继续编辑<code>sdk.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 监听signal server转发过来的answer消息，将对方的描述信息加入到PeerConnection中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;answer&#x27;</span>, <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// data:  [from,to,room,sdp]</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;收到answer: &#x27;</span>, data);</span><br><span class=\"line\">  <span class=\"comment\">// 获取RTCPeerConnection</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> pc = <span class=\"title function_\">getWebRTCConnect</span>(data.<span class=\"property\">from</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 构建RTCSessionDescription参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rtcDescription = &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;answer&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sdp</span>: data.<span class=\"property\">sdp</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;answer设置远端setRemoteDescription&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setRemoteDescription: &#x27;</span>, rtcDescription);</span><br><span class=\"line\">  <span class=\"comment\">//设置远端setRemoteDescription</span></span><br><span class=\"line\">  pc.<span class=\"title function_\">setRemoteDescription</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">SessionDescription</span>(rtcDescription));</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>（2）获取RTCPeerConnection、移除RTCPeerConnection</p>\n<p>接上一步骤，其中涉及到一个<code>getWebRTCConnect</code>的方法，这节就写如何实现它，以及本地如何管理与他人的连接。</p>\n<p>继续编辑<code>sdk.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对RTCPeerConnection连接进行缓存</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> rtcPeerConnects = &#123;&#125;;  <span class=\"comment\">// 这是开始前设置的全局变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取RTCPeerConnection</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; otherSocketId 对方socketId</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getWebRTCConnect</span>(<span class=\"params\">otherSocketId</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!otherSocketId) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 查询全局中是否已经保存了连接</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> pc = rtcPeerConnects[otherSocketId];</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;建立连接：&#x27;</span>, otherSocketId, pc)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> (pc) === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123; <span class=\"comment\">// 如果没有保存，就创建RTCPeerConnection</span></span><br><span class=\"line\">    <span class=\"comment\">// 构建RTCPeerConnection</span></span><br><span class=\"line\">    pc = <span class=\"keyword\">new</span> <span class=\"title class_\">PeerConnection</span>(<span class=\"title class_\">THSConfig</span>.<span class=\"property\">iceServers</span>); <span class=\"comment\">// PeerConnection是4.3.2定义的兼容处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置获取icecandidate信息回调 此处可暂时忽略，将在4.3.5讲解</span></span><br><span class=\"line\">    pc.<span class=\"property\">onicecandidate</span> = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"title function_\">onIceCandidate</span>(pc, otherSocketId, e);</span><br><span class=\"line\">    <span class=\"comment\">// 设置获取对端stream数据回调-track方式 此处可暂时忽略，将在4.3.5讲解</span></span><br><span class=\"line\">    pc.<span class=\"property\">ontrack</span> = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我接到数据流了！！&#x27;</span>, pc, otherSocketId, e)</span><br><span class=\"line\">      <span class=\"title function_\">onTrack</span>(pc, otherSocketId, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置获取对端stream数据回调 此处可暂时忽略，将在4.3.5讲解</span></span><br><span class=\"line\">    pc.<span class=\"property\">onremovestream</span> = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"title function_\">onRemoveStream</span>(pc, otherSocketId, e);</span><br><span class=\"line\">    <span class=\"comment\">// peer设置本地流 此处可暂时忽略，将在4.3.5讲解</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (localStream != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      localStream.<span class=\"title function_\">getTracks</span>().<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">track</span> =&gt;</span> &#123;</span><br><span class=\"line\">        pc.<span class=\"title function_\">addTrack</span>(track, localStream);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 缓存peer连接</span></span><br><span class=\"line\">    rtcPeerConnects[otherSocketId] = pc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 移除RTCPeerConnection连接缓存</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; otherSocketId 对方socketId</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeRtcConnect</span>(<span class=\"params\">otherSocketId</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> rtcPeerConnects[otherSocketId];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4.3.5-ice连接/接收音视频流\">4.3.5 ICE连接/接收音视频流<a title=\"#4.3.5-ice连接/接收音视频流\" href=\"#4.3.5-ice连接/接收音视频流\"></a></h3>\n<p>Offer/Answer模型让两个客户端互相建立了签订了合同，建立了信任的合作伙伴关系，接下来可以开始进行交易了（传输音视频数据）。在交易前，我们要互相知道对方真实的交易地址和银行账号（允许主机直连的地址，详细可回顾1.4ICE协议），我给你发货，你给我打钱。</p>\n<p>通常，在第一步<code>乙</code>的<code>Offer</code>发出后，<code>乙客户端</code>就开始通过ICE获取自己的地址（通过ICE协议可以了解，这个地址可能是自己的IP地址），只要等<code>甲方</code>同意（设置远程描述完成，这时候可能还未回复Answer），<code>甲方</code>就可以接收到<code>乙客户端</code>的音视频流了。同理，<code>甲方</code>回复的<code>Answer</code>之后，只要<code>乙客户端</code>同意，<code>乙客户端</code>也就能收到<code>甲方</code>的音视频流了。至此，双方都收到对方的视频流了，视频通话建立。</p>\n<p>回顾上一小节 <code>4.3.4 (2) 获取RTCPeerConnection</code>中的一段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构建RTCPeerConnection</span></span><br><span class=\"line\">pc = <span class=\"keyword\">new</span> <span class=\"title class_\">PeerConnection</span>(<span class=\"title class_\">THSConfig</span>.<span class=\"property\">iceServers</span>); <span class=\"comment\">// PeerConnection是4.3.2定义的兼容处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 设置获取icecandidate信息回调</span></span><br><span class=\"line\">pc.<span class=\"property\">onicecandidate</span> = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"title function_\">onIceCandidate</span>(pc, otherSocketId, e);</span><br><span class=\"line\"><span class=\"comment\">// 2. 设置获取对端stream数据回调-track方式  还有种方式是onaddstream，但这种方式已经不推荐使用了。</span></span><br><span class=\"line\">pc.<span class=\"property\">ontrack</span> = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我接到数据流了！！&#x27;</span>, pc, otherSocketId, e)</span><br><span class=\"line\">  <span class=\"title function_\">onTrack</span>(pc, otherSocketId, e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 3. 设置获取对端stream数据回调</span></span><br><span class=\"line\">pc.<span class=\"property\">onremovestream</span> = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"title function_\">onRemoveStream</span>(pc, otherSocketId, e);</span><br><span class=\"line\"><span class=\"comment\">// 4. peer设置本地流</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (localStream != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">  localStream.<span class=\"title function_\">getTracks</span>().<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">track</span> =&gt;</span> &#123;</span><br><span class=\"line\">    pc.<span class=\"title function_\">addTrack</span>(track, localStream);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例<code>pc</code>实际就是<code>window.RTCPeerConnection</code>对象，这个对象有几个回调方法在<code>3.3.1</code>节已经讲过了。</p>\n<p>（1）onicecandidate</p>\n<p>当ICE协商完成后，我们将协商结果发送至信令服务器，让其转发给指定的客户端。</p>\n<p>继续编辑<code>sdk.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * RTCPeerConnection 事件回调，获取icecandidate信息回调</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; pc </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; otherSocketId </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; event </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onIceCandidate</span>(<span class=\"params\">pc, otherSocketId, event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;onIceCandidate to &#x27;</span> + otherSocketId + <span class=\"string\">&#x27; candidate: &#x27;</span>, event);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">candidate</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构建信息 [from,to,room,candidate[sdpMid,sdpMLineIndex,sdp]]</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> message = &#123;</span><br><span class=\"line\">      <span class=\"attr\">from</span>: socketId,</span><br><span class=\"line\">      <span class=\"attr\">to</span>: otherSocketId,</span><br><span class=\"line\">      <span class=\"attr\">room</span>: roomId,</span><br><span class=\"line\">      <span class=\"attr\">candidate</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">sdpMid</span>: event.<span class=\"property\">candidate</span>.<span class=\"property\">sdpMid</span>,</span><br><span class=\"line\">        <span class=\"attr\">sdpMLineIndex</span>: event.<span class=\"property\">candidate</span>.<span class=\"property\">sdpMLineIndex</span>,</span><br><span class=\"line\">        <span class=\"attr\">sdp</span>: event.<span class=\"property\">candidate</span>.<span class=\"property\">candidate</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;向信令服务器发送candidate&#x27;</span>, message)</span><br><span class=\"line\">    <span class=\"comment\">// 向信令服务器发送candidate</span></span><br><span class=\"line\">    socket.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;candidate&#x27;</span>, message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>远程客户端收到candidate后，添加candidate后即可接收到本机的音视频流：</p>\n<p>继续编辑<code>sdk.js</code>，添加监听事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 监听signal server转发过来的candidate消息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;candidate&#x27;</span>, <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// data:  [from,to,room,candidate[sdpMid,sdpMLineIndex,sdp]]</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;candidate: &#x27;</span>, data);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> iceData = data.<span class=\"property\">candidate</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 获取RTCPeerConnection</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> pc = <span class=\"title function_\">getWebRTCConnect</span>(data.<span class=\"property\">from</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> rtcIceCandidate = <span class=\"keyword\">new</span> <span class=\"title class_\">RTCIceCandidate</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">candidate</span>: iceData.<span class=\"property\">sdp</span>,</span><br><span class=\"line\">    <span class=\"attr\">sdpMid</span>: iceData.<span class=\"property\">sdpMid</span>,</span><br><span class=\"line\">    <span class=\"attr\">sdpMLineIndex</span>: iceData.<span class=\"property\">sdpMLineIndex</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;添加对端Candidate&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 添加对端Candidate</span></span><br><span class=\"line\">  pc.<span class=\"title function_\">addIceCandidate</span>(rtcIceCandidate);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>（2）ontrack</p>\n<p>当监听到对方传递过来时音视频流后，动态创建一个<code>video</code>标签，显示接收到的音视频流数据。</p>\n<p>继续编辑<code>sdk.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取对端stream数据回调-ontrack模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; pc </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; otherSocketId </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; event </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">onTrack</span>(<span class=\"params\">pc, otherSocketId, event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;onTrack from: &#x27;</span> + otherSocketId);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> otherVideoDom = $(<span class=\"string\">&#x27;#&#x27;</span> + otherSocketId);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (otherVideoDom.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123; <span class=\"comment\">// TODO 未知原因：会两次onTrack，就会导致建立两次dom</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> video = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;video&#x27;</span>);</span><br><span class=\"line\">    video.<span class=\"property\">id</span> = otherSocketId;</span><br><span class=\"line\">    video.<span class=\"property\">autoplay</span> = <span class=\"string\">&#x27;autoplay&#x27;</span>;</span><br><span class=\"line\">    video.<span class=\"property\">muted</span> = <span class=\"string\">&#x27;muted&#x27;</span>;</span><br><span class=\"line\">    video.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">    video.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">    video.<span class=\"property\">style</span>.<span class=\"property\">marginRight</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#remoteDiv&#x27;</span>).<span class=\"title function_\">append</span>(video);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#&#x27;</span> + otherSocketId)[<span class=\"number\">0</span>][<span class=\"variable constant_\">SRC_OBJECT</span>] = event.<span class=\"property\">streams</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）onremovestream</p>\n<p>监听对方停止传输视频流的时候，我方进行相应处理：</p>\n<p>继续编辑<code>sdk.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * onRemoveStream回调</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; pc </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; otherSocketId </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; event </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onRemoveStream</span>(<span class=\"params\">pc, otherSocketId, event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;onRemoveStream from: &#x27;</span> + otherSocketId);</span><br><span class=\"line\">  <span class=\"comment\">// peer关闭</span></span><br><span class=\"line\">  <span class=\"title function_\">getWebRTCConnect</span>(otherSocketId).<span class=\"property\">close</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 删除peer对象</span></span><br><span class=\"line\">  <span class=\"title function_\">removeRtcConnect</span>(otherSocketId)</span><br><span class=\"line\">  <span class=\"comment\">// 移除video</span></span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#&#x27;</span> + otherSocketId).<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（4）添加本地音视频流</p>\n<p>当我方开启摄像头后，全局变量<code>localStream</code>就不为<code>null</code>，我们需要往对方塞过去我们的的音视频数据，通过<code>addTrack</code>方法。这样，在对方同意（添加我方描述）后，就可以获取到我方的音视频数据了。</p>\n<h3 id=\"4.3.6-完善逻辑\">4.3.6 完善逻辑<a title=\"#4.3.6-完善逻辑\" href=\"#4.3.6-完善逻辑\"></a></h3>\n<p>前面的内容基本把整个逻辑讲完了，但是你现在启动项目运行，是不是还是只能看到自己，后面的步骤根本没有执行？</p>\n<p>因为前面的我们只打开了摄像头，还没有对接后续操作。</p>\n<p>现在编辑<code>main.js</code>，修改一下之前的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * dom获取</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> btnConnect = $(<span class=\"string\">&#x27;#connect&#x27;</span>); <span class=\"comment\">// 连接dom</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> btnLogout = $(<span class=\"string\">&#x27;#logout&#x27;</span>); <span class=\"comment\">// 挂断dom</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> domLocalVideo = $(<span class=\"string\">&#x27;#localVideo&#x27;</span>); <span class=\"comment\">// 本地视频dom</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> domRoom = $(<span class=\"string\">&#x27;#room&#x27;</span>); <span class=\"comment\">// 获取房间号输入框dom</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 连接</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">btnConnect.<span class=\"title function_\">click</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> roomid = domRoom.<span class=\"title function_\">val</span>(); <span class=\"comment\">// 获取用户输入的房间号</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!roomid) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;房间号不能为空&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//启动摄像头</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (localStream == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">openCamera</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">stream</span> =&gt;</span> &#123;</span><br><span class=\"line\">      localStream = stream; <span class=\"comment\">// 保存本地视频到全局变量</span></span><br><span class=\"line\">      <span class=\"title function_\">pushStreamToVideo</span>(domLocalVideo[<span class=\"number\">0</span>], stream);</span><br><span class=\"line\">      <span class=\"title function_\">connect</span>(roomid); <span class=\"comment\">// 成功打开摄像头后，开始创建或者加入输入的房间号</span></span><br><span class=\"line\">    &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"title function_\">alert</span>(<span class=\"string\">`getUserMedia() error: <span class=\"subst\">$&#123;e.name&#125;</span>`</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 挂断</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">btnLogout.<span class=\"title function_\">click</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">closeCamera</span>(domLocalVideo[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"title function_\">logout</span>(roomId); <span class=\"comment\">// 退出房间</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//移除远程视频</span></span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#remoteDiv&#x27;</span>).<span class=\"title function_\">empty</span>();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>编辑<code>sdk.js</code>，添加<code>logout()</code>方法，监听他人退出房间<code>socket.on('exit')</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 挂断（退出房间）</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; roomid 房间号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">logout</span> = roomid =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构建数据</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">from</span>: socketId, <span class=\"comment\">// 全局变量，我方的socketId</span></span><br><span class=\"line\">    <span class=\"attr\">room</span>: roomid, <span class=\"comment\">// 全局变量，当前房间号</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 向信令服务器发出退出信号，让其转发给房间里的其他用户</span></span><br><span class=\"line\">  socket.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;exit&#x27;</span>, data);</span><br><span class=\"line\">  <span class=\"comment\">// 数据重置</span></span><br><span class=\"line\">  socketId = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  roomId = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 关闭每个peer连接</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> rtcPeerConnects) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pc = rtcPeerConnects[i];</span><br><span class=\"line\">    pc.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">    pc = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 重置RTCPeerConnection连接</span></span><br><span class=\"line\">  rtcPeerConnects = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 移除本地视频</span></span><br><span class=\"line\">  localStream = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 监听signal server转发过来的exit消息，和退出房间的客户端断开连接</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">socket.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;exit&#x27;</span>, <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// data: [from,room]</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;exit: &#x27;</span>, data);</span><br><span class=\"line\">  <span class=\"comment\">// 获取RTCPeerConnection</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> pc = rtcPeerConnects[data.<span class=\"property\">from</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> (pc) == <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// RTCPeerConnection关闭</span></span><br><span class=\"line\">    <span class=\"title function_\">getWebRTCConnect</span>(data.<span class=\"property\">from</span>).<span class=\"property\">close</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除peer对象</span></span><br><span class=\"line\">    <span class=\"title function_\">removeRtcConnect</span>(data.<span class=\"property\">from</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>($(<span class=\"string\">&#x27;#&#x27;</span> + data.<span class=\"property\">from</span>))</span><br><span class=\"line\">    <span class=\"comment\">// 移除video</span></span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#&#x27;</span> + data.<span class=\"property\">from</span>).<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4.3.7-完整代码\">4.3.7 完整代码<a title=\"#4.3.7-完整代码\" href=\"#4.3.7-完整代码\"></a></h3>\n<p><a href=\"https://github.com/Chef5/WebRTC-demo/tree/main/webrtc-client\">https://github.com/Chef5/WebRTC-demo/tree/main/webrtc-client</a></p>\n<h1 id=\"五、总结\">五、总结<a title=\"#五、总结\" href=\"#五、总结\"></a></h1>\n<p>现在，我们已经基本入门WebRTC了。可能前3章的协议、服务器、API的学习让我们感觉很枯燥，知识很杂乱。我想，大家通过第四章的实战开发，将之前的知识点串通起来，是不是有一点感觉了。其实前两章在现在看来，是可以不必着重学习的。没有这些协议和服务器的支持，不懂他们的连接原理，后面的学习应该会更加疑惑吧。</p>\n<p>前面的实战开发，是一个很简单的Web端的例子，没有涉及到安卓、iOS端如何进行WebRTC通信，如果需要继续深入学习，下一步可以往移动端WebRTC上学习，比如移动端打开摄像头都和Web不同。</p>\n<p>如果暂时没有深入WebRTC的学习话，可以基于这个实战项目进行横向的扩展。这个实战项目虽然看起来很简单，但是你可以给它加出很多功能来，会看起来很高大尚！比如：</p>\n<ul>\n<li>在线电话：咱们现在只是通过房间号进行连接，我们可以设置一个登陆页面，将用户的id作为房间号，每个用户登陆后直接创建一个房间。我们想要给某个用户打音视频电话的话，我们可以加入他的房间，对方也能检测到房间是否有人进来，这样对方可以做成收到来电了，对方接听后，我们就进行WebRTC连接，实现拨打电话的功能。</li>\n<li>视频会议：我们开发好注册登录功能，创建会议就相当于创建一个房间，只不过这个房间号是由我们系统来自动分配，别人登录后，通过该房间号就可以加入，即可实现视频会议功能。当然还可以扩展分享屏幕、白板等功能。</li>\n</ul>\n<p>本次<code>WebRTC入门</code>学习到此结束了，非常感谢您耐心地看完本篇长文。若有描述不对的地方，欢迎指出！</p>\n<p>对以下文章、项目和视频的作者们，表示非常感谢！感谢您们辛苦的成果！</p>\n<p>参考文章、文献、规范、项目、视频：</p>\n<blockquote>\n<p>WebRTC协议介绍：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols\">https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols</a></p>\n<p>WebRTC中文社区：<a href=\"https://webrtc.org.cn/\">https://webrtc.org.cn/</a></p>\n<p>RTC开发者社区：<a href=\"https://rtcdeveloper.com/\">https://rtcdeveloper.com/</a></p>\n<p>又拍云WebRTC实时通信服务实践：<a href=\"https://segmentfault.com/a/1190000010339671\">https://segmentfault.com/a/1190000010339671</a></p>\n<p>P2P通信原理：<a href=\"https://zhuanlan.zhihu.com/p/26796476\" target=\"_blank\">https://zhuanlan.zhihu.com/p/26796476</a></p>\n<p>STUN协议详细介绍：<a href=\"https://zhuanlan.zhihu.com/p/26797664\">https://zhuanlan.zhihu.com/p/26797664</a></p>\n<p>TURN协议详细介绍：<a href=\"https://zhuanlan.zhihu.com/p/26797422\">https://zhuanlan.zhihu.com/p/26797422</a></p>\n<p>ICE协议详细介绍：<a href=\"https://zhuanlan.zhihu.com/p/26857913\">https://zhuanlan.zhihu.com/p/26857913</a></p>\n<p>WebRTC PeerConnection建立连接过程：<a href=\"https://aggresss.blog.csdn.net/article/details/106832965\">https://aggresss.blog.csdn.net/article/details/106832965</a></p>\n<p>STUN/TURN服务器（C语言）：<a href=\"https://github.com/coturn/coturn\">https://github.com/coturn/coturn</a></p>\n<p>STUN服务器（node）<a href=\"https://github.com/enobufs/stun\">https://github.com/enobufs/stun</a></p>\n<p>Build Zoom Clone Video Chat Web App in Node.js Express and <a href=\"http://Socket.io\">Socket.io</a> Using WebRTC and PeerJS Library：<a href=\"https://www.youtube.com/watch?v=MX_r3Wm_BLE\">https://www.youtube.com/watch?v=MX_r3Wm_BLE</a></p>\n<p><a href=\"https://codingshiksha.com/javascript/build-zoom-clone-video-chat-web-app-in-node-js-express-and-socket-io-using-webrtc-and-peerjs-library/\">https://codingshiksha.com/javascript/build-zoom-clone-video-chat-web-app-in-node-js-express-and-socket-io-using-webrtc-and-peerjs-library/</a></p>\n<p>Build Video Chat Web App From Scratch in 40 mins：<a href=\"https://www.youtube.com/watch?v=KLCcCTFivhM\">https://www.youtube.com/watch?v=KLCcCTFivhM</a></p>\n<p>coturn服务器搭建：<a href=\"https://www.jianshu.com/p/915eab39476d\">https://www.jianshu.com/p/915eab39476d</a></p>\n<p>coturn服务器搭建：<a href=\"https://meetrix.io/blog/webrtc/coturn/installation.html\">https://meetrix.io/blog/webrtc/coturn/installation.html</a></p>\n<p>coturn服务器搭建：<a href=\"https://ourcodeworld.com/articles/read/1175/how-to-create-and-configure-your-own-stun-turn-server-with-coturn-in-ubuntu-18-04\">https://ourcodeworld.com/articles/read/1175/how-to-create-and-configure-your-own-stun-turn-server-with-coturn-in-ubuntu-18-04</a></p>\n<p>WebRtcRoomServer（信令服务器node）：<a href=\"https://github.com/qdgx/WebRtcRoomServer\">https://github.com/qdgx/WebRtcRoomServer</a></p>\n<p>MDN Web Docs：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API\">https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API</a></p>\n<p>webRTC API之RTCPeerConnection：<a href=\"https://www.cnblogs.com/suRimn/p/11314914.html\">https://www.cnblogs.com/suRimn/p/11314914.html</a></p>\n<p>RTP与RTCP协议介绍：<a href=\"https://blog.51cto.com/zhangjunhd/25481\">https://blog.51cto.com/zhangjunhd/25481</a></p>\n</blockquote>\n","prev":{"title":"前端面试之道","link":"Learning/5febc93b0929"},"next":{"title":"使用Let's Encrypt给node.js项目添加SSL证书","link":"Learning/b06654da20be"},"plink":"https://blog.jschef.com/Learning/eab52ad62fb2/","toc":[{"id":"一、协议","title":"一、协议","index":"1","children":[{"id":"1.1-p2p通信原理与实现","title":"1.1 P2P通信原理与实现","index":"1.1","children":[{"id":"1.1.1-基本术语","title":"1.1.1 基本术语","index":"1.1.1"},{"id":"1.1.2-udp打洞(udp-hole-punching)","title":"1.1.2 UDP打洞(UDP hole punching)","index":"1.1.2"}]},{"id":"1.2-stun协议","title":"1.2 STUN协议","index":"1.2","children":[{"id":"1.2.1-简介","title":"1.2.1 简介","index":"1.2.1"},{"id":"1.2.2-通信过程","title":"1.2.2 通信过程","index":"1.2.2"}]},{"id":"1.3-turn协议","title":"1.3 TURN协议","index":"1.3","children":[{"id":"1.3.1-简介","title":"1.3.1 简介","index":"1.3.1"},{"id":"1.3.2-通信过程","title":"1.3.2 通信过程","index":"1.3.2"}]},{"id":"1.4-ice协议","title":"1.4 ICE协议","index":"1.4","children":[{"id":"1.4.1-简介","title":"1.4.1 简介","index":"1.4.1"},{"id":"1.4.2-sdp会话描述","title":"1.4.2 SDP会话描述","index":"1.4.2"},{"id":"1.4.3-offer/answer模型","title":"1.4.3 Offer&#x2F;Answer模型","index":"1.4.3"},{"id":"1.4.4-ice工作流程","title":"1.4.4 ICE工作流程","index":"1.4.4"}]},{"id":"1.5-经典webrtc连接建立流程","title":"1.5 经典WebRTC连接建立流程","index":"1.5"}]},{"id":"二、服务器搭建","title":"二、服务器搭建","index":"2","children":[{"id":"2.1-stun/turn服务器【可跳过】","title":"2.1 STUN&#x2F;TURN服务器【可跳过】","index":"2.1","children":[{"id":"2.1.1-安装coturn","title":"2.1.1 安装coturn","index":"2.1.1"},{"id":"2.1.2-配置coturn","title":"2.1.2 配置coturn","index":"2.1.2"},{"id":"2.1.3-测试","title":"2.1.3 测试","index":"2.1.3"}]},{"id":"2.2-nodejs构建信令服务器(signal-server)","title":"2.2 Nodejs构建信令服务器(Signal Server)","index":"2.2","children":[{"id":"2.2.1-安装node环境","title":"2.2.1 安装node环境","index":"2.2.1"},{"id":"2.2.2-克隆项目，安装依赖","title":"2.2.2 克隆项目，安装依赖","index":"2.2.2"},{"id":"2.2.3-pm2管理node服务","title":"2.2.3 pm2管理node服务","index":"2.2.3"}]}]},{"id":"三、api学习","title":"三、API学习","index":"3","children":[{"id":"3.1-socket.io","title":"3.1 socket.io","index":"3.1","children":[{"id":"3.1.1-服务器端","title":"3.1.1 服务器端","index":"3.1.1"},{"id":"3.1.2-客户端","title":"3.1.2 客户端","index":"3.1.2"}]},{"id":"3.2-音视频相关api","title":"3.2 音视频相关API","index":"3.2","children":[{"id":"3.2.1-navigator.mediadevices","title":"3.2.1 navigator.mediaDevices","index":"3.2.1"},{"id":"3.2.2-video","title":"3.2.2 video","index":"3.2.2"}]},{"id":"3.3-webrtc","title":"3.3 WebRTC","index":"3.3","children":[{"id":"3.3.1-rtcpeerconnection","title":"3.3.1 RTCPeerConnection","index":"3.3.1"},{"id":"3.3.2-rtcsessiondescription","title":"3.3.2 RTCSessionDescription","index":"3.3.2"},{"id":"3.3.3-rtcicecandidate","title":"3.3.3 RTCIceCandidate","index":"3.3.3"}]}]},{"id":"四、实战开发","title":"四、实战开发","index":"4","children":[{"id":"4.1-环境准备","title":"4.1 环境准备","index":"4.1"},{"id":"4.2-信令服务器","title":"4.2 信令服务器","index":"4.2","children":[{"id":"4.2.1-搭建项目","title":"4.2.1 搭建项目","index":"4.2.1"},{"id":"4.2.2-房间功能","title":"4.2.2 房间功能","index":"4.2.2"},{"id":"4.2.3-转发功能","title":"4.2.3 转发功能","index":"4.2.3"},{"id":"4.2.4-完整代码","title":"4.2.4 完整代码","index":"4.2.4"}]},{"id":"4.3-前端","title":"4.3 前端","index":"4.3","children":[{"id":"4.3.1-搭建项目","title":"4.3.1 搭建项目","index":"4.3.1"},{"id":"4.3.2-兼容预处理","title":"4.3.2 兼容预处理","index":"4.3.2"},{"id":"4.3.3-音视频控制","title":"4.3.3 音视频控制","index":"4.3.3"},{"id":"4.3.4-offer/answer模型","title":"4.3.4 Offer&#x2F;Answer模型","index":"4.3.4"},{"id":"4.3.5-ice连接/接收音视频流","title":"4.3.5 ICE连接&#x2F;接收音视频流","index":"4.3.5"},{"id":"4.3.6-完善逻辑","title":"4.3.6 完善逻辑","index":"4.3.6"},{"id":"4.3.7-完整代码","title":"4.3.7 完整代码","index":"4.3.7"}]}]},{"id":"五、总结","title":"五、总结","index":"5"}],"reward":true,"copyright":{"author":"Chef Wu","link":"<a href=\"https://blog.jschef.com/Learning/eab52ad62fb2/\" title=\"WebRTC实践\">https://blog.jschef.com/Learning/eab52ad62fb2/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"July 28, 2021"}}