{"title":"函数式编程范式","date":"2020-10-13T02:16:47.000Z","date_formatted":{"ll":"Oct 13, 2020","L":"10/13/2020","MM-DD":"10-13"},"thumbnail":"/images/20201013/cover.jpg","link":"Learning/86cd6788d8fb","tags":["JavaScript","编程范式"],"categories":["Learning"],"updated":"2023-11-14T12:07:06.466Z","content":"<p>函数式编程是一种编程范式</p>\n<span id=\"more\"></span>\n<p>讲解视频：<a href=\"https://www.bilibili.com/video/BV1vV411a7kH/\">https://www.bilibili.com/video/BV1vV411a7kH/</a></p>\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n<iframe src=\"//player.bilibili.com/player.html?aid=415349012&bvid=BV1vV411a7kH&cid=255460335&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"> </iframe>\n</div>\n<h1 id=\"一、函数式编程概念\">一、函数式编程概念<a title=\"#一、函数式编程概念\" href=\"#一、函数式编程概念\"></a></h1>\n<h2 id=\"1.1-定义\">1.1 定义<a title=\"#1.1-定义\" href=\"#1.1-定义\"></a></h2>\n<p>函数式编程（Functional Programming: FP）是一种编程范式（指计算机中编程中的典范模式或方法，就是一种思维方式），属于结构化编程，用于描述数据（函数）之间的映射关系。</p>\n<p>特别需要注意的是，函数式编程中的函数不是指程序中的函数（方法），而是数学中的函数（映射关系），如：<code>y = f(x)</code>，指<code>x</code>和<code>y</code>之间的关系。</p>\n<p>常见的编程范式有：过程化（命令式）编程、面向对象编程、声明式编程等。</p>\n<blockquote>\n<p>过程化编程：最原始的传统编程，将问题抽象为一系列步骤，然后通过编程方式将这些步骤转换为程序指令集，这些指令集按照一定顺序排列。人们把支持过程化编程范式的编程语言称为过程化编程语言，常见的有机器语言、汇编语言、BASIC、C、FORTRAN等。过程化语言特别适合解决线性（或者说按部就班）的算法问题。</p>\n</blockquote>\n<blockquote>\n<p>面向对象编程：将待解决问题抽象为面向对象的程序中的对象，利用封装使每个对象都拥有个体的身份。程序就是成堆的对象，彼此通过信息的传递，请求其它对象进行工作。面向对象包括三个基本概念：封装性、继承性、多态性。常见的面向对象语言有Java、C、C++、JavaScript。</p>\n</blockquote>\n<blockquote>\n<p>声明式编程：以数据结构的形式来表达程序执行的逻辑。它的主要思想是告诉计算机应该做什么，但不指定具体要怎么做。SQL 语句就是最明显的一种声明式编程的例子，我们只需要定义好该如何处理数据，不需要指定具体实现，就可以查询到我们需要的数据。</p>\n</blockquote>\n<p>现代编程语言的发展趋势是支持多种范式，如C#、Java 8+、Kotlin、ES6+。</p>\n<p><strong>编程范式和设计模式的区别</strong>：</p>\n<ul>\n<li>编程范式：是指从事软件工程的一类典型的编程风格（此概念好比“战略”），体现编写程序的人如何看待程序设计的“哲学观”；</li>\n<li>程序设计模式：设计模式是软件设计中常见问题的典型解决方案（此概念好比“战术”），是解决一系列实际问题的“方法学”。</li>\n</ul>\n<h2 id=\"1.2-特性\">1.2 特性<a title=\"#1.2-特性\" href=\"#1.2-特性\"></a></h2>\n<ol>\n<li>\n<p>代码简洁：函数式编程使用了大量的函数，减少了代码的重复；</p>\n</li>\n<li>\n<p>接近自然语言，易于理解：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = （<span class=\"number\">1</span> + <span class=\"number\">2</span>）* <span class=\"number\">3</span> - <span class=\"number\">4</span>; <span class=\"comment\">// 普通表达式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">subtract</span>(<span class=\"title function_\">multiply</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"number\">3</span>), <span class=\"number\">4</span>); <span class=\"comment\">// 函数式编程</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数是“第一等公民”：函数与其他数据类型一样，处于平等地位，可以赋值给其它变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值；</p>\n</li>\n<li>\n<p>闭包和高阶函数：函数式编程会使用较多的闭包和高阶函数；</p>\n</li>\n<li>\n<p>没有“副作用”，方便与代码管理和单元测试：<code>副作用</code> 指函数内部与外部互动(最典型的情况，就是修改全局变量量的 值)，产⽣运算以外的其他结果。函数式编程强调没有&quot;副作用&quot;，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他⾏为，尤其是不得修改外部变量的值；</p>\n</li>\n<li>\n<p>引用透明：函数的运行不依赖于外部变量或&quot;状态&quot;，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。</p>\n</li>\n</ol>\n<h2 id=\"1.3-基本概念\">1.3 基本概念<a title=\"#1.3-基本概念\" href=\"#1.3-基本概念\"></a></h2>\n<p>①函数式编程的思维方式：</p>\n<p>把现实世界的事物和事物之间的联系（映射关系）抽象到程序世界（对运算过程进行抽象）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 比如买单价为0.5元的白菜，买了两斤，需要支付多少块钱（白菜与货币的联系）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> money = <span class=\"title function_\">multiply</span>(<span class=\"number\">0.5</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 即两斤白菜 -&gt; 1元（money）</span></span><br></pre></td></tr></table></figure>\n<p>②程序的本质：</p>\n<p>根据输入通过某种运算获得相应的输出，程序开发过程中会涉及很多有输入和输出的函数。</p>\n<p>③函数<code>y = f(x)</code>：</p>\n<p>x → f(映射) → y</p>\n<p>图1 从x到y的函数关系</p>\n<p><img src=\"/images/20201013/1652dd18eb23b0d6.jpg\" alt=\"image\" class=\"φbs\"></p>\n<p>图2 从x到y不是函数关系</p>\n<p><img src=\"/images/20201013/1652dd18eb0bd7f6.jpg\" alt=\"image\" class=\"φbs\"></p>\n<p>④纯函数：相同的输入始终要得到相同的输出</p>\n<p>⑤函数式编程是用来描述数据（函数）之间的映射</p>\n<h2 id=\"1.4-学习指南\">1.4 学习指南<a title=\"#1.4-学习指南\" href=\"#1.4-学习指南\"></a></h2>\n<p>函数式编程范式只是一种对程序编程思维的一种概论，而具体的实现则通过柯里化（第5章）、函数组合（第6章）、函子等来实现。</p>\n<p>在学习如何实现前，需要先了解三个小知识点：头等函数（第2章），闭包（第3章），纯函数（第4章）。</p>\n<h1 id=\"二、头等函数\">二、头等函数<a title=\"#二、头等函数\" href=\"#二、头等函数\"></a></h1>\n<h2 id=\"2.1-函数是一等公民\">2.1 函数是一等公民<a title=\"#2.1-函数是一等公民\" href=\"#2.1-函数是一等公民\"></a></h2>\n<p>函数是一等公民？通俗来讲在某些编程语言中，函数是不能够：</p>\n<ul>\n<li>函数可以存储在变量中</li>\n<li>函数可以作为参数（2.2.1）</li>\n<li>函数可以作为返回值（2.2.2）</li>\n</ul>\n<p>JavaScript对待不同的数据结构具有同等级别的支持，函数可以享受以上几种待遇，所以在JavaScript中，函数是一等公民。</p>\n<p>函数可以存储在变量中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 把函数赋值给变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fn</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2.1 函数可以存储在变量中&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 属性赋值示例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> objController = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getKeys</span>(<span class=\"params\">obj</span>) &#123; <span class=\"comment\">// ES6属性简写，等同于getKeys: getKeys(obj)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 优化：上面代码中getKeys方法和内部调用Object.keys方法的参数和返回值一样，所以可以改写成下面</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> objController = &#123;</span><br><span class=\"line\">  <span class=\"attr\">getKeys</span>: <span class=\"title class_\">Object</span>.<span class=\"property\">keys</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(objController);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> my = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Patrick Jun&#x27;</span>, <span class=\"attr\">constellation</span>: <span class=\"string\">&#x27;Virgo&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(objController.<span class=\"title function_\">getKeys</span>(my));</span><br></pre></td></tr></table></figure>\n<h2 id=\"2.2-高阶函数\">2.2 高阶函数<a title=\"#2.2-高阶函数\" href=\"#2.2-高阶函数\"></a></h2>\n<p>如果一个函数以下面任一方式使用，那么这个函数就可以称为高阶函数。</p>\n<ul>\n<li>参数是一个函数</li>\n<li>返回值是一个函数</li>\n</ul>\n<blockquote>\n<p>Patrick Jun：可以操作函数的函数就是高阶函数。这就跟高数里的求导（二阶及以上的求导称之为高阶求导）一样，可以对已导函数的求导就是高阶求导。</p>\n</blockquote>\n<h3 id=\"2.2.1-函数作为参数\">2.2.1 函数作为参数<a title=\"#2.2.1-函数作为参数\" href=\"#2.2.1-函数作为参数\"></a></h3>\n<p>将函数作为参数最常见的就是咱们经常用的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历（模拟数组的forEach方法）</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">forEach</span>(<span class=\"params\">arr, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>(arr[i], i); <span class=\"comment\">// 将每一项传入回调fn处理</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 筛选，返回符合条件的元素组成的新数组</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">filter</span>(<span class=\"params\">arr, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> results = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">fn</span>(item)) &#123;</span><br><span class=\"line\">      results.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> colors = [<span class=\"string\">&#x27;#FF0000&#x27;</span>, <span class=\"string\">&#x27;#00FF00&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>];</span><br><span class=\"line\"><span class=\"title function_\">forEach</span>(colors, <span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index + <span class=\"number\">1</span>, item);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">  <span class=\"title function_\">filter</span>(colors, <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.<span class=\"property\">length</span> === <span class=\"number\">7</span>),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2.2.2-函数作为返回值\">2.2.2 函数作为返回值<a title=\"#2.2.2-函数作为返回值\" href=\"#2.2.2-函数作为返回值\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">makeFn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> msg = <span class=\"string\">&#x27;hello function&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(msg);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"title function_\">makeFn</span>(); <span class=\"comment\">// makeFn()执行后返回一个匿名函数，赋值给fn</span></span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"comment\">// makeFn()()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模拟lodash中的once函数 对一个函数只执行一次的函数(例如支付,不管用户点击多少次按钮，都只执行一次)</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">once</span>(<span class=\"params\">func</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> done = <span class=\"literal\">false</span>; <span class=\"comment\">// 定义一个状态done，判断是否已执行支付</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!done) &#123;</span><br><span class=\"line\">      done = <span class=\"literal\">true</span>; <span class=\"comment\">// 更改闭包作用域中的done为已支付</span></span><br><span class=\"line\">      func.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pay = <span class=\"title function_\">once</span>(<span class=\"function\">(<span class=\"params\">money</span>) =&gt;</span> &#123;  <span class=\"comment\">// 传入一个函数，通过输出模拟支付过程和结果</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`支付<span class=\"subst\">$&#123;money&#125;</span>元`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title function_\">pay</span>(<span class=\"number\">20</span>);  <span class=\"comment\">// 支付20元</span></span><br><span class=\"line\"><span class=\"title function_\">pay</span>(<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"title function_\">pay</span>(<span class=\"number\">40</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2.2.3-使用高阶函数意义\">2.2.3 使用高阶函数意义<a title=\"#2.2.3-使用高阶函数意义\" href=\"#2.2.3-使用高阶函数意义\"></a></h3>\n<ul>\n<li>\n<p><strong>抽象可以帮我们屏蔽细节，只需要关注我们的目标</strong></p>\n<p>比如前面的例子：不用在乎如何遍历，只需要关注我们怎么出处理数据。不用在乎用户会不会多次点击，只需要关注如何处理支付后的流程。</p>\n</li>\n<li>\n<p><strong>高阶函数用来抽象通用的问题</strong></p>\n<p>比如前面抽象遍历问题</p>\n</li>\n</ul>\n<h3 id=\"2.2.4-常用高阶函数模拟\">2.2.4 常用高阶函数模拟<a title=\"#2.2.4-常用高阶函数模拟\" href=\"#2.2.4-常用高阶函数模拟\"></a></h3>\n<ul>\n<li>map 通过指定函数处理数组的每个元素，并返回处理后的数组。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">map</span>(<span class=\"params\">arr, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> val <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(<span class=\"title function_\">fn</span>(val)); <span class=\"comment\">// 将回调fn()处理好的元素存入新数组</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr = <span class=\"title function_\">map</span>(arr, <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item * item);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr); <span class=\"comment\">//[ 1, 4, 9, 16, 25 ]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>every 用于检测数组所有元素是否都符合指定条件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">every</span>(<span class=\"params\">arr, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">true</span>; <span class=\"comment\">// 定义一个flag</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> val <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">    res = <span class=\"title function_\">fn</span>(val); <span class=\"comment\">// fn判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!res) &#123; <span class=\"comment\">// 只要有一个元素不满足，就结束循环</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res1 = <span class=\"title function_\">every</span>(arr1, <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item &gt; <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res1);  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> res2 = <span class=\"title function_\">every</span>(arr2, <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item &gt; <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res2);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>some 判断数组中是否至少有一个元素满足条件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">some</span>(<span class=\"params\">arr, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">false</span>; <span class=\"comment\">// 定义一个flag</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> val <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">    res = <span class=\"title function_\">fn</span>(val); <span class=\"comment\">// fn判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res) &#123; <span class=\"comment\">// 只要有一个元素满足，就结束循环</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res1 = <span class=\"title function_\">some</span>(arr1, <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item % <span class=\"number\">2</span> === <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res1);  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> res2 = <span class=\"title function_\">some</span>(arr2, <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item % <span class=\"number\">2</span> === <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res2);  <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>find 返回数组中满足提供的测试函数的第一个元素的值，如果未找到，则返回undefined</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">find</span>(<span class=\"params\">arr, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">fn</span>(item)) &#123; <span class=\"comment\">// 找到满足条件的第一个元素</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>; <span class=\"comment\">// 未找到返回undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res1 = <span class=\"title function_\">find</span>(arr1, <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item % <span class=\"number\">2</span> === <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res1);  <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> res2 = <span class=\"title function_\">find</span>(arr1, <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item === <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res2);  <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>findIndex 找到满足条件的第一个元素，返回其位置，如果未找到，则返回-1</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findIndex</span>(<span class=\"params\">arr, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">fn</span>(arr[i])) &#123; <span class=\"comment\">// 找到满足条件的第一个元素位置</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> -<span class=\"number\">1</span>; <span class=\"comment\">// 未找到返回-1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res1 = <span class=\"title function_\">findIndex</span>(arr1, <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item % <span class=\"number\">2</span> === <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res1);  <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> res2 = <span class=\"title function_\">findIndex</span>(arr1, <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item === <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res2);  <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"三、闭包\">三、闭包<a title=\"#三、闭包\" href=\"#三、闭包\"></a></h1>\n<h1 id=\"3.1-定义\">3.1 定义<a title=\"#3.1-定义\" href=\"#3.1-定义\"></a></h1>\n<p>函数和其周围的状态的引用捆绑在一起形成的闭包。</p>\n<ul>\n<li>可以在另一个作用域中调用一个函数内部的函数并访问到该函数的作用域中的成员；</li>\n<li>闭包的本质：函数在执行的时候会放到一个执行栈上，当函数执行完毕后会从执行栈上删除，<strong>但是堆上作用域成员因为被外部引用而不能被释放</strong>，因此内部函数依然可以访问到作用域的成员；</li>\n</ul>\n<p>特性：</p>\n<ul>\n<li>\n<p>函数嵌套函数（高阶函数）</p>\n</li>\n<li>\n<p>函数内部可以引用函数外部的参数和变量</p>\n</li>\n<li>\n<p>参数和变量不会被垃圾回收机制回收</p>\n</li>\n</ul>\n<h2 id=\"3.2-案例\">3.2 案例<a title=\"#3.2-案例\" href=\"#3.2-案例\"></a></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">makePower</span>(<span class=\"params\">power</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number ** power;  <span class=\"comment\">// number为底数，power为指数</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 平方：number**2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> power2 = <span class=\"title function_\">makePower</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 立方：number**3</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> power3 = <span class=\"title function_\">makePower</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">power2</span>(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">power2</span>(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">power3</span>(<span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">makeSalary</span>(<span class=\"params\">base</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">performance</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> base + performance;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 底层打工人</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> level1 = <span class=\"title function_\">makeSalary</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 高级打工人</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> level2 = <span class=\"title function_\">makeSalary</span>(<span class=\"number\">10000</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">level1</span>(<span class=\"number\">100</span>));  <span class=\"comment\">// 1100</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">level1</span>(<span class=\"number\">120</span>));  <span class=\"comment\">// 1120</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">level2</span>(<span class=\"number\">30000</span>));  <span class=\"comment\">// 40000</span></span><br></pre></td></tr></table></figure>\n<p>打开Chrome开发者工具 &gt; Sources ：</p>\n<ul>\n<li>Call Stack(函数调用栈)</li>\n<li>Scope(作用域) ： Global(var 全局) 、 Local(局部) 、 Closure(闭包) 、 Script(let 作用域)</li>\n</ul>\n<blockquote>\n<p>仅看一看演示一下，具体细节之后专门分享 ^_^</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查看函数栈和闭包作用域成员的访问</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">makeSalary</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> base = <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">performance</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// debugger;</span></span><br><span class=\"line\">    base += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> base + performance;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sallary = <span class=\"title function_\">makeSalary</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sallary</span>(<span class=\"number\">100</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sallary</span>(<span class=\"number\">200</span>));</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、纯函数\">四、纯函数<a title=\"#四、纯函数\" href=\"#四、纯函数\"></a></h1>\n<h2 id=\"4.1-概念\">4.1 概念<a title=\"#4.1-概念\" href=\"#4.1-概念\"></a></h2>\n<p><strong>相同的输入永远会等到相同的输出</strong>，没有任何可观察的副作用</p>\n<ul>\n<li>slice 和 splice 分别：纯函数和不纯函数</li>\n<li>slice 返回数组中的指定部分，不会改变原数组</li>\n<li>splice 对数组进行操作返回该数组，会改变原数组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 纯函数 slice(start, end)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(numbers.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// [ 1, 2, 3 ]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(numbers.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// [ 1, 2, 3 ]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(numbers.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// [ 1, 2, 3 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不纯函数 splice(index, howmany, ...items)</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(numbers.<span class=\"title function_\">splice</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// [ 1, 2, 3 ]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(numbers.<span class=\"title function_\">splice</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// [ 4, 5 ]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(numbers.<span class=\"title function_\">splice</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最简单的纯函数示例</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getSum</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getSum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getSum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getSum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4.2-lodash\">4.2 lodash<a title=\"#4.2-lodash\" href=\"#4.2-lodash\"></a></h2>\n<p>官网：<a href=\"http://lodash.com/\" target=\"_blank\">lodash</a><br>\nlodash是一个纯函数的功能库，提供了对数组、数字、对象、字符串、函数等操作的一些方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;Tom&#x27;</span>, <span class=\"string\">&#x27;Jon&#x27;</span>, <span class=\"string\">&#x27;Kate&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(_.<span class=\"title function_\">first</span>(arr));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(_.<span class=\"title function_\">last</span>(arr));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(_.<span class=\"title function_\">toUpper</span>(_.<span class=\"title function_\">last</span>(arr)));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(_.<span class=\"title function_\">reverse</span>(arr));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(_.<span class=\"title function_\">first</span>(arr));</span><br><span class=\"line\"></span><br><span class=\"line\">_.<span class=\"title function_\">each</span>(arr, <span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> value = [];</span><br><span class=\"line\">_.<span class=\"title function_\">isEmpty</span>(value); <span class=\"comment\">// 判断一个value 是否是empty(null,[],&#123;&#125;....)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4.3-纯函数的好处\">4.3 纯函数的好处<a title=\"#4.3-纯函数的好处\" href=\"#4.3-纯函数的好处\"></a></h2>\n<ul>\n<li>可缓存：因为纯函数相同的输入永远会等到相同的输出，所以可以把纯函数结果缓存</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 记忆函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getArea</span>(<span class=\"params\">r</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`执行getArea计算，r = <span class=\"subst\">$&#123;r&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * r * r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里使用lodash中的记忆函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getAreaWithMemory = _.<span class=\"title function_\">memoize</span>(getArea);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getAreaWithMemory</span>(<span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getAreaWithMemory</span>(<span class=\"number\">4</span>)); <span class=\"comment\">// 不会再次计算</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getAreaWithMemory</span>(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js模拟 memoize 方法的实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">memoize</span>(<span class=\"params\">f</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cache = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    cache[key] = cache[key] || f.<span class=\"title function_\">apply</span>(f, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache[key];</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getAreaWithMemory = <span class=\"title function_\">memoize</span>(getArea);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getAreaWithMemory</span>(<span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getAreaWithMemory</span>(<span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getAreaWithMemory</span>(<span class=\"number\">5</span>));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可测试：纯函数让测试更加方便，对单元化测试很友好</li>\n<li>并行处理：在多线程环境下并行操作共享的内存数据很可能会出现意外情况，纯函数不需要访问共享的内存数据，所以在并行环境下可以任意运行纯函数（Web Worker）</li>\n</ul>\n<h2 id=\"4.4-副作用\">4.4 副作用<a title=\"#4.4-副作用\" href=\"#4.4-副作用\"></a></h2>\n<p>纯函数：指<strong>相同的输入永远会得到相同的输出</strong>，而且没有可观察的<strong>副作用</strong>，而副作用让一个函数变的不纯，纯函数根据相同的输入返回相同的输出，如果函数依赖于外部的状态就无法保证输出相同，就会带来副作用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不纯的函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> min = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkAge</span>(<span class=\"params\">age</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= min; <span class=\"comment\">// 依赖外部的min状态</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 纯函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkAge2</span>(<span class=\"params\">age</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = <span class=\"number\">18</span>; <span class=\"comment\">// 硬编码，可通过闭包或者柯里化解决</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= min;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>副作用的来源：</p>\n<ul>\n<li>\n<p>配置文件</p>\n</li>\n<li>\n<p>数据库</p>\n</li>\n<li>\n<p>获取用户的输入：</p>\n<p>所有的外部交互都有可能带来副作用，副作用也会使方法通用性下降、不适合扩展，同时副作用会给程序中带来安全隐患给程序员带来不确定性，但是副作用不可能完全禁止，尽可能控制他们在可控范围内发生。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有副作用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = $(<span class=\"string\">&#x27;.input-1&#x27;</span>).<span class=\"title function_\">val</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = $(<span class=\"string\">&#x27;.input-2&#x27;</span>).<span class=\"title function_\">val</span>();</span><br><span class=\"line\">  result = a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &lt;button onclick=&quot;sum()&quot;&gt;求和&lt;/button&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 避免副作用</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$(<span class=\"string\">&#x27;button&#x27;</span>).<span class=\"title function_\">bind</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = $(<span class=\"string\">&#x27;.input-1&#x27;</span>).<span class=\"title function_\">val</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = $(<span class=\"string\">&#x27;.input-2&#x27;</span>).<span class=\"title function_\">val</span>();</span><br><span class=\"line\">  result = <span class=\"title function_\">sum</span>(a, b);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// &lt;button&gt;求和&lt;/button&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"五、柯里化\">五、柯里化<a title=\"#五、柯里化\" href=\"#五、柯里化\"></a></h1>\n<p>柯里化（curry：咖喱）可以把多元函数转化成一元函数</p>\n<ul>\n<li>当一个函数有多个参数的时候，先传递一部分参数调用它（这部分参数以后永远不变）</li>\n<li>然后返回一个新的函数接受剩余的参数，直达参数接收完毕才返回结果</li>\n</ul>\n<h2 id=\"5.1-柯里化示例(问题回顾)\">5.1 柯里化示例(问题回顾)<a title=\"#5.1-柯里化示例(问题回顾)\" href=\"#5.1-柯里化示例(问题回顾)\"></a></h2>\n<p>解决上面硬编码问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 普通纯函数的方式解决</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkAge</span>(<span class=\"params\">age, min</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age &gt;= min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">checkAge</span>(<span class=\"number\">20</span>, <span class=\"number\">18</span>));  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">checkAge</span>(<span class=\"number\">17</span>, <span class=\"number\">18</span>));  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">checkAge</span>(<span class=\"number\">24</span>, <span class=\"number\">22</span>));  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码可以发现当基准值时<code>18</code>时，<code>18</code>是重复的 使用之前所学的闭包处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 闭包的方式解决（简单的柯里化）</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkAge</span>(<span class=\"params\">min</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">age</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> age &gt;= min;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> checkAge18 = <span class=\"title function_\">checkAge</span>(<span class=\"number\">18</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> checkAge22 = <span class=\"title function_\">checkAge</span>(<span class=\"number\">22</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">checkAge18</span>(<span class=\"number\">17</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">checkAge18</span>(<span class=\"number\">20</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">checkAge22</span>(<span class=\"number\">20</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">checkAge22</span>(<span class=\"number\">30</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>使用ES6改造上面<code>checkAge</code>函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">checkAge</span> = min =&gt; <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> age &gt;= min;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5.2-lodash.curry(fn)\">5.2 lodash.curry(fn)<a title=\"#5.2-lodash.curry(fn)\" href=\"#5.2-lodash.curry(fn)\"></a></h2>\n<ul>\n<li>_.curry(fn)\n<ul>\n<li>文档：<a href=\"https://www.lodashjs.com/docs/lodash.curry\" target=\"_blank\">https://www.lodashjs.com/docs/lodash.curry</a></li>\n<li>功能：创建一个函数，该函数接受fn的参数。如果fn所需的参数都被提供则执行fn并返回结果，否则<strong>继续返回该函数并等待接收剩余的参数</strong>。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>需要注意：传参先后顺序不能变</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getSum</span>(<span class=\"params\">a, b, c</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b + c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> curried = _.<span class=\"title function_\">curry</span>(getSum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curried</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));  <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curried</span>(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>));  <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curried</span>(<span class=\"number\">2</span>)(<span class=\"number\">3</span>, <span class=\"number\">4</span>));  <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curried</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>)(<span class=\"number\">4</span>));  <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>案例</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> match = _.<span class=\"title function_\">curry</span>(<span class=\"function\">(<span class=\"params\">reg, str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">match</span>(reg);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配所有数字</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hasSpace = <span class=\"title function_\">match</span>(<span class=\"regexp\">/\\s+/g</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配所有空白字符</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hasNumber = <span class=\"title function_\">match</span>(<span class=\"regexp\">/\\d+/g</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">hasSpace</span>(<span class=\"string\">&#x27;helloword&#x27;</span>)); <span class=\"comment\">// null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">hasNumber</span>(<span class=\"string\">&#x27;123213 123&#x27;</span>)); <span class=\"comment\">// [&quot;123213&quot;, &quot;123&quot;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">hasNumber</span>(<span class=\"string\">&#x27;helloword&#x27;</span>)); <span class=\"comment\">// null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再扩展：筛选数组中指定条件的元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> filter = _.<span class=\"title function_\">curry</span>(<span class=\"function\">(<span class=\"params\">func, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array.<span class=\"title function_\">filter</span>(func);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">filter</span>(hasSpace, [<span class=\"string\">&#x27;Patrick Jun&#x27;</span>, <span class=\"string\">&#x27;Patrick_Jun&#x27;</span>])); <span class=\"comment\">// [&quot;Patrick Jun&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分步使用 = filter(hasSpace)([&#x27;Patrick Jun&#x27;, &#x27;Patrick_Jun&#x27;])</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> findSpace = <span class=\"title function_\">filter</span>(hasSpace);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">findSpace</span>([<span class=\"string\">&#x27;Patrick Jun&#x27;</span>, <span class=\"string\">&#x27;Patrick_Jun&#x27;</span>])); <span class=\"comment\">// [&quot;Patrick Jun&quot;]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>模拟lodash中的curry方法</p>\n<p>小知识点：<code>fn = (a, b, c, d, e) =&gt; &#123;&#125;;</code>，那么<code>fn.length = 5</code>;</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry</span>(<span class=\"params\">func</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">curriedFn</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断形参和实参的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.<span class=\"property\">length</span> &lt; func.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将...args与...arguments拼接传递给curriedFn</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">curriedFn</span>(...args, ...<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">func</span>(...args);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getSum</span>(<span class=\"params\">a, b, c</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> curried = <span class=\"title function_\">curry</span>(getSum);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curried</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>)(<span class=\"number\">4</span>)); <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curried</span>(<span class=\"number\">2</span>)(<span class=\"number\">3</span>, <span class=\"number\">4</span>)); <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n<p>图解步骤：</p>\n<p><img src=\"/images/20201013/curry.jpg\" alt=\"image\" class=\"φbs\"></p>\n<h2 id=\"5.3-总结\">5.3 总结<a title=\"#5.3-总结\" href=\"#5.3-总结\"></a></h2>\n<ul>\n<li>柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数</li>\n<li>这是一种对函数参数的“缓存”（闭包）</li>\n<li>让函数变的更灵活，让函数的粒度更小</li>\n<li>可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能</li>\n</ul>\n<h1 id=\"六、函数组合\">六、函数组合<a title=\"#六、函数组合\" href=\"#六、函数组合\"></a></h1>\n<h2 id=\"6.1-概念\">6.1 概念<a title=\"#6.1-概念\" href=\"#6.1-概念\"></a></h2>\n<p>函数组合(compose)：如果一个函数要经过多个函数处理才能得到最终值，这个时候可以把中间过程的函数合并成一个函数。</p>\n<ul>\n<li>函数就像是数据的管道，函数组合就是把这些管道连接起来，让数据穿过多个管道形成最终结果</li>\n<li><strong>函数组合默认是从右到左执行</strong></li>\n<li>函数组合后只接受一个参数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数组合演示</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array.<span class=\"title function_\">reverse</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">first</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">compose</span>(<span class=\"params\">f, g</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">f</span>(<span class=\"title function_\">g</span>(value));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> last = <span class=\"title function_\">compose</span>(first, reverse);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">last</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6.2-lodash组合函数\">6.2 lodash组合函数<a title=\"#6.2-lodash组合函数\" href=\"#6.2-lodash组合函数\"></a></h2>\n<h2 id=\"6.2-lodash组合函数-1\">6.2 lodash组合函数<a title=\"#6.2-lodash组合函数-1\" href=\"#6.2-lodash组合函数-1\"></a></h2>\n<p>lodash中组合函数<code>flow()</code>或者<code>flowRight()</code>，他们都可以组合多个函数</p>\n<p><code>flow</code>和<code>flowRight</code>会创建一个函数，返回结果是调用提供函数的结果。提供函数会连续调用，每个提供函数传入的参数都是前一个函数返回的结果。</p>\n<ul>\n<li><code>flow()</code>是从左到右运行</li>\n<li><code>flowRight()</code>是从右到左运行，使用的更多一些</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reverse</span> = (<span class=\"params\">arr</span>) =&gt; arr.<span class=\"title function_\">reverse</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">first</span> = (<span class=\"params\">arr</span>) =&gt; arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">toUpper</span> = (<span class=\"params\">s</span>) =&gt; s.<span class=\"title function_\">toUpperCase</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = _.<span class=\"title function_\">flowRight</span>(toUpper, first, reverse);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>([<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>]));  <span class=\"comment\">// ???</span></span><br></pre></td></tr></table></figure>\n<p>模拟<code>lodash</code>中的<code>flowRight()</code>方法：</p>\n<ul>\n<li>数组中的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\">reduce()</a> ：对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">compose</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args.<span class=\"title function_\">reverse</span>().<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>(acc);</span><br><span class=\"line\">    &#125;, val);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"comment\">// const compose = (...args) =&gt; (val) =&gt; args.reverse().reduce((acc, fn) =&gt; fn(acc), val);</span></span><br></pre></td></tr></table></figure>\n<p>图解步骤：</p>\n<p><img src=\"/images/20201013/20201102142854.png\" alt=\"20201102142854.png\" class=\"φbs\"></p>\n<h2 id=\"6.3-结合律\">6.3 结合律<a title=\"#6.3-结合律\" href=\"#6.3-结合律\"></a></h2>\n<p>函数的组合要满足结合律。</p>\n<p>例如<code>compose(f,g,h)</code>，我们既可以先把<code>f</code>和<code>g</code>组合在一起，还可以先把<code>g</code>和<code>h</code>组合：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">compose</span>(<span class=\"title function_\">compose</span>(f, g), h) == <span class=\"title function_\">compose</span>(f, <span class=\"title function_\">compose</span>(g, h))); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">compose</span>(f, g, h) == <span class=\"title function_\">compose</span>(f, <span class=\"title function_\">compose</span>(g, h))); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 下面三种写法结果运行一样</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = _.<span class=\"title function_\">flowRight</span>(_.<span class=\"title function_\">flowRight</span>(_.<span class=\"property\">toUpper</span>, _.<span class=\"property\">first</span>), _.<span class=\"property\">reverse</span>); <span class=\"comment\">// 前两个组合</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> f1 = _.<span class=\"title function_\">flowRight</span>(_.<span class=\"property\">toUpper</span>, _.<span class=\"title function_\">flowRight</span>(_.<span class=\"property\">first</span>, _.<span class=\"property\">reverse</span>)); <span class=\"comment\">// 后两个组合</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> f2 = _.<span class=\"title function_\">flowRight</span>(_.<span class=\"property\">toUpper</span>, _.<span class=\"property\">first</span>, _.<span class=\"property\">reverse</span>); <span class=\"comment\">// 不组合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>([<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>]) === <span class=\"title function_\">f1</span>([<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>])); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>([<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>]) === <span class=\"title function_\">f2</span>([<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>])); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f1</span>([<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>]) === <span class=\"title function_\">f2</span>([<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>])); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6.4-实战\">6.4 实战<a title=\"#6.4-实战\" href=\"#6.4-实战\"></a></h2>\n<p>题目：将<code>NEVER SAY DIE</code> 转换为 <code>never-say-die</code>;</p>\n<p>思路：小写，分割，join</p>\n<p><code>'NEVER SAY DIE'.toLowerCase().split(' ').join('-');</code></p>\n<p>分析：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一步：_.toLower()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二步：_.split()</span></span><br><span class=\"line\"><span class=\"comment\">// 因为我们需要传入str变量，所以str放在最后面传入，以下同理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> split = _.<span class=\"title function_\">curry</span>(<span class=\"function\">(<span class=\"params\">symbol, str</span>) =&gt;</span> _.<span class=\"title function_\">split</span>(str, symbol));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三步：._join</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> join = _.<span class=\"title function_\">curry</span>(<span class=\"function\">(<span class=\"params\">symbol, array</span>) =&gt;</span> _.<span class=\"title function_\">join</span>(array, symbol));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// log用来检测数据管道中，哪部分值有错误</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">log</span> = (<span class=\"params\">v</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v);</span><br><span class=\"line\">  <span class=\"comment\">// 继续返回值给下一个fn</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = _.<span class=\"title function_\">flowRight</span>(<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;-&#x27;</span>), log, <span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>), log, _.<span class=\"property\">toLower</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>(<span class=\"string\">&#x27;NEVER SAY DIE&#x27;</span>)); <span class=\"comment\">// never-say-die</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // 考虑到数据管道很长的情况，如果多次log，打印的数据不够直观，于是改造log</span></span><br><span class=\"line\"><span class=\"comment\">// const _ = require(&#x27;lodash&#x27;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const trace = _.curry((tag, v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(tag, v);</span></span><br><span class=\"line\"><span class=\"comment\">//   return v;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const split = _.curry((symbol, str) =&gt; _.split(str, symbol));</span></span><br><span class=\"line\"><span class=\"comment\">// const join = _.curry((symbol, arr) =&gt; _.join(arr, symbol));</span></span><br><span class=\"line\"><span class=\"comment\">// const f = _.flowRight(join(&#x27;-&#x27;), trace(&#x27;after split：&#x27;), split(&#x27; &#x27;), trace(&#x27;after toLower：&#x27;), _.toLower);</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(f(&#x27;NEVER SAY DIE&#x27;));</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6.5-lodash/fp\">6.5 lodash/fp<a title=\"#6.5-lodash/fp\" href=\"#6.5-lodash/fp\"></a></h2>\n<p><a href=\"https://github.com/lodash/lodash/wiki/FP-Guide\" target=\"_blank\">lodash/fp</a></p>\n<p>The <code>lodash/fp</code> module promotes a more <a href=\"https://en.wikipedia.org/wiki/Functional_programming\" target=\"_blank\">functional programming</a> (FP) friendly style by exporting an instance of <code>lodash</code> with its methods wrapped to produce immutable auto-curried iteratee-first data-last methods.</p>\n<ul>\n<li>\n<p>lodash中的fp模块提供了实用的对<strong>函数式编程友好的方法</strong></p>\n</li>\n<li>\n<p>提供了不可变<strong>auto-curried(自动柯里化) iteratee-first data-last</strong>的方法</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lodash 模块  数据优先 函数滞后</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">_.<span class=\"title function_\">map</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>], _.<span class=\"property\">toUpper</span>); <span class=\"comment\">// [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</span></span><br><span class=\"line\">_.<span class=\"title function_\">map</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]); <span class=\"comment\">// [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</span></span><br><span class=\"line\">_.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;Hello World&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>); <span class=\"comment\">// [&quot;Hello&quot;, &quot;World&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash/fp&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fp.<span class=\"title function_\">map</span>(fp.<span class=\"property\">toUpper</span>, [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]); <span class=\"comment\">// [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</span></span><br><span class=\"line\">fp.<span class=\"title function_\">map</span>(fp.<span class=\"property\">toUpper</span>)([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]); <span class=\"comment\">// [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</span></span><br><span class=\"line\">fp.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;Hello World&#x27;</span>); <span class=\"comment\">// [&quot;Hello&quot;, &quot;World&quot;]</span></span><br><span class=\"line\">fp.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>)(<span class=\"string\">&#x27;Hello World&#x27;</span>); <span class=\"comment\">// [&quot;Hello&quot;, &quot;World&quot;]</span></span><br></pre></td></tr></table></figure>\n<p>上面代码可以看出，<a href=\"https://link.zhihu.com/?target=https%3A//www.lodashjs.com/\" target=\"_blank\">lodash</a>方法<strong>数据优先 函数滞后</strong> ，而<a href=\"https://link.zhihu.com/?target=https%3A//github.com/lodash/lodash/wiki/FP-Guide\" target=\"_blank\">lodash/fp</a>模块方法 <strong>函数优先 数据滞后</strong> 使用<a href=\"https://link.zhihu.com/?target=https%3A//github.com/lodash/lodash/wiki/FP-Guide\" target=\"_blank\">lodash/fp</a>改造之前写的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash/fp&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = fp.<span class=\"title function_\">flowRight</span>(fp.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;-&#x27;</span>), fp.<span class=\"title function_\">map</span>(fp.<span class=\"property\">toLower</span>), fp.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>(<span class=\"string\">&#x27;NEVER SAY DIE&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<p><strong>map方法的区别</strong>：</p>\n<ul>\n<li>lodash中的map函数返回3个参数给callback函数</li>\n<li>lodash/fp中的map函数只返回1个参数给callback函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash/fp&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// (value, index|key, collection)</span></span><br><span class=\"line\">_.<span class=\"title function_\">map</span>([<span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;10&#x27;</span>], <span class=\"built_in\">parseInt</span>); <span class=\"comment\">// [6, NaN, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (value)</span></span><br><span class=\"line\">fp.<span class=\"title function_\">map</span>(<span class=\"built_in\">parseInt</span>)([<span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;10&#x27;</span>]); <span class=\"comment\">// [6, 8, 10]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6.6-point-free\">6.6 Point Free<a title=\"#6.6-point-free\" href=\"#6.6-point-free\"></a></h2>\n<p>我们可以把数据处理的过程定义成与数据无关的合成运算，不需要用到代表数据的那个参数，只要简单的把运算步骤合成到一起，在使用这种模式之前我们需要定义一些辅助的基本运算函数</p>\n<ul>\n<li>不需要指明处理的数据</li>\n<li><strong>只需要合成运算过程</strong></li>\n<li>需要定义一些辅助的基本运算函数</li>\n</ul>\n<p>非 Point Free 模式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">word</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> word.<span class=\"title function_\">toLowerCase</span>().<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s+/g</span>, <span class=\"string\">&#x27;_&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Point Free 模式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash/fp&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = fp.<span class=\"title function_\">flowRight</span>(fp.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s+/g</span>, <span class=\"string\">&#x27;-&#x27;</span>), fp.<span class=\"property\">toLower</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>(<span class=\"string\">&#x27;HELLO   WORD&#x27;</span>)); <span class=\"comment\">// hello-word</span></span><br></pre></td></tr></table></figure>\n<p>案例：</p>\n<p>把一个字符串的首字母提取并转换成大写，使用.作为分隔符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#x27;word wild web  =&gt; W.W.W</span></span><br><span class=\"line\"><span class=\"comment\">// const f = fp.flowRight(fp.join(&#x27;.&#x27;), fp.map(fp.first), fp.map(fp.toUpper), fp.split(&#x27; &#x27;))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash/fp&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 解决了上面两次map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = fp.<span class=\"title function_\">flowRight</span>(fp.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;.&#x27;</span>), fp.<span class=\"title function_\">map</span>(fp.<span class=\"title function_\">flowRight</span>(fp.<span class=\"property\">first</span>, fp.<span class=\"property\">toUpper</span>)), fp.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>(<span class=\"string\">&#x27;word wild web&#x27;</span>)); <span class=\"comment\">// W.W.W</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6.7-functor(函子)\">6.7 Functor(函子)<a title=\"#6.7-functor(函子)\" href=\"#6.7-functor(函子)\"></a></h2>\n<h3 id=\"6.7.1-函子概念\">6.7.1 函子概念<a title=\"#6.7.1-函子概念\" href=\"#6.7.1-函子概念\"></a></h3>\n<p>为什么要学函子？</p>\n<p>到目前为止已经已经学习了函数式编程的一些基础，但是我们还没有演示在函数式编程中如何把副作用控制在可控的范围内、异常处理、异步操作等。</p>\n<p>什么是函子？</p>\n<p>作用：<strong>控制函数式编程的副作用，异常处理，异步操作等。</strong></p>\n<ul>\n<li>容器：包含值和值的变形关系(这个变形关系就是函数)</li>\n<li>函子：是一个特殊的容器，通过一个普通的对象来实现，该对象具有 map 方法，map 方法可以运行一个函数对值进行处理(变形关系)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函子</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Container</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Container</span>(<span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_value</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> r = <span class=\"keyword\">new</span> <span class=\"title class_\">Container</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x + <span class=\"number\">1</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x * x);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r); <span class=\"comment\">// Container &#123; _value: 36 &#125;</span></span><br></pre></td></tr></table></figure>\n<p>函数式编程思想，避免出现new关键字：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Container</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Container</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Container</span>.<span class=\"title function_\">of</span>(<span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_value</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> r = <span class=\"title class_\">Container</span>.<span class=\"title function_\">of</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x + <span class=\"number\">1</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x * x);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r);<span class=\"comment\">// Container &#123; _value: 36 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 演示 null undefined 的问题</span></span><br><span class=\"line\"><span class=\"comment\">// 副作用，因为没有返回值，所以null使fn函数变得不纯</span></span><br><span class=\"line\"><span class=\"title class_\">Container</span>.<span class=\"title function_\">of</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x.<span class=\"title function_\">toUpperCase</span>());</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<ul>\n<li>函数式编程的运算不直接操作值，而是由函子完成</li>\n<li>函子就是一个实现了 map 契约的对象</li>\n<li>我们可以把函子想象成一个盒子，这个盒子里封装了一个值</li>\n<li>想要处理盒子中的值，我们需要给盒子的 map 方法传递一个处理值的函数（纯函数），由这个函数来对值进行处理</li>\n<li>最终 map 方法返回一个包含新值的盒子（函子）</li>\n</ul>\n<h3 id=\"6.7.2-maybe函子\">6.7.2 Maybe函子<a title=\"#6.7.2-maybe函子\" href=\"#6.7.2-maybe函子\"></a></h3>\n<ul>\n<li>我们在编程的过程中可能会遇到很多错误，需要对这些错误做相应的处理</li>\n<li>MayBe 函子的作用就是可以对外部的空值情况做处理（控制副作用在允许的范围）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Maybe函子</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Maybe</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Maybe</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">isNothing</span>() ? <span class=\"title class_\">Maybe</span>.<span class=\"title function_\">of</span>(<span class=\"literal\">null</span>) : <span class=\"title class_\">Maybe</span>.<span class=\"title function_\">of</span>(<span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_value</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">isNothing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> === <span class=\"literal\">null</span> || <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> === <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// let r = Maybe.of(&#x27;hello word&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">//     .map(x =&gt; x.toUpperCase())</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(r)//Maybe &#123; _value: &#x27;HELLO WORD&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> r = <span class=\"title class_\">Maybe</span>.<span class=\"title function_\">of</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x.<span class=\"title function_\">toUpperCase</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r); <span class=\"comment\">// Maybe &#123; _value: null &#125;</span></span><br></pre></td></tr></table></figure>\n<p>Maybe函子虽然解决了空值问题，不会出现异常。但当多次调用map时，不能确定哪次出现了空值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> r = <span class=\"title class_\">Maybe</span>.<span class=\"title function_\">of</span>(<span class=\"string\">&#x27;hello word&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x.<span class=\"title function_\">toUpperCase</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r); <span class=\"comment\">// Maybe &#123; _value: null &#125;  不确定哪出现了null</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6.7.3-either函子\">6.7.3 Either函子<a title=\"#6.7.3-either函子\" href=\"#6.7.3-either函子\"></a></h3>\n<ul>\n<li>Either 两者中的任何一个，类似于 if…else…的处理</li>\n<li>异常会让函数变的不纯，Either 函子可以用来做异常处理</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Either 函子</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Left</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Left</span>(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Right</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Right</span>(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Right</span>.<span class=\"title function_\">of</span>(<span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_value</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> r1 = <span class=\"title class_\">Left</span>.<span class=\"title function_\">of</span>(<span class=\"number\">12</span>).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x + <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> r2 = <span class=\"title class_\">Right</span>.<span class=\"title function_\">of</span>(<span class=\"number\">12</span>).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x + <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r1, r2); <span class=\"comment\">// Left &#123; _value: 12 &#125; Right &#123; _value: 14 &#125;</span></span><br></pre></td></tr></table></figure>\n<p>Left函子可以记录错误信息处理异常，Right函子对参数处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parseJSON</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Right</span>.<span class=\"title function_\">of</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(str));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Left</span>.<span class=\"title function_\">of</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">error</span>: e.<span class=\"property\">message</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> r = <span class=\"title function_\">parseJSON</span>(<span class=\"string\">&#x27;&#123;&quot;name&quot;:&quot;tom&quot;&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r); <span class=\"comment\">// Left &#123; _value: &#123; error: &#x27;Unexpected end of JSON input&#x27; &#125; &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> r3 = <span class=\"title function_\">parseJSON</span>(<span class=\"string\">&#x27;&#123;&quot;name&quot;:&quot;tom&quot;&#125;&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x.<span class=\"property\">name</span>.<span class=\"title function_\">toUpperCase</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r3); <span class=\"comment\">// Right &#123; _value: &#x27;TOM&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6.7.4-io函子\">6.7.4 IO函子<a title=\"#6.7.4-io函子\" href=\"#6.7.4-io函子\"></a></h3>\n<ul>\n<li>IO函子中的 _value 是一个函数，这里是把函数作为值来处理</li>\n<li>IO函子可以把不纯的动作存储到 _value 中，延迟执行这个不纯的操作（惰性执行），包装当前的纯操作</li>\n<li><strong>把不纯的操作交给调用者来处理</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IO 函子</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash/fp&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">IO</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">IO</span>((<span class=\"function\">() =&gt;</span> value));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">IO</span>(fp.<span class=\"title function_\">flowRight</span>(fn, <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的p就是proccess</span></span><br><span class=\"line\"><span class=\"comment\">// 返回了一个新的IO，并将p.execPath的返回存储为r._value</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> r = <span class=\"variable constant_\">IO</span>.<span class=\"title function_\">of</span>(process).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> p.<span class=\"property\">execPath</span>);</span><br><span class=\"line\"><span class=\"comment\">// 为了更好的理解： fp.upperCase(str01) 的值作为p，传入fp.reverse(p),然后将fp.reverse(p)的值传入r._value</span></span><br><span class=\"line\">r = <span class=\"variable constant_\">IO</span>.<span class=\"title function_\">of</span>(fp.<span class=\"title function_\">upperCase</span>(<span class=\"string\">&#x27;patrick jun&#x27;</span>)).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> fp.<span class=\"title function_\">reverse</span>(p));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log(r)</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r.<span class=\"title function_\">_value</span>());</span><br></pre></td></tr></table></figure>\n<p>IO函子控制了副作用在可控范围内发生</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IO 函子的问题</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>); <span class=\"comment\">// node.js require(&#x27;fs&#x27;)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash/fp&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fs);</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">IO</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">IO</span>((<span class=\"function\">() =&gt;</span> value));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">IO</span>(fp.<span class=\"title function_\">flowRight</span>(fn, <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> readFile = <span class=\"keyword\">function</span> (<span class=\"params\">filename</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">IO</span>((<span class=\"function\">() =&gt;</span> fs.<span class=\"title function_\">readFileSync</span>(filename, <span class=\"string\">&#x27;utf-8&#x27;</span>)));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> print = <span class=\"keyword\">function</span> (<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">IO</span>((<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cat = fp.<span class=\"title function_\">flowRight</span>(print, readFile);</span><br><span class=\"line\"><span class=\"comment\">// IO(IO(x))</span></span><br><span class=\"line\"><span class=\"comment\">// 第一个_value是printd的执行结果readFile，第二个才是我们想要的最终结果</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> r = <span class=\"title function_\">cat</span>(<span class=\"string\">&#x27;../../package.json&#x27;</span>).<span class=\"title function_\">_value</span>().<span class=\"title function_\">_value</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r);</span><br></pre></td></tr></table></figure>\n<h3 id=\"6.7.5-task异步执行\">6.7.5 Task异步执行<a title=\"#6.7.5-task异步执行\" href=\"#6.7.5-task异步执行\"></a></h3>\n<ul>\n<li>\n<p>异步任务的实现过于复杂，我们使用 folktale 中的 Task 来演示</p>\n</li>\n<li>\n<p><a href=\"https://folktale.origamitower.com/\" target=\"_blank\">folktale</a> 一个标准的函数式编程库</p>\n</li>\n<li>\n<ul>\n<li>和 lodash、ramda 不同的是，他没有提供很多功能函数</li>\n<li>只提供了一些函数式处理的操作，例如：compose、curry 等，一些函子 Task、Either、MayBe 等</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    compose,</span><br><span class=\"line\">    curry</span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;folktale/core/lambda&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    toUpper,</span><br><span class=\"line\">    first</span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash/fp&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"title function_\">curry</span>(<span class=\"number\">2</span>,<span class=\"function\">(<span class=\"params\">x,y</span>)=&gt;</span>x+y)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>))<span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>))<span class=\"comment\">//3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> f1 = <span class=\"title function_\">compose</span>(toUpper, first)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f1</span>([<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;tow&#x27;</span>]))<span class=\"comment\">//ONE</span></span><br></pre></td></tr></table></figure>\n<p>使用folktale中的Task函子执行异步任务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    task</span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;folktale/concurrency/task&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">readFile</span>(<span class=\"params\">filePath</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">task</span>(<span class=\"function\"><span class=\"params\">resolver</span> =&gt;</span> &#123;</span><br><span class=\"line\">        fs.<span class=\"title function_\">readFile</span>(filePath, <span class=\"string\">&#x27;utf-8&#x27;</span>, <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                resolver.<span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            resolver.<span class=\"title function_\">resolve</span>(data)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;../package.json&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(data))</span><br><span class=\"line\">    .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> data.<span class=\"property\">version</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">run</span>().<span class=\"title function_\">listen</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">onRejected</span>: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">onResolved</span>: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"6.7.6-pointed函子\">6.7.6 Pointed函子<a title=\"#6.7.6-pointed函子\" href=\"#6.7.6-pointed函子\"></a></h3>\n<ul>\n<li>Pointed 函子是实现了 of 静态方法的函子</li>\n<li>of 方法是为了避免使用 new 来创建对象，更深层的含义是 of 方法用来把值放到上下文Context（把值放到容器中，使用 map 来处理值）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Container</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">of</span> (value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Container</span>(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">map</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Container</span>(<span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_value</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> r =<span class=\"title class_\">Container</span>.<span class=\"title function_\">of</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r)<span class=\"comment\">//Container &#123; _value: 7 &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6.7.7-monad函子\">6.7.7 Monad函子<a title=\"#6.7.7-monad函子\" href=\"#6.7.7-monad函子\"></a></h3>\n<ul>\n<li>Monad 函子是可以变扁的 Pointed 函子，IO（IO（x））</li>\n<li>一个函子如果具有 join 和 of 两个方法并遵守一些定律就是一个Monad</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IO Monad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash/fp&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">IO</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">of</span> (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">IO</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> (fn) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = fn</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  map (fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">IO</span>(fp.<span class=\"title function_\">flowRight</span>(fn, <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  join () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">_value</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  flatMap (fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">map</span>(fn).<span class=\"title function_\">join</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> readFile = <span class=\"keyword\">function</span> (<span class=\"params\">filename</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">IO</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fs.<span class=\"title function_\">readFileSync</span>(filename, <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> print = <span class=\"keyword\">function</span> (<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">IO</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//为解决IO函子的问题，这样更符合函数式编程！</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> r = <span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;package.json&#x27;</span>)</span><br><span class=\"line\">          <span class=\"comment\">// .map(x =&gt; x.toUpperCase())</span></span><br><span class=\"line\">          .<span class=\"title function_\">map</span>(fp.<span class=\"property\">toUpper</span>)</span><br><span class=\"line\">          <span class=\"comment\">//因为readFile返回一个IO函子，所以调用flatMap</span></span><br><span class=\"line\">          .<span class=\"title function_\">flatMap</span>(print)</span><br><span class=\"line\">          <span class=\"comment\">//因为flatMap返回一个函子，所以调用join，返回_value</span></span><br><span class=\"line\">          .<span class=\"title function_\">join</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r)</span><br></pre></td></tr></table></figure>\n<h1 id=\"七、总结\">七、总结<a title=\"#七、总结\" href=\"#七、总结\"></a></h1>\n<ol>\n<li>函数式编程是一种强调以函数使用为主的软件开发风格；</li>\n<li>纯函数指没有副作用的函数，相同的输入有相同的输出；</li>\n<li>在函数式编程里面，将多个不同函数组合是一个非常非常非常重要的思想；</li>\n<li>函数式编程将函数视为积木，通过一些高阶函数来提高代码的模块化和可重用性。</li>\n</ol>\n<blockquote>\n<p>理解：柯里化是”因式分解“，将参数分解开；函数组合是”结合律“，函数可以组合使用。</p>\n</blockquote>\n<p>参考文章：</p>\n<blockquote>\n<p>概念定义特点：<a href=\"https://juejin.im/post/6858129115598635015\">https://juejin.im/post/6858129115598635015</a></p>\n</blockquote>\n<blockquote>\n<p>函数式编程讲解：<a href=\"https://juejin.im/post/6844903743117361165\">https://juejin.im/post/6844903743117361165</a></p>\n</blockquote>\n<blockquote>\n<p>函数式编程讲解：<a href=\"https://juejin.im/post/6844903655397654535\">https://juejin.im/post/6844903655397654535</a></p>\n</blockquote>\n<blockquote>\n<p>拉勾教育大前端训练营笔记： <a href=\"https://zhuanlan.zhihu.com/p/162839608\">https://zhuanlan.zhihu.com/p/162839608</a></p>\n</blockquote>\n<blockquote>\n<p>what are “first class objects”：<a href=\"https://stackoverflow.com/questions/245192/what-are-first-class-objects\">https://stackoverflow.com/questions/245192/what-are-first-class-objects</a></p>\n</blockquote>\n","prev":{"title":"正则表达式","link":"Learning/e08f36f1337d"},"next":{"title":"JavaScript新特性","link":"Learning/75dfaa707e38"},"plink":"https://blog.jschef.com/Learning/86cd6788d8fb/","toc":[{"id":"一、函数式编程概念","title":"一、函数式编程概念","index":"1","children":[{"id":"1.1-定义","title":"1.1 定义","index":"1.1"},{"id":"1.2-特性","title":"1.2 特性","index":"1.2"},{"id":"1.3-基本概念","title":"1.3 基本概念","index":"1.3"},{"id":"1.4-学习指南","title":"1.4 学习指南","index":"1.4"}]},{"id":"二、头等函数","title":"二、头等函数","index":"2","children":[{"id":"2.1-函数是一等公民","title":"2.1 函数是一等公民","index":"2.1"},{"id":"2.2-高阶函数","title":"2.2 高阶函数","index":"2.2","children":[{"id":"2.2.1-函数作为参数","title":"2.2.1 函数作为参数","index":"2.2.1"},{"id":"2.2.2-函数作为返回值","title":"2.2.2 函数作为返回值","index":"2.2.2"},{"id":"2.2.3-使用高阶函数意义","title":"2.2.3 使用高阶函数意义","index":"2.2.3"},{"id":"2.2.4-常用高阶函数模拟","title":"2.2.4 常用高阶函数模拟","index":"2.2.4"}]}]},{"id":"三、闭包","title":"三、闭包","index":"3"},{"id":"3.1-定义","title":"3.1 定义","index":"4","children":[{"id":"3.2-案例","title":"3.2 案例","index":"4.1"}]},{"id":"四、纯函数","title":"四、纯函数","index":"5","children":[{"id":"4.1-概念","title":"4.1 概念","index":"5.1"},{"id":"4.2-lodash","title":"4.2 lodash","index":"5.2"},{"id":"4.3-纯函数的好处","title":"4.3 纯函数的好处","index":"5.3"},{"id":"4.4-副作用","title":"4.4 副作用","index":"5.4"}]},{"id":"五、柯里化","title":"五、柯里化","index":"6","children":[{"id":"5.1-柯里化示例(问题回顾)","title":"5.1 柯里化示例(问题回顾)","index":"6.1"},{"id":"5.2-lodash.curry(fn)","title":"5.2 lodash.curry(fn)","index":"6.2"},{"id":"5.3-总结","title":"5.3 总结","index":"6.3"}]},{"id":"六、函数组合","title":"六、函数组合","index":"7","children":[{"id":"6.1-概念","title":"6.1 概念","index":"7.1"},{"id":"6.2-lodash组合函数","title":"6.2 lodash组合函数","index":"7.2"},{"id":"6.2-lodash组合函数-1","title":"6.2 lodash组合函数","index":"7.3"},{"id":"6.3-结合律","title":"6.3 结合律","index":"7.4"},{"id":"6.4-实战","title":"6.4 实战","index":"7.5"},{"id":"6.5-lodash/fp","title":"6.5 lodash&#x2F;fp","index":"7.6"},{"id":"6.6-point-free","title":"6.6 Point Free","index":"7.7"},{"id":"6.7-functor(函子)","title":"6.7 Functor(函子)","index":"7.8","children":[{"id":"6.7.1-函子概念","title":"6.7.1 函子概念","index":"7.8.1"},{"id":"6.7.2-maybe函子","title":"6.7.2 Maybe函子","index":"7.8.2"},{"id":"6.7.3-either函子","title":"6.7.3 Either函子","index":"7.8.3"},{"id":"6.7.4-io函子","title":"6.7.4 IO函子","index":"7.8.4"},{"id":"6.7.5-task异步执行","title":"6.7.5 Task异步执行","index":"7.8.5"},{"id":"6.7.6-pointed函子","title":"6.7.6 Pointed函子","index":"7.8.6"},{"id":"6.7.7-monad函子","title":"6.7.7 Monad函子","index":"7.8.7"}]}]},{"id":"七、总结","title":"七、总结","index":"8"}],"reward":true,"copyright":{"author":"Chef Wu","link":"<a href=\"https://blog.jschef.com/Learning/86cd6788d8fb/\" title=\"函数式编程范式\">https://blog.jschef.com/Learning/86cd6788d8fb/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"October 13, 2020"}}