{"title":"ES6学习-变量常量的声明与解构赋值","date":"2019-07-08T03:05:00.000Z","date_formatted":{"ll":"Jul 8, 2019","L":"07/08/2019","MM-DD":"07-08"},"link":"Learning/90da1569d69e","tags":["ES6","JavaScript"],"categories":["Learning"],"updated":"2023-11-14T12:07:06.466Z","content":"<h2 id=\"变量声明：let\">变量声明：let<a title=\"#变量声明：let\" href=\"#变量声明：let\"></a></h2>\n<h3 id=\"基本用法\">基本用法<a title=\"#基本用法\" href=\"#基本用法\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">123</span>;  <span class=\"comment\">//let声明</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"特点\">特点<a title=\"#特点\" href=\"#特点\"></a></h3>\n<ul>\n<li>\n<p><strong>块内有效</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">0</span>;  <span class=\"comment\">// a块内有效：只能在该代码块内使用</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;  <span class=\"comment\">// b全局有效：声明后可在任意地方使用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a  <span class=\"comment\">// ReferenceError: a is not defined</span></span><br><span class=\"line\">b  <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>不能重复声明</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;  <span class=\"comment\">//let只能声明一次</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">3</span>;  <span class=\"comment\">//var可以多次声明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">4</span>;</span><br><span class=\"line\">a  <span class=\"comment\">// Identifier &#x27;a&#x27; has already been declared</span></span><br><span class=\"line\">b  <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>不存在变量提升</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);  <span class=\"comment\">//ReferenceError: a is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);  <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>变量 b 用 var 声明存在变量提升，所以当脚本开始运行的时候，b 已经存在了，但是还没有赋值，所以会输出 undefined。</li>\n<li>变量 a 用 let 声明不存在变量提升，在声明变量 a 之前，a 不存在，所以会报错。</li>\n</ul>\n</li>\n<li>\n<p><strong>顶层对象</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">a</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">b</span> <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>var和function的全局声明会自动绑定到window或global对象，而let和const不会。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"let与var案例\">let与var案例<a title=\"#let与var案例\" href=\"#let与var案例\"></a></h3>\n<p>let很适合做循环变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出十个 10</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出 0123456789</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>变量 i 是用 var 声明的，在全局范围内有效，所以全局中只有一个变量 i, 每次循环时，setTimeout 定时器里面的 i 指的是全局变量 i ，而循环里的十个 setTimeout 是在循环结束后才执行，所以此时的 i 都是 10。</p>\n</li>\n<li>\n<p>变量 j 是用 let 声明的，当前的 j 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量，所以 setTimeout 定时器里面的 j 其实是不同的变量，即最后输出12345。（若每次循环的变量 j 都是重新声明的，如何知道前一个循环的值？这是因为 JavaScript 引擎内部会记住前一个循环的值）。</p>\n</li>\n</ul>\n<h2 id=\"常量声明：const\">常量声明：const<a title=\"#常量声明：const\" href=\"#常量声明：const\"></a></h2>\n<h3 id=\"基本用法-1\">基本用法<a title=\"#基本用法-1\" href=\"#基本用法-1\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PI</span> = <span class=\"string\">&quot;3.1415926&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">DIR</span>;  <span class=\"comment\">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>\n<p>  const 声明一个只读变量，声明之后不允许改变。意味着，一旦声明必须初始化，否则会报错。</p>\n<h3 id=\"原理与注意事项\">原理与注意事项<a title=\"#原理与注意事项\" href=\"#原理与注意事项\"></a></h3>\n<p>  const 其实保证的不是变量的值不变，而是保证变量指向的内存地址所保存的数据不允许改动。对于简单类型（数值 number、字符串 string 、布尔值 boolean）,值就保存在变量指向的那个内存地址。而复杂类型（对象 object，数组 array，函数 function），变量指向的内存地址其实是保存了一个指向实际数据的指针，所以 const 只能保证指针是固定的，至于指针指向的数据结构变不变就无法控制了，所以使用 const 声明复杂类型对象时要慎重。</p>\n<h2 id=\"解构赋值\">解构赋值<a title=\"#解构赋值\" href=\"#解构赋值\"></a></h2>\n<h3 id=\"什么是解构赋值？\">什么是解构赋值？<a title=\"#什么是解构赋值？\" href=\"#什么是解构赋值？\"></a></h3>\n<p>  解构赋值是对赋值运算符的扩展,是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</p>\n<h3 id=\"类似数组写法的解构（array）\">类似数组写法的解构（Array）<a title=\"#类似数组写法的解构（array）\" href=\"#类似数组写法的解构（array）\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];  <span class=\"comment\">//基础用法</span></span><br><span class=\"line\"><span class=\"comment\">// a = 1</span></span><br><span class=\"line\"><span class=\"comment\">// b = 2</span></span><br><span class=\"line\"><span class=\"comment\">// c = 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, [[b], c]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]];  <span class=\"comment\">//嵌套解构</span></span><br><span class=\"line\"><span class=\"comment\">// a = 1</span></span><br><span class=\"line\"><span class=\"comment\">// b = 2</span></span><br><span class=\"line\"><span class=\"comment\">// c = 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, , b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];  <span class=\"comment\">//忽略解构</span></span><br><span class=\"line\"><span class=\"comment\">// a = 1</span></span><br><span class=\"line\"><span class=\"comment\">// b = 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a = <span class=\"number\">1</span>, b] = [];  <span class=\"comment\">//不完全解构</span></span><br><span class=\"line\"><span class=\"comment\">// a = 1, b = undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, ...b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; <span class=\"comment\">//剩余运算符“...”：将余下的数据以数组形式全赋值给b</span></span><br><span class=\"line\"><span class=\"comment\">//a = 1</span></span><br><span class=\"line\"><span class=\"comment\">//b = [2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c, d, e] = <span class=\"string\">&#x27;hello&#x27;</span>;<span class=\"comment\">//在数组的解构中，解构的目标若为可遍历对象，皆可进行解构赋值。</span></span><br><span class=\"line\"><span class=\"comment\">// a = &#x27;h&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// b = &#x27;e&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// c = &#x27;l&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// d = &#x27;l&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// e = &#x27;o&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a = <span class=\"number\">2</span>] = [<span class=\"literal\">undefined</span>]; <span class=\"comment\">//默认值解构</span></span><br><span class=\"line\"><span class=\"comment\">// a = 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a = <span class=\"number\">3</span>, b = a] = [];     <span class=\"comment\">// a = 3, b = 3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a = <span class=\"number\">3</span>, b = a] = [<span class=\"number\">1</span>];    <span class=\"comment\">// a = 1, b = 1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a = <span class=\"number\">3</span>, b = a] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]; <span class=\"comment\">// a = 1, b = 2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类似对象写法的解构（object）\">类似对象写法的解构（Object）<a title=\"#类似对象写法的解构（object）\" href=\"#类似对象写法的解构（object）\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.基本用法：按照属性名进行匹配赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span>, <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// foo = &#x27;aaa&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// bar = &#x27;bbb&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz : foo &#125; = &#123; baz : <span class=\"string\">&#x27;ddd&#x27;</span> &#125;; <span class=\"comment\">//指定属性名匹配赋值</span></span><br><span class=\"line\"><span class=\"comment\">// foo = &#x27;ddd&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.可嵌套忽略（较少使用）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">p</span>: [<span class=\"string\">&#x27;hello&#x27;</span>, &#123;<span class=\"attr\">y</span>: <span class=\"string\">&#x27;world&#x27;</span>&#125;] &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class=\"line\"><span class=\"comment\">// x = &#x27;hello&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// y = &#x27;world&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">p</span>: [<span class=\"string\">&#x27;hello&#x27;</span>, &#123;<span class=\"attr\">y</span>: <span class=\"string\">&#x27;world&#x27;</span>&#125;] &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">p</span>: [x, &#123;  &#125;] &#125; = obj;</span><br><span class=\"line\"><span class=\"comment\">// x = &#x27;hello&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3.不完全解构（较少使用）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">p</span>: [&#123;<span class=\"attr\">y</span>: <span class=\"string\">&#x27;world&#x27;</span>&#125;] &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">p</span>: [&#123; y &#125;, x ] &#125; = obj;</span><br><span class=\"line\"><span class=\"comment\">// x = undefined</span></span><br><span class=\"line\"><span class=\"comment\">// y = &#x27;world&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4.剩余运算符：将余下的数据以对象形式赋值给rest</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;a, b, ...rest&#125; = &#123;<span class=\"attr\">a</span>: <span class=\"number\">10</span>, <span class=\"attr\">b</span>: <span class=\"number\">20</span>, <span class=\"attr\">c</span>: <span class=\"number\">30</span>, <span class=\"attr\">d</span>: <span class=\"number\">40</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// a = 10</span></span><br><span class=\"line\"><span class=\"comment\">// b = 20</span></span><br><span class=\"line\"><span class=\"comment\">// rest = &#123;c: 30, d: 40&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//5.默认值解构</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;a = <span class=\"number\">10</span>, b = <span class=\"number\">5</span>&#125; = &#123;<span class=\"attr\">a</span>: <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// a = 3; b = 5;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">a</span>: aa = <span class=\"number\">10</span>, <span class=\"attr\">b</span>: bb = <span class=\"number\">5</span>&#125; = &#123;<span class=\"attr\">a</span>: <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// aa = 3; bb = 5;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"写在最后\">写在最后<a title=\"#写在最后\" href=\"#写在最后\"></a></h2>\n<p>  今天是实习第一天，上午就填完一些材料，就让自己学学。经理往群里发了java学习的资料，而我作为一个“前端开发实习生”，没有资料。那我就自己在菜鸟上看了看ES6吧</p>\n","prev":{"title":"ES6学习-Symbol类型、字符串、Maps与Objects","link":"Learning/7d5b1eb5af6f"},"next":{"title":"Spring MVC配置","link":"Learning/280ed29779d2"},"plink":"https://blog.jschef.com/Learning/90da1569d69e/","toc":[{"id":"变量声明：let","title":"变量声明：let","index":"1","children":[{"id":"基本用法","title":"基本用法","index":"1.1"},{"id":"特点","title":"特点","index":"1.2"},{"id":"let与var案例","title":"let与var案例","index":"1.3"}]},{"id":"常量声明：const","title":"常量声明：const","index":"2","children":[{"id":"基本用法-1","title":"基本用法","index":"2.1"},{"id":"原理与注意事项","title":"原理与注意事项","index":"2.2"}]},{"id":"解构赋值","title":"解构赋值","index":"3","children":[{"id":"什么是解构赋值？","title":"什么是解构赋值？","index":"3.1"},{"id":"类似数组写法的解构（array）","title":"类似数组写法的解构（Array）","index":"3.2"},{"id":"类似对象写法的解构（object）","title":"类似对象写法的解构（Object）","index":"3.3"}]},{"id":"写在最后","title":"写在最后","index":"4"}],"reward":true,"copyright":{"author":"Chef Wu","link":"<a href=\"https://blog.jschef.com/Learning/90da1569d69e/\" title=\"ES6学习-变量常量的声明与解构赋值\">https://blog.jschef.com/Learning/90da1569d69e/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"July 8, 2019"}}