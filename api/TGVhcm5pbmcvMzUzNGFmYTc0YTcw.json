{"title":"Nest.js大法-上","date":"2021-02-16T11:08:40.000Z","date_formatted":{"ll":"Feb 16, 2021","L":"02/16/2021","MM-DD":"02-16"},"link":"Learning/3534afa74a70","tags":["JavaScript"],"categories":["Learning"],"updated":"2023-11-14T12:07:06.466Z","content":"<p>Nest大法分为上、中、下三部，完成此三部大法，成就全栈大能！修炼吾之《Nest.js大法》三部，行走江湖，亦可和后端交手而不败！</p>\n<span id=\"more\"></span>\n<ul>\n<li>上册：快速入门教程</li>\n<li>中册：Nest.js详解</li>\n<li>下册：大型实战开发-在线面试系统</li>\n</ul>\n<p>上册主要是一路到底，通过掌握简单的知识点快速入门，建立一个立体的知识认知，最后完成一个完整的简单的后端实例。</p>\n<p>如果有前端的<code>Angular</code>框架经验，或者后端的<code>Spring</code>、<code>Laravel</code>的框架基础，修炼本大法也许会更容易理解。<br>\n本人就曾在毕设的时候，自学的Laravel框架，这个框架的结构和命令都和Nest.js比较像。</p>\n<h2 id=\"一、环境准备\">一、环境准备<a title=\"#一、环境准备\" href=\"#一、环境准备\"></a></h2>\n<ul>\n<li>MySQL</li>\n<li>node.js &gt;= 10.13.0</li>\n<li>Nest Cli</li>\n<li>Navicat</li>\n<li>Postman</li>\n</ul>\n<p>本文以<code>MySQL</code>数据库为例，并使用了<code>Mavicat</code>数据库可视化工具、<code>Postman</code>接口测试工具，请提前准备。</p>\n<blockquote>\n<p>由于笔者对<code>mongodb</code>暂时还不是很理解，本文暂时先只写<code>MySQL</code>的例子。</p>\n</blockquote>\n<h3 id=\"1.1-mysql\">1.1 MySQL<a title=\"#1.1-mysql\" href=\"#1.1-mysql\"></a></h3>\n<p>安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mysql</span><br></pre></td></tr></table></figure>\n<p>启动/关闭：<code>start</code>/<code>stop</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql.server start</span><br></pre></td></tr></table></figure>\n<p>设置密码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root</span><br><span class=\"line\">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;密码&#x27;;</span><br><span class=\"line\">exit;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1.2-mongodb(弃)\">1.2 mongodb(弃)<a title=\"#1.2-mongodb(弃)\" href=\"#1.2-mongodb(弃)\"></a></h3>\n<p><strong>本节请跳过，我搞明白了mongodb再继续写</strong></p>\n<p>安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap mongodb/brew</span><br><span class=\"line\">brew install mongodb-community</span><br></pre></td></tr></table></figure>\n<p>启动/关闭：<code>start</code>/<code>stop</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start mongodb-community</span><br></pre></td></tr></table></figure>\n<h3 id=\"1.3-nest-cli\">1.3 Nest cli<a title=\"#1.3-nest-cli\" href=\"#1.3-nest-cli\"></a></h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g @nestjs/cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、搭建项目\">二、搭建项目<a title=\"#二、搭建项目\" href=\"#二、搭建项目\"></a></h2>\n<h3 id=\"2.1-创建项目\">2.1 创建项目<a title=\"#2.1-创建项目\" href=\"#2.1-创建项目\"></a></h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nest new mynest-demo</span><br><span class=\"line\">cd mynest-demo</span><br><span class=\"line\">npm run start:dev</span><br></pre></td></tr></table></figure>\n<p>通过Nest cli命令新建一个名为<code>mynest-demo</code>的项目。</p>\n<p>最后，浏览器打开<code>http://localhost:3000/</code>可以看到经典的Hello World!，就表示成功了。</p>\n<h3 id=\"2.2-安装依赖\">2.2 安装依赖<a title=\"#2.2-安装依赖\" href=\"#2.2-安装依赖\"></a></h3>\n<p>Nest提供了<code>TypeORM</code>库，用于操作MySQL数据库：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save @nestjs/typeorm typeorm mysql2</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、编写代码\">三、编写代码<a title=\"#三、编写代码\" href=\"#三、编写代码\"></a></h2>\n<p>后端，通常就是对数据库进行增删改查（<code>CRUD</code>）操作，当然还有其他不少的活。本文就主要对一个用户”表“<code>user</code>进行<code>CRUD</code>，一起完整的操作一下数据库操作。</p>\n<h3 id=\"3.1-创建-module\">3.1 创建 Module<a title=\"#3.1-创建-module\" href=\"#3.1-创建-module\"></a></h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nest g module user server</span><br></pre></td></tr></table></figure>\n<p>Nest cli会自动在<code>src/server/user</code>文件夹下创建一个<code>user.module.ts</code>，这是Nest的模块文件，Nest用它来组织整个应用程序的结构。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// user.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>同时还会Nest cli会自动在根模块<code>app.module.ts</code>中引入我们刚刚创建的<code>UserModule</code>这个模块。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppController</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.controller&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.service&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./server/user/user.module&#x27;</span>; <span class=\"comment\">// 自动引入的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">UserModule</span>], <span class=\"comment\">// 自动引入的</span></span><br><span class=\"line\">  <span class=\"attr\">controllers</span>: [<span class=\"title class_\">AppController</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [<span class=\"title class_\">AppService</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.2-创建-controller\">3.2 创建 Controller<a title=\"#3.2-创建-controller\" href=\"#3.2-创建-controller\"></a></h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nest g controller user server</span><br></pre></td></tr></table></figure>\n<p>在Nest中，<code>controller</code>是我们写Nest程序的主要战场之一（还有一个<code>provider</code>）。它负责处理客户端传入的请求和服务端返回的响应。</p>\n<p>举个例子，我们如果要通过<code>http://localhost:3000/user/getUserInfo</code>获取用户的信息：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// user.controller.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Get</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">&#x27;user&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Get</span>(<span class=\"string\">&#x27;getUserInfo&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">getAll</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 暂时代替所有用户的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> users = [</span><br><span class=\"line\">      &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tom&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">19</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jerry&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">16</span> &#125;,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(users);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里，<code>user.controller.ts</code>负责处理了客户端传入的<code>getUserInfo请求</code>，并将所有用户的数据通过JSON字符串形式进行<code>响应</code>。</p>\n<p><img src=\"../images/20210216/2.png\" alt=\"image\" class=\"φbs\"></p>\n<h3 id=\"3.3-创建-provider\">3.3 创建 Provider<a title=\"#3.3-创建-provider\" href=\"#3.3-创建-provider\"></a></h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nest g service user server</span><br></pre></td></tr></table></figure>\n<p><code>provider</code>我们可以简单地从字面意思来理解，就是服务的提供者。</p>\n<p>我们的<code>controller</code>接收到了一个用户的查询请求，我们不直接在<code>controller</code>中去查询数据库并返回，而是要将查询请求交给<code>provider</code>来处理，这里我们创建了一个<code>UserService</code>，就是用来提供数据库操作服务的。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// user.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，<code>provider</code>不一定只能用来提供数据库的操作服务，还可以用来做一些用户校验，放到<code>provider</code>中。<code>provider</code>也是我们写Nest程序的主要战场（还有一个<code>controller</code>）。<br>\n总而言之，<code>provider</code>是为模块<code>module</code>提供相应服务的。</p>\n<blockquote>\n<p><code>module</code>控制路由，管理请求响应，负责挥棒指挥。<code>provider</code>听从<code>module</code>的调遣，是<code>module</code>的虾兵蟹将。</p>\n</blockquote>\n<p>有必要提的一件事是，前面通过Nest cli创建<code>controller</code>和<code>provider</code>的时候，自动咱们的<code>user.module.ts</code>中引入了：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// user.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserController</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./user.controller&#x27;</span>; <span class=\"comment\">// 自动引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./user.service&#x27;</span>; <span class=\"comment\">// 自动引入</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">controllers</span>: [<span class=\"title class_\">UserController</span>], <span class=\"comment\">// 自动引入</span></span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [<span class=\"title class_\">UserService</span>] <span class=\"comment\">// 自动引入</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这就是使用Nest cli的好处了，其实这些文件我们也可以自己手动创建，然后在指定地方引入，也是一样的效果。这就是脚手架的美丽，它会官方提供的一个便捷工具。</p>\n<h2 id=\"四、连接数据库[mysql]\">四、连接数据库[MySQL]<a title=\"#四、连接数据库[mysql]\" href=\"#四、连接数据库[mysql]\"></a></h2>\n<h3 id=\"4.1-创建实体entity\">4.1 创建实体entity<a title=\"#4.1-创建实体entity\" href=\"#4.1-创建实体entity\"></a></h3>\n<p>先创建一个放实体文件的文件夹：<code>src/entities</code>，然后在这个文件夹下创建一个<code>user.entity.ts</code>文件，定义一个数据表的格式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// user.entity.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PrimaryGeneratedColumn</span>, <span class=\"title class_\">Column</span>, <span class=\"title class_\">Entity</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;typeorm&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Users</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@PrimaryGeneratedColumn</span>() <span class=\"comment\">// 自增主键</span></span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(&#123; <span class=\"attr\">length</span>: <span class=\"number\">45</span> &#125;) <span class=\"comment\">// 姓名</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Column</span>(<span class=\"string\">&#x27;int&#x27;</span>) <span class=\"comment\">// 年龄</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4.2-根模块引入\">4.2 根模块引入<a title=\"#4.2-根模块引入\" href=\"#4.2-根模块引入\"></a></h3>\n<p>在这之前，我们先打开<code>Navicat</code>数据库可视化工具，连接本地数据库，创建一个名为<code>nest_demo</code>的数据库。</p>\n<p><img src=\"../images/20210216/1.png\" alt=\"image\" class=\"φbs\"></p>\n<p>连接数据库之前，我们需要先在根模块<code>app.module.ts</code>中引入一些模块，并配置：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppController</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.controller&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.service&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./server/user/user.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">TypeOrmModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/typeorm&#x27;</span>; <span class=\"comment\">// 引入TypeORM</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Connection</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;typeorm&#x27;</span>; <span class=\"comment\">// 引入Connection</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">UserModule</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 配置数据库连接参数</span></span><br><span class=\"line\">    <span class=\"title class_\">TypeOrmModule</span>.<span class=\"title function_\">forRoot</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&#x27;mysql&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">host</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">port</span>: <span class=\"number\">3306</span>,</span><br><span class=\"line\">      <span class=\"attr\">username</span>: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">database</span>: <span class=\"string\">&#x27;nest_demo&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">entities</span>: [__dirname + <span class=\"string\">&#x27;/**/*.entity&#123;.ts,.js&#125;&#x27;</span>],</span><br><span class=\"line\">      <span class=\"attr\">synchronize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">controllers</span>: [<span class=\"title class_\">AppController</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [<span class=\"title class_\">AppService</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> connection: Connection</span>) &#123;&#125; <span class=\"comment\">// 初始化连接器Connection</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据库连接参数：</p>\n<ul>\n<li><code>type</code> 表明使用MySQL数据库；</li>\n<li><code>host</code> 是本地数据库地址；</li>\n<li><code>port</code> 是数据库默认端口；</li>\n<li><code>username</code> 数据库用户名；</li>\n<li><code>password</code> 数据库密码;</li>\n<li><code>database</code> 本程序使用的数据库名称；</li>\n<li><code>entities</code> 实体（这里是直接全局查找所有*.entity.ts或*.entity.js文件），可以手动<code>import</code>并加入这个数组内；</li>\n<li><code>synchronize</code> 实体会自动映射表结构（数据库中不存在某实体的表时，会自动根据实体创建）</li>\n</ul>\n<p>我们这时候保存代码，打开<code>Navicat</code>，查看<code>nest_demo</code>数据库，可以发现，Nest自动根据<code>user.entity.js</code>创建了一个名为<code>users</code>的表。</p>\n<h3 id=\"4.3-子模块引入\">4.3 子模块引入<a title=\"#4.3-子模块引入\" href=\"#4.3-子模块引入\"></a></h3>\n<p>修改分模块<code>user.module.ts</code>：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserController</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./user.controller&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./user.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">TypeOrmModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/typeorm&#x27;</span>; <span class=\"comment\">// 引入TypeORM</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Users</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../entities/user.entity&#x27;</span>; <span class=\"comment\">// 引入实体</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">TypeOrmModule</span>.<span class=\"title function_\">forFeature</span>([<span class=\"title class_\">Users</span>])], <span class=\"comment\">// 应用实体</span></span><br><span class=\"line\">  <span class=\"attr\">controllers</span>: [<span class=\"title class_\">UserController</span>],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [<span class=\"title class_\">UserService</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>到此为止，数据库连接配置，数据表设计都准备完成，下一步开始后端核心操作增删改查<code>CRUD</code>了。</p>\n<h2 id=\"五、增删改查crud[mysql]\">五、增删改查CRUD[MySQL]<a title=\"#五、增删改查crud[mysql]\" href=\"#五、增删改查crud[mysql]\"></a></h2>\n<h3 id=\"5.1-在provider中写数据库操作\">5.1 在provider中写数据库操作<a title=\"#5.1-在provider中写数据库操作\" href=\"#5.1-在provider中写数据库操作\"></a></h3>\n<p>我们打开<code>user.service.ts</code>文件，给<code>UserService</code>类添加一个构造函数，让其在实例化的时候能够接收到数据库<code>Model</code>，这样才能在类中的方法里操作数据库。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// user.service.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">InjectRepository</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/typeorm&#x27;</span>; <span class=\"comment\">// TypeORM依赖注入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Users</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../entities/user.entity&#x27;</span>; <span class=\"comment\">// 操作的实体</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DeleteResult</span>, <span class=\"title class_\">InsertResult</span>, <span class=\"title class_\">Repository</span>, <span class=\"title class_\">UpdateResult</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;typeorm&#x27;</span>; <span class=\"comment\">// 引入TypeORM模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"meta\">@InjectRepository</span>(Users)</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> userRepository: Repository&lt;Users&gt;,</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [增] 添加一个用户</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">add</span>(<span class=\"attr\">user</span>: <span class=\"title class_\">Users</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">InsertResult</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userRepository</span>.<span class=\"title function_\">insert</span>(user);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [改] 编辑一个用户</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">edit</span>(<span class=\"attr\">id</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">user</span>: <span class=\"title class_\">Users</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">UpdateResult</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userRepository</span>.<span class=\"title function_\">update</span>(id, user);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [删] 删除一个用户</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">remove</span>(<span class=\"attr\">id</span>: <span class=\"built_in\">number</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">DeleteResult</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userRepository</span>.<span class=\"title function_\">delete</span>(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [查] 查询所有用户</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">find</span>(): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">Users</span>[]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userRepository</span>.<span class=\"title function_\">find</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> users;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [查] 查询所有用户: query SQL方法</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">findAll</span>(): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">Users</span>[]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userRepository</span>.<span class=\"title function_\">query</span>(<span class=\"string\">&#x27;select * from users&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [查] 条件查询</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">findById</span>(<span class=\"attr\">id</span>: <span class=\"built_in\">number</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">Users</span>[]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userRepository</span>.<span class=\"title function_\">find</span>(&#123; id &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [查] 条件查询</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">findByName</span>(<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">Users</span>[]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userRepository</span>.<span class=\"title function_\">find</span>(&#123; name &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据库操作都是异步的，这里全部使用的<code>async</code>函数来处理异步的过程。</p>\n<h3 id=\"5.2-在controller中写路由、简单业务\">5.2 在controller中写路由、简单业务<a title=\"#5.2-在controller中写路由、简单业务\" href=\"#5.2-在controller中写路由、简单业务\"></a></h3>\n<p>我们先通过<code>Navicat</code>手动在<code>nest_demo</code>数据库中的<code>users</code>表中创建两条数据。</p>\n<p><img src=\"../images/20210216/3.png\" alt=\"image\" class=\"φbs\"></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Body</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Controller</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Delete</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Get</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Param</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Post</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Put</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Query</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>; <span class=\"comment\">// nest模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./user.service&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Users</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../entities/user.entity&#x27;</span>; <span class=\"comment\">// 引入实体</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DeleteResult</span>, <span class=\"title class_\">InsertResult</span>, <span class=\"title class_\">UpdateResult</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;typeorm&#x27;</span>; <span class=\"comment\">// TypeORM部分模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">UserResponse</span>&lt;T = <span class=\"built_in\">unknown</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">code</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  data?: T;</span><br><span class=\"line\">  <span class=\"attr\">message</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">&#x27;user&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> userService: UserService</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [查] 查询所有用户 http://localhost:3000/user/getAll</span></span><br><span class=\"line\">  <span class=\"meta\">@Get</span>(<span class=\"string\">&#x27;getAll&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">getAll</span>(): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">Users</span>[]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userService</span>.<span class=\"title function_\">findAll</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [查] 查询指定用户名 /user/findByName?name=Tom</span></span><br><span class=\"line\">  <span class=\"meta\">@Get</span>(<span class=\"string\">&#x27;findByName&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">findByName</span>(<span class=\"meta\">@Query</span>(<span class=\"string\">&#x27;name&#x27;</span>) <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">Users</span>[]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userService</span>.<span class=\"title function_\">findByName</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [查] 查询指定id /user/id/1</span></span><br><span class=\"line\">  <span class=\"meta\">@Get</span>(<span class=\"string\">&#x27;id/:id&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">findById</span>(<span class=\"meta\">@Param</span>(<span class=\"string\">&#x27;id&#x27;</span>) <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">Users</span>[]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userService</span>.<span class=\"title function_\">findById</span>(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [增] 增加用户（GET方式） /user/add?name=Bob&amp;age=11</span></span><br><span class=\"line\">  <span class=\"meta\">@Get</span>(<span class=\"string\">&#x27;add&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">add</span>(<span class=\"meta\">@Query</span>() <span class=\"attr\">user</span>: <span class=\"title class_\">Users</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">UserResponse</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userService</span>.<span class=\"title function_\">add</span>(user);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result.<span class=\"property\">raw</span>?.<span class=\"property\">insertId</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">code</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userService</span>.<span class=\"title function_\">findById</span>(result.<span class=\"property\">raw</span>.<span class=\"property\">insertId</span>),</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;操作成功&#x27;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">code</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;操作失败&#x27;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [增] 增加用户（POST方式） /user/add</span></span><br><span class=\"line\">  <span class=\"comment\">// @Post(&#x27;add&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">// async add(@Body() user: Users): Promise&lt;UserResponse&gt; &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   const result = await this.userService.add(user);</span></span><br><span class=\"line\">  <span class=\"comment\">//   if (result.raw?.insertId) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     return &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       code: 200,</span></span><br><span class=\"line\">  <span class=\"comment\">//       data: await this.userService.findById(result.raw.insertId),</span></span><br><span class=\"line\">  <span class=\"comment\">//       message: &#x27;操作成功&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//   return &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     code: 500,</span></span><br><span class=\"line\">  <span class=\"comment\">//     message: &#x27;操作失败&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [改] 修改用户（GET方式） /user/edit?id=1&amp;name=Tom1</span></span><br><span class=\"line\">  <span class=\"meta\">@Get</span>(<span class=\"string\">&#x27;edit&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">edit</span>(</span><br><span class=\"line\">    <span class=\"meta\">@Query</span>(<span class=\"string\">&#x27;id&#x27;</span>) <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">    <span class=\"meta\">@Query</span>() <span class=\"attr\">user</span>: <span class=\"title class_\">Users</span>,</span><br><span class=\"line\">  ): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">UserResponse</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userService</span>.<span class=\"title function_\">edit</span>(id, user);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result.<span class=\"property\">affected</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">code</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;操作成功&#x27;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">code</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;操作失败&#x27;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [改] 修改用户（PUT方式） /user/edit</span></span><br><span class=\"line\">  <span class=\"comment\">// @Put(&#x27;edit&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">// async edit(</span></span><br><span class=\"line\">  <span class=\"comment\">//   @Param(&#x27;id&#x27;) id: number,</span></span><br><span class=\"line\">  <span class=\"comment\">//   @Body() user: Users,</span></span><br><span class=\"line\">  <span class=\"comment\">// ): Promise&lt;UserResponse&gt; &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   const result = await this.userService.edit(id, user);</span></span><br><span class=\"line\">  <span class=\"comment\">//   if (result.affected === 1) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     return &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       code: 200,</span></span><br><span class=\"line\">  <span class=\"comment\">//       message: &#x27;操作成功&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//   return &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     code: 500,</span></span><br><span class=\"line\">  <span class=\"comment\">//     message: &#x27;操作失败&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [删] 删除用户（GET方式） /user/remove?id=3</span></span><br><span class=\"line\">  <span class=\"meta\">@Get</span>(<span class=\"string\">&#x27;remove&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">remove</span>(<span class=\"meta\">@Query</span>(<span class=\"string\">&#x27;id&#x27;</span>) <span class=\"attr\">id</span>: <span class=\"built_in\">number</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">UserResponse</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userService</span>.<span class=\"title function_\">remove</span>(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result.<span class=\"property\">affected</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">code</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;操作成功&#x27;</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">code</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;操作失败&#x27;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [删] 删除用户（DELETE方式） /user/delete/3</span></span><br><span class=\"line\">  <span class=\"comment\">// @Delete(&#x27;delete/:id&#x27;)</span></span><br><span class=\"line\">  <span class=\"comment\">// async remove(@Param(&#x27;id&#x27;) id: number): Promise&lt;UserResponse&gt; &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   const result = await this.userService.remove(id);</span></span><br><span class=\"line\">  <span class=\"comment\">//   if (result.affected === 1) &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     return &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       code: 200,</span></span><br><span class=\"line\">  <span class=\"comment\">//       message: &#x27;操作成功&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;;</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//   return &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     code: 500,</span></span><br><span class=\"line\">  <span class=\"comment\">//     message: &#x27;操作失败&#x27;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面，写了一些常用路由以及请求方式。我这里为增删改查<code>CRUD</code>分别都写了<code>GET</code>方式，目的就是方便在浏览器上直接测试。</p>\n<p><img src=\"../images/20210216/4.png\" alt=\"image\" class=\"φbs\"></p>\n<p>可能上面的代码中，可能有一些不懂的部分，比如<code>@Get</code>、<code>@Post</code>、<code>@Query</code>、<code>@Body</code>、<code>@Param</code>等装饰器，不过不打紧，大家可以放心大胆的去想像和猜测，也许正如你所想。这些概念和知识点将在《Nest.js大法-中》给大家详细讲解。</p>\n<h2 id=\"六、总结\">六、总结<a title=\"#六、总结\" href=\"#六、总结\"></a></h2>\n<p>本篇文章仅简单带大家使用<code>Nest.js</code>操作了一下数据库，立体的的了解了<code>Nest.js</code>框架的大致结构。</p>\n<p>完整的后端可不是这么简单的，比如我们这里没有对客户端传入的参数进行校验和过滤、状态管理，也没有处理数据库的异常和报错。</p>\n<p>不过不用着急，下一篇文章《Nest.js大法-中》将详细介绍<code>Nest.js</code>的常用的基础概念，常见业务逻辑的实现。而且最后还有《Nest.js大法-下》，手把手带你完整的写出一个大型应用。</p>\n<p><strong>修炼吾之《Nest.js大法》三部，行走江湖，亦可和后端交手而不败！</strong></p>\n<p>参考文档/文献/文章/教程：</p>\n<blockquote>\n<p><a href=\"https://nestjs.bootcss.com/\">https://nestjs.bootcss.com/</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://www.itying.com/nestjs/\">https://www.itying.com/nestjs/</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6885751452015263758#heading-18\">https://juejin.cn/post/6885751452015263758#heading-18</a></p>\n</blockquote>\n","prev":{"title":"使用Let's Encrypt给node.js项目添加SSL证书","link":"Learning/b06654da20be"},"next":{"title":"正则表达式","link":"Learning/e08f36f1337d"},"plink":"https://blog.jschef.com/Learning/3534afa74a70/","toc":[{"id":"一、环境准备","title":"一、环境准备","index":"1","children":[{"id":"1.1-mysql","title":"1.1 MySQL","index":"1.1"},{"id":"1.2-mongodb(弃)","title":"1.2 mongodb(弃)","index":"1.2"},{"id":"1.3-nest-cli","title":"1.3 Nest cli","index":"1.3"}]},{"id":"二、搭建项目","title":"二、搭建项目","index":"2","children":[{"id":"2.1-创建项目","title":"2.1 创建项目","index":"2.1"},{"id":"2.2-安装依赖","title":"2.2 安装依赖","index":"2.2"}]},{"id":"三、编写代码","title":"三、编写代码","index":"3","children":[{"id":"3.1-创建-module","title":"3.1 创建 Module","index":"3.1"},{"id":"3.2-创建-controller","title":"3.2 创建 Controller","index":"3.2"},{"id":"3.3-创建-provider","title":"3.3 创建 Provider","index":"3.3"}]},{"id":"四、连接数据库[mysql]","title":"四、连接数据库[MySQL]","index":"4","children":[{"id":"4.1-创建实体entity","title":"4.1 创建实体entity","index":"4.1"},{"id":"4.2-根模块引入","title":"4.2 根模块引入","index":"4.2"},{"id":"4.3-子模块引入","title":"4.3 子模块引入","index":"4.3"}]},{"id":"五、增删改查crud[mysql]","title":"五、增删改查CRUD[MySQL]","index":"5","children":[{"id":"5.1-在provider中写数据库操作","title":"5.1 在provider中写数据库操作","index":"5.1"},{"id":"5.2-在controller中写路由、简单业务","title":"5.2 在controller中写路由、简单业务","index":"5.2"}]},{"id":"六、总结","title":"六、总结","index":"6"}],"reward":true,"copyright":{"author":"Chef Wu","link":"<a href=\"https://blog.jschef.com/Learning/3534afa74a70/\" title=\"Nest.js大法-上\">https://blog.jschef.com/Learning/3534afa74a70/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"February 16, 2021"}}